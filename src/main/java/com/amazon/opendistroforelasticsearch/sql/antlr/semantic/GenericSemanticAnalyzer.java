package com.amazon.opendistroforelasticsearch.sql.antlr.semantic;

import com.amazon.opendistroforelasticsearch.sql.antlr.StringSimilarity;
import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.scope.Environment;
import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.scope.Namespace;
import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.scope.Symbol;
import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.types.BaseType;
import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.types.OperatorType;
import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.types.ScalarFunctionTypeExpression;
import com.amazon.opendistroforelasticsearch.sql.antlr.semantic.types.Type;
import com.amazon.opendistroforelasticsearch.sql.esdomain.LocalClusterState;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static com.amazon.opendistroforelasticsearch.sql.antlr.SqlAnalysisExceptionBuilder.semanticException;
import static com.amazon.opendistroforelasticsearch.sql.antlr.semantic.types.BaseType.TYPE_ERROR;

/**
 * Generic semantic analyzer that independent of concrete parser generated by specific ANTLR grammar.
 */
public class GenericSemanticAnalyzer {

    /** Environment stack for symbol scope management */
    private Environment environment = new Environment(null);


    /******************************************************************************
     *                              Definition
     ******************************************************************************/

    public Type visitIndexName(LocalClusterState clusterState, String indexName) {
        LocalClusterState.IndexMappings indexMappings = clusterState.getFieldMappings(new String[]{ indexName });
        LocalClusterState.FieldMappings mappings = indexMappings.firstMapping().firstMapping();
        mappings.data().forEach(
            (fieldName, mapping) -> environment.define(new Symbol(Namespace.FIELD_NAME, fieldName), BaseType.typeIn(mapping)) //TODO: table alias and undefined type in our system
        );
        return null;
    }

    public Type visitQuery(Runnable visit) {
        //environment = new Environment(environment);

        visit.run();

        //environment = environment.getParent();
        return null;
    }

    public Type visitWhereClause(Runnable visitDeep) {
        environment = new Environment(environment);

        for (ScalarFunctionTypeExpression type : ScalarFunctionTypeExpression.values()) {
            environment.define(new Symbol(Namespace.FUNCTION_NAME, type.getName()), type);
        }

        visitDeep.run();

        environment = environment.getParent();
        return null;
    }


    /******************************************************************************
     *                              Function & Operator
     ******************************************************************************/

    public Type visitFunctionCall(Type constructorType, Type... actualArgTypes) {
        return constructorType.apply(actualArgTypes);
    }


    /******************************************************************************
     *                              Identifier
     ******************************************************************************/

    public Type visitFieldName(String fieldName) {
        return resolve(new Symbol(Namespace.FIELD_NAME, fieldName));
    }

    public Type visitFunctionName(String funcName) {
        return resolve(new Symbol(Namespace.FUNCTION_NAME, funcName));
    }

    public Type visitOperatorName(String opName) {
        return new OperatorType(opName);
    }

    public Type resolve(Symbol symbol) {
        Optional<Type> type = environment.resolve(symbol);
        if (!type.isPresent()) {
            List<String> suggestedWords = new StringSimilarity(environment.allSymbolsIn(symbol.getNamespace())).similarTo(symbol.getName());
            throw semanticException("%s cannot be found.", symbol).
                /*at(sql, ctx).*/suggestion("Did you mean [%s]?", String.join(", ", suggestedWords)).build();
        }
        return type.get();
    }

    /******************************************************************************
     *                      Constant and literal
     ******************************************************************************/

    public Type visitString(String text) {
        return BaseType.STRING;
    }

    public Type visitNumber(String text) { //TODO: float or integer?
        return BaseType.NUMBER;
    }

    public Type visitBoolean(String text) {
        return BaseType.BOOLEAN;
    }

}
