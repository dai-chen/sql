// Generated from OpenDistroSqlParser.g4 by ANTLR 4.7.1
package com.amazon.opendistroforelasticsearch.sql.antlr.parser;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class OpenDistroSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ALWAYS=8, ANALYZE=9, AND=10, AS=11, ASC=12, BEFORE=13, 
		BETWEEN=14, BOTH=15, BY=16, CALL=17, CASCADE=18, CASE=19, CAST=20, CHANGE=21, 
		CHARACTER=22, CHECK=23, COLLATE=24, COLUMN=25, CONDITION=26, CONSTRAINT=27, 
		CONTINUE=28, CONVERT=29, CREATE=30, CROSS=31, CURRENT_USER=32, CURSOR=33, 
		DATABASE=34, DATABASES=35, DECLARE=36, DEFAULT=37, DELAYED=38, DELETE=39, 
		DESC=40, DESCRIBE=41, DETERMINISTIC=42, DISTINCT=43, DISTINCTROW=44, DROP=45, 
		EACH=46, ELSE=47, ELSEIF=48, ENCLOSED=49, ESCAPED=50, EXISTS=51, EXIT=52, 
		EXPLAIN=53, FALSE=54, FETCH=55, FOR=56, FORCE=57, FOREIGN=58, FROM=59, 
		FULLTEXT=60, GENERATED=61, GRANT=62, GROUP=63, HAVING=64, HIGH_PRIORITY=65, 
		IF=66, IGNORE=67, IN=68, INDEX=69, INFILE=70, INNER=71, INOUT=72, INSERT=73, 
		INTERVAL=74, INTO=75, IS=76, ITERATE=77, JOIN=78, KEY=79, KEYS=80, KILL=81, 
		LEADING=82, LEAVE=83, LEFT=84, LIKE=85, LIMIT=86, LINEAR=87, LINES=88, 
		LOAD=89, LOCK=90, LOOP=91, LOW_PRIORITY=92, MASTER_BIND=93, MASTER_SSL_VERIFY_SERVER_CERT=94, 
		MATCH=95, MAXVALUE=96, MODIFIES=97, NATURAL=98, NOT=99, NO_WRITE_TO_BINLOG=100, 
		NULL_LITERAL=101, ON=102, OPTIMIZE=103, OPTION=104, OPTIONALLY=105, OR=106, 
		ORDER=107, OUT=108, OUTER=109, OUTFILE=110, PARTITION=111, PRIMARY=112, 
		PROCEDURE=113, PURGE=114, RANGE=115, READ=116, READS=117, REFERENCES=118, 
		REGEXP=119, RELEASE=120, RENAME=121, REPEAT=122, REPLACE=123, REQUIRE=124, 
		RESTRICT=125, RETURN=126, REVOKE=127, RIGHT=128, RLIKE=129, SCHEMA=130, 
		SCHEMAS=131, SELECT=132, SET=133, SEPARATOR=134, SHOW=135, SPATIAL=136, 
		SQL=137, SQLEXCEPTION=138, SQLSTATE=139, SQLWARNING=140, SQL_BIG_RESULT=141, 
		SQL_CALC_FOUND_ROWS=142, SQL_SMALL_RESULT=143, SSL=144, STARTING=145, 
		STRAIGHT_JOIN=146, TABLE=147, TERMINATED=148, THEN=149, TO=150, TRAILING=151, 
		TRIGGER=152, TRUE=153, UNDO=154, UNION=155, UNIQUE=156, UNLOCK=157, UNSIGNED=158, 
		UPDATE=159, USAGE=160, USE=161, USING=162, VALUES=163, WHEN=164, WHERE=165, 
		WHILE=166, WITH=167, WRITE=168, XOR=169, ZEROFILL=170, TINYINT=171, SMALLINT=172, 
		MEDIUMINT=173, INT=174, INTEGER=175, BIGINT=176, REAL=177, DOUBLE=178, 
		PRECISION=179, FLOAT=180, DECIMAL=181, DEC=182, NUMERIC=183, DATE=184, 
		TIME=185, TIMESTAMP=186, DATETIME=187, YEAR=188, CHAR=189, VARCHAR=190, 
		NVARCHAR=191, NATIONAL=192, BINARY=193, VARBINARY=194, TINYBLOB=195, BLOB=196, 
		MEDIUMBLOB=197, LONGBLOB=198, TINYTEXT=199, TEXT=200, MEDIUMTEXT=201, 
		LONGTEXT=202, ENUM=203, VARYING=204, SERIAL=205, YEAR_MONTH=206, DAY_HOUR=207, 
		DAY_MINUTE=208, DAY_SECOND=209, HOUR_MINUTE=210, HOUR_SECOND=211, MINUTE_SECOND=212, 
		SECOND_MICROSECOND=213, MINUTE_MICROSECOND=214, HOUR_MICROSECOND=215, 
		DAY_MICROSECOND=216, AVG=217, BIT_AND=218, BIT_OR=219, BIT_XOR=220, COUNT=221, 
		GROUP_CONCAT=222, MAX=223, MIN=224, STD=225, STDDEV=226, STDDEV_POP=227, 
		STDDEV_SAMP=228, SUM=229, VAR_POP=230, VAR_SAMP=231, VARIANCE=232, CURRENT_DATE=233, 
		CURRENT_TIME=234, CURRENT_TIMESTAMP=235, LOCALTIME=236, CURDATE=237, CURTIME=238, 
		DATE_ADD=239, DATE_SUB=240, EXTRACT=241, LOCALTIMESTAMP=242, NOW=243, 
		POSITION=244, SUBSTR=245, SUBSTRING=246, SYSDATE=247, TRIM=248, UTC_DATE=249, 
		UTC_TIME=250, UTC_TIMESTAMP=251, ACCOUNT=252, ACTION=253, AFTER=254, AGGREGATE=255, 
		ALGORITHM=256, ANY=257, AT=258, AUTHORS=259, AUTOCOMMIT=260, AUTOEXTEND_SIZE=261, 
		AUTO_INCREMENT=262, AVG_ROW_LENGTH=263, BEGIN=264, BINLOG=265, BIT=266, 
		BLOCK=267, BOOL=268, BOOLEAN=269, BTREE=270, CACHE=271, CASCADED=272, 
		CHAIN=273, CHANGED=274, CHANNEL=275, CHECKSUM=276, PAGE_CHECKSUM=277, 
		CIPHER=278, CLIENT=279, CLOSE=280, COALESCE=281, CODE=282, COLUMNS=283, 
		COLUMN_FORMAT=284, COMMENT=285, COMMIT=286, COMPACT=287, COMPLETION=288, 
		COMPRESSED=289, COMPRESSION=290, CONCURRENT=291, CONNECTION=292, CONSISTENT=293, 
		CONTAINS=294, CONTEXT=295, CONTRIBUTORS=296, COPY=297, CPU=298, DATA=299, 
		DATAFILE=300, DEALLOCATE=301, DEFAULT_AUTH=302, DEFINER=303, DELAY_KEY_WRITE=304, 
		DES_KEY_FILE=305, DIRECTORY=306, DISABLE=307, DISCARD=308, DISK=309, DO=310, 
		DUMPFILE=311, DUPLICATE=312, DYNAMIC=313, ENABLE=314, ENCRYPTION=315, 
		END=316, ENDS=317, ENGINE=318, ENGINES=319, ERROR=320, ERRORS=321, ESCAPE=322, 
		EVEN=323, EVENT=324, EVENTS=325, EVERY=326, EXCHANGE=327, EXCLUSIVE=328, 
		EXPIRE=329, EXPORT=330, EXTENDED=331, EXTENT_SIZE=332, FAST=333, FAULTS=334, 
		FIELDS=335, FILE_BLOCK_SIZE=336, FILTER=337, FIRST=338, FIXED=339, FLUSH=340, 
		FOLLOWS=341, FOUND=342, FULL=343, FUNCTION=344, GENERAL=345, GLOBAL=346, 
		GRANTS=347, GROUP_REPLICATION=348, HANDLER=349, HASH=350, HELP=351, HOST=352, 
		HOSTS=353, IDENTIFIED=354, IGNORE_SERVER_IDS=355, IMPORT=356, INDEXES=357, 
		INITIAL_SIZE=358, INPLACE=359, INSERT_METHOD=360, INSTALL=361, INSTANCE=362, 
		INVOKER=363, IO=364, IO_THREAD=365, IPC=366, ISOLATION=367, ISSUER=368, 
		JSON=369, KEY_BLOCK_SIZE=370, LANGUAGE=371, LAST=372, LEAVES=373, LESS=374, 
		LEVEL=375, LIST=376, LOCAL=377, LOGFILE=378, LOGS=379, MASTER=380, MASTER_AUTO_POSITION=381, 
		MASTER_CONNECT_RETRY=382, MASTER_DELAY=383, MASTER_HEARTBEAT_PERIOD=384, 
		MASTER_HOST=385, MASTER_LOG_FILE=386, MASTER_LOG_POS=387, MASTER_PASSWORD=388, 
		MASTER_PORT=389, MASTER_RETRY_COUNT=390, MASTER_SSL=391, MASTER_SSL_CA=392, 
		MASTER_SSL_CAPATH=393, MASTER_SSL_CERT=394, MASTER_SSL_CIPHER=395, MASTER_SSL_CRL=396, 
		MASTER_SSL_CRLPATH=397, MASTER_SSL_KEY=398, MASTER_TLS_VERSION=399, MASTER_USER=400, 
		MAX_CONNECTIONS_PER_HOUR=401, MAX_QUERIES_PER_HOUR=402, MAX_ROWS=403, 
		MAX_SIZE=404, MAX_UPDATES_PER_HOUR=405, MAX_USER_CONNECTIONS=406, MEDIUM=407, 
		MERGE=408, MID=409, MIGRATE=410, MIN_ROWS=411, MODE=412, MODIFY=413, MUTEX=414, 
		MYSQL=415, NAME=416, NAMES=417, NCHAR=418, NEVER=419, NEXT=420, NO=421, 
		NODEGROUP=422, NONE=423, OFFLINE=424, OFFSET=425, OJ=426, OLD_PASSWORD=427, 
		ONE=428, ONLINE=429, ONLY=430, OPEN=431, OPTIMIZER_COSTS=432, OPTIONS=433, 
		OWNER=434, PACK_KEYS=435, PAGE=436, PARSER=437, PARTIAL=438, PARTITIONING=439, 
		PARTITIONS=440, PASSWORD=441, PHASE=442, PLUGIN=443, PLUGIN_DIR=444, PLUGINS=445, 
		PORT=446, PRECEDES=447, PREPARE=448, PRESERVE=449, PREV=450, PROCESSLIST=451, 
		PROFILE=452, PROFILES=453, PROXY=454, QUERY=455, QUICK=456, REBUILD=457, 
		RECOVER=458, REDO_BUFFER_SIZE=459, REDUNDANT=460, RELAY=461, RELAY_LOG_FILE=462, 
		RELAY_LOG_POS=463, RELAYLOG=464, REMOVE=465, REORGANIZE=466, REPAIR=467, 
		REPLICATE_DO_DB=468, REPLICATE_DO_TABLE=469, REPLICATE_IGNORE_DB=470, 
		REPLICATE_IGNORE_TABLE=471, REPLICATE_REWRITE_DB=472, REPLICATE_WILD_DO_TABLE=473, 
		REPLICATE_WILD_IGNORE_TABLE=474, REPLICATION=475, RESET=476, RESUME=477, 
		RETURNS=478, ROLLBACK=479, ROLLUP=480, ROTATE=481, ROW=482, ROWS=483, 
		ROW_FORMAT=484, SAVEPOINT=485, SCHEDULE=486, SECURITY=487, SERVER=488, 
		SESSION=489, SHARE=490, SHARED=491, SIGNED=492, SIMPLE=493, SLAVE=494, 
		SLOW=495, SNAPSHOT=496, SOCKET=497, SOME=498, SONAME=499, SOUNDS=500, 
		SOURCE=501, SQL_AFTER_GTIDS=502, SQL_AFTER_MTS_GAPS=503, SQL_BEFORE_GTIDS=504, 
		SQL_BUFFER_RESULT=505, SQL_CACHE=506, SQL_NO_CACHE=507, SQL_THREAD=508, 
		START=509, STARTS=510, STATS_AUTO_RECALC=511, STATS_PERSISTENT=512, STATS_SAMPLE_PAGES=513, 
		STATUS=514, STOP=515, STORAGE=516, STORED=517, STRING=518, SUBJECT=519, 
		SUBPARTITION=520, SUBPARTITIONS=521, SUSPEND=522, SWAPS=523, SWITCHES=524, 
		TABLESPACE=525, TEMPORARY=526, TEMPTABLE=527, THAN=528, TRADITIONAL=529, 
		TRANSACTION=530, TRIGGERS=531, TRUNCATE=532, UNDEFINED=533, UNDOFILE=534, 
		UNDO_BUFFER_SIZE=535, UNINSTALL=536, UNKNOWN=537, UNTIL=538, UPGRADE=539, 
		USER=540, USE_FRM=541, USER_RESOURCES=542, VALIDATION=543, VALUE=544, 
		VARIABLES=545, VIEW=546, VIRTUAL=547, WAIT=548, WARNINGS=549, WITHOUT=550, 
		WORK=551, WRAPPER=552, X509=553, XA=554, XML=555, EUR=556, USA=557, JIS=558, 
		ISO=559, INTERNAL=560, QUARTER=561, MONTH=562, DAY=563, HOUR=564, MINUTE=565, 
		WEEK=566, SECOND=567, MICROSECOND=568, TABLES=569, ROUTINE=570, EXECUTE=571, 
		FILE=572, PROCESS=573, RELOAD=574, SHUTDOWN=575, SUPER=576, PRIVILEGES=577, 
		ARMSCII8=578, ASCII=579, BIG5=580, CP1250=581, CP1251=582, CP1256=583, 
		CP1257=584, CP850=585, CP852=586, CP866=587, CP932=588, DEC8=589, EUCJPMS=590, 
		EUCKR=591, GB2312=592, GBK=593, GEOSTD8=594, GREEK=595, HEBREW=596, HP8=597, 
		KEYBCS2=598, KOI8R=599, KOI8U=600, LATIN1=601, LATIN2=602, LATIN5=603, 
		LATIN7=604, MACCE=605, MACROMAN=606, SJIS=607, SWE7=608, TIS620=609, UCS2=610, 
		UJIS=611, UTF16=612, UTF16LE=613, UTF32=614, UTF8=615, UTF8MB3=616, UTF8MB4=617, 
		ARCHIVE=618, BLACKHOLE=619, CSV=620, FEDERATED=621, INNODB=622, MEMORY=623, 
		MRG_MYISAM=624, MYISAM=625, NDB=626, NDBCLUSTER=627, PERFORMANCE_SCHEMA=628, 
		TOKUDB=629, REPEATABLE=630, COMMITTED=631, UNCOMMITTED=632, SERIALIZABLE=633, 
		GEOMETRYCOLLECTION=634, GEOMCOLLECTION=635, GEOMETRY=636, LINESTRING=637, 
		MULTILINESTRING=638, MULTIPOINT=639, MULTIPOLYGON=640, POINT=641, POLYGON=642, 
		ABS=643, ACOS=644, ADDDATE=645, ADDTIME=646, AES_DECRYPT=647, AES_ENCRYPT=648, 
		AREA=649, ASBINARY=650, ASIN=651, ASTEXT=652, ASWKB=653, ASWKT=654, ASYMMETRIC_DECRYPT=655, 
		ASYMMETRIC_DERIVE=656, ASYMMETRIC_ENCRYPT=657, ASYMMETRIC_SIGN=658, ASYMMETRIC_VERIFY=659, 
		ATAN=660, ATAN2=661, BENCHMARK=662, BIN=663, BIT_COUNT=664, BIT_LENGTH=665, 
		BUFFER=666, CEIL=667, CEILING=668, CENTROID=669, CHARACTER_LENGTH=670, 
		CHARSET=671, CHAR_LENGTH=672, COERCIBILITY=673, COLLATION=674, COMPRESS=675, 
		CONCAT=676, CONCAT_WS=677, CONNECTION_ID=678, CONV=679, CONVERT_TZ=680, 
		COS=681, COT=682, CRC32=683, CREATE_ASYMMETRIC_PRIV_KEY=684, CREATE_ASYMMETRIC_PUB_KEY=685, 
		CREATE_DH_PARAMETERS=686, CREATE_DIGEST=687, CROSSES=688, DATEDIFF=689, 
		DATE_FORMAT=690, DAYNAME=691, DAYOFMONTH=692, DAYOFWEEK=693, DAYOFYEAR=694, 
		DECODE=695, DEGREES=696, DES_DECRYPT=697, DES_ENCRYPT=698, DIMENSION=699, 
		DISJOINT=700, ELT=701, ENCODE=702, ENCRYPT=703, ENDPOINT=704, ENVELOPE=705, 
		EQUALS=706, EXP=707, EXPORT_SET=708, EXTERIORRING=709, EXTRACTVALUE=710, 
		FIELD=711, FIND_IN_SET=712, FLOOR=713, FORMAT=714, FOUND_ROWS=715, FROM_BASE64=716, 
		FROM_DAYS=717, FROM_UNIXTIME=718, GEOMCOLLFROMTEXT=719, GEOMCOLLFROMWKB=720, 
		GEOMETRYCOLLECTIONFROMTEXT=721, GEOMETRYCOLLECTIONFROMWKB=722, GEOMETRYFROMTEXT=723, 
		GEOMETRYFROMWKB=724, GEOMETRYN=725, GEOMETRYTYPE=726, GEOMFROMTEXT=727, 
		GEOMFROMWKB=728, GET_FORMAT=729, GET_LOCK=730, GLENGTH=731, GREATEST=732, 
		GTID_SUBSET=733, GTID_SUBTRACT=734, HEX=735, IFNULL=736, INET6_ATON=737, 
		INET6_NTOA=738, INET_ATON=739, INET_NTOA=740, INSTR=741, INTERIORRINGN=742, 
		INTERSECTS=743, ISCLOSED=744, ISEMPTY=745, ISNULL=746, ISSIMPLE=747, IS_FREE_LOCK=748, 
		IS_IPV4=749, IS_IPV4_COMPAT=750, IS_IPV4_MAPPED=751, IS_IPV6=752, IS_USED_LOCK=753, 
		LAST_INSERT_ID=754, LCASE=755, LEAST=756, LENGTH=757, LINEFROMTEXT=758, 
		LINEFROMWKB=759, LINESTRINGFROMTEXT=760, LINESTRINGFROMWKB=761, LN=762, 
		LOAD_FILE=763, LOCATE=764, LOG=765, LOG10=766, LOG2=767, LOWER=768, LPAD=769, 
		LTRIM=770, MAKEDATE=771, MAKETIME=772, MAKE_SET=773, MASTER_POS_WAIT=774, 
		MBRCONTAINS=775, MBRDISJOINT=776, MBREQUAL=777, MBRINTERSECTS=778, MBROVERLAPS=779, 
		MBRTOUCHES=780, MBRWITHIN=781, MD5=782, MLINEFROMTEXT=783, MLINEFROMWKB=784, 
		MONTHNAME=785, MPOINTFROMTEXT=786, MPOINTFROMWKB=787, MPOLYFROMTEXT=788, 
		MPOLYFROMWKB=789, MULTILINESTRINGFROMTEXT=790, MULTILINESTRINGFROMWKB=791, 
		MULTIPOINTFROMTEXT=792, MULTIPOINTFROMWKB=793, MULTIPOLYGONFROMTEXT=794, 
		MULTIPOLYGONFROMWKB=795, NAME_CONST=796, NULLIF=797, NUMGEOMETRIES=798, 
		NUMINTERIORRINGS=799, NUMPOINTS=800, OCT=801, OCTET_LENGTH=802, ORD=803, 
		OVERLAPS=804, PERIOD_ADD=805, PERIOD_DIFF=806, PI=807, POINTFROMTEXT=808, 
		POINTFROMWKB=809, POINTN=810, POLYFROMTEXT=811, POLYFROMWKB=812, POLYGONFROMTEXT=813, 
		POLYGONFROMWKB=814, POW=815, POWER=816, QUOTE=817, RADIANS=818, RAND=819, 
		RANDOM_BYTES=820, RELEASE_LOCK=821, REVERSE=822, ROUND=823, ROW_COUNT=824, 
		RPAD=825, RTRIM=826, SEC_TO_TIME=827, SESSION_USER=828, SHA=829, SHA1=830, 
		SHA2=831, SIGN=832, SIN=833, SLEEP=834, SOUNDEX=835, SQL_THREAD_WAIT_AFTER_GTIDS=836, 
		SQRT=837, SRID=838, STARTPOINT=839, STRCMP=840, STR_TO_DATE=841, ST_AREA=842, 
		ST_ASBINARY=843, ST_ASTEXT=844, ST_ASWKB=845, ST_ASWKT=846, ST_BUFFER=847, 
		ST_CENTROID=848, ST_CONTAINS=849, ST_CROSSES=850, ST_DIFFERENCE=851, ST_DIMENSION=852, 
		ST_DISJOINT=853, ST_DISTANCE=854, ST_ENDPOINT=855, ST_ENVELOPE=856, ST_EQUALS=857, 
		ST_EXTERIORRING=858, ST_GEOMCOLLFROMTEXT=859, ST_GEOMCOLLFROMTXT=860, 
		ST_GEOMCOLLFROMWKB=861, ST_GEOMETRYCOLLECTIONFROMTEXT=862, ST_GEOMETRYCOLLECTIONFROMWKB=863, 
		ST_GEOMETRYFROMTEXT=864, ST_GEOMETRYFROMWKB=865, ST_GEOMETRYN=866, ST_GEOMETRYTYPE=867, 
		ST_GEOMFROMTEXT=868, ST_GEOMFROMWKB=869, ST_INTERIORRINGN=870, ST_INTERSECTION=871, 
		ST_INTERSECTS=872, ST_ISCLOSED=873, ST_ISEMPTY=874, ST_ISSIMPLE=875, ST_LINEFROMTEXT=876, 
		ST_LINEFROMWKB=877, ST_LINESTRINGFROMTEXT=878, ST_LINESTRINGFROMWKB=879, 
		ST_NUMGEOMETRIES=880, ST_NUMINTERIORRING=881, ST_NUMINTERIORRINGS=882, 
		ST_NUMPOINTS=883, ST_OVERLAPS=884, ST_POINTFROMTEXT=885, ST_POINTFROMWKB=886, 
		ST_POINTN=887, ST_POLYFROMTEXT=888, ST_POLYFROMWKB=889, ST_POLYGONFROMTEXT=890, 
		ST_POLYGONFROMWKB=891, ST_SRID=892, ST_STARTPOINT=893, ST_SYMDIFFERENCE=894, 
		ST_TOUCHES=895, ST_UNION=896, ST_WITHIN=897, ST_X=898, ST_Y=899, SUBDATE=900, 
		SUBSTRING_INDEX=901, SUBTIME=902, SYSTEM_USER=903, TAN=904, TIMEDIFF=905, 
		TIMESTAMPADD=906, TIMESTAMPDIFF=907, TIME_FORMAT=908, TIME_TO_SEC=909, 
		TOUCHES=910, TO_BASE64=911, TO_DAYS=912, TO_SECONDS=913, UCASE=914, UNCOMPRESS=915, 
		UNCOMPRESSED_LENGTH=916, UNHEX=917, UNIX_TIMESTAMP=918, UPDATEXML=919, 
		UPPER=920, UUID=921, UUID_SHORT=922, VALIDATE_PASSWORD_STRENGTH=923, VERSION=924, 
		WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=925, WEEKDAY=926, WEEKOFYEAR=927, WEIGHT_STRING=928, 
		WITHIN=929, YEARWEEK=930, Y_FUNCTION=931, X_FUNCTION=932, VAR_ASSIGN=933, 
		PLUS_ASSIGN=934, MINUS_ASSIGN=935, MULT_ASSIGN=936, DIV_ASSIGN=937, MOD_ASSIGN=938, 
		AND_ASSIGN=939, XOR_ASSIGN=940, OR_ASSIGN=941, STAR=942, DIVIDE=943, MODULE=944, 
		PLUS=945, MINUSMINUS=946, MINUS=947, DIV=948, MOD=949, EQUAL_SYMBOL=950, 
		GREATER_SYMBOL=951, LESS_SYMBOL=952, EXCLAMATION_SYMBOL=953, BIT_NOT_OP=954, 
		BIT_OR_OP=955, BIT_AND_OP=956, BIT_XOR_OP=957, DOT=958, LR_BRACKET=959, 
		RR_BRACKET=960, COMMA=961, SEMI=962, AT_SIGN=963, ZERO_DECIMAL=964, ONE_DECIMAL=965, 
		TWO_DECIMAL=966, SINGLE_QUOTE_SYMB=967, DOUBLE_QUOTE_SYMB=968, REVERSE_QUOTE_SYMB=969, 
		COLON_SYMB=970, CHARSET_REVERSE_QOUTE_STRING=971, FILESIZE_LITERAL=972, 
		START_NATIONAL_STRING_LITERAL=973, STRING_LITERAL=974, DECIMAL_LITERAL=975, 
		HEXADECIMAL_LITERAL=976, REAL_LITERAL=977, NULL_SPEC_LITERAL=978, BIT_STRING=979, 
		STRING_CHARSET_NAME=980, DOT_ID=981, ID=982, REVERSE_QUOTE_ID=983, STRING_USER_NAME=984, 
		LOCAL_ID=985, GLOBAL_ID=986, ERROR_RECONGNIGION=987;
	public static final int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_transactionStatement = 6, 
		RULE_replicationStatement = 7, RULE_preparedStatement = 8, RULE_compoundStatement = 9, 
		RULE_administrationStatement = 10, RULE_utilityStatement = 11, RULE_createDatabase = 12, 
		RULE_createEvent = 13, RULE_createIndex = 14, RULE_createLogfileGroup = 15, 
		RULE_createProcedure = 16, RULE_createFunction = 17, RULE_createServer = 18, 
		RULE_createTable = 19, RULE_createTablespaceInnodb = 20, RULE_createTablespaceNdb = 21, 
		RULE_createTrigger = 22, RULE_createView = 23, RULE_createDatabaseOption = 24, 
		RULE_ownerStatement = 25, RULE_scheduleExpression = 26, RULE_timestampValue = 27, 
		RULE_intervalExpr = 28, RULE_intervalType = 29, RULE_enableType = 30, 
		RULE_indexType = 31, RULE_indexOption = 32, RULE_procedureParameter = 33, 
		RULE_functionParameter = 34, RULE_routineOption = 35, RULE_serverOption = 36, 
		RULE_createDefinitions = 37, RULE_createDefinition = 38, RULE_columnDefinition = 39, 
		RULE_columnConstraint = 40, RULE_tableConstraint = 41, RULE_referenceDefinition = 42, 
		RULE_referenceAction = 43, RULE_referenceControlType = 44, RULE_indexColumnDefinition = 45, 
		RULE_tableOption = 46, RULE_tablespaceStorage = 47, RULE_partitionDefinitions = 48, 
		RULE_partitionFunctionDefinition = 49, RULE_subpartitionFunctionDefinition = 50, 
		RULE_partitionDefinition = 51, RULE_partitionDefinerAtom = 52, RULE_partitionDefinerVector = 53, 
		RULE_subpartitionDefinition = 54, RULE_partitionOption = 55, RULE_alterDatabase = 56, 
		RULE_alterEvent = 57, RULE_alterFunction = 58, RULE_alterInstance = 59, 
		RULE_alterLogfileGroup = 60, RULE_alterProcedure = 61, RULE_alterServer = 62, 
		RULE_alterTable = 63, RULE_alterTablespace = 64, RULE_alterView = 65, 
		RULE_alterSpecification = 66, RULE_dropDatabase = 67, RULE_dropEvent = 68, 
		RULE_dropIndex = 69, RULE_dropLogfileGroup = 70, RULE_dropProcedure = 71, 
		RULE_dropFunction = 72, RULE_dropServer = 73, RULE_dropTable = 74, RULE_dropTablespace = 75, 
		RULE_dropTrigger = 76, RULE_dropView = 77, RULE_renameTable = 78, RULE_renameTableClause = 79, 
		RULE_truncateTable = 80, RULE_callStatement = 81, RULE_deleteStatement = 82, 
		RULE_doStatement = 83, RULE_handlerStatement = 84, RULE_insertStatement = 85, 
		RULE_loadDataStatement = 86, RULE_loadXmlStatement = 87, RULE_replaceStatement = 88, 
		RULE_selectStatement = 89, RULE_updateStatement = 90, RULE_insertStatementValue = 91, 
		RULE_updatedElement = 92, RULE_assignmentField = 93, RULE_lockClause = 94, 
		RULE_singleDeleteStatement = 95, RULE_multipleDeleteStatement = 96, RULE_handlerOpenStatement = 97, 
		RULE_handlerReadIndexStatement = 98, RULE_handlerReadStatement = 99, RULE_handlerCloseStatement = 100, 
		RULE_singleUpdateStatement = 101, RULE_multipleUpdateStatement = 102, 
		RULE_orderByClause = 103, RULE_orderByExpression = 104, RULE_tableSources = 105, 
		RULE_tableSource = 106, RULE_tableSourceItem = 107, RULE_indexHint = 108, 
		RULE_indexHintType = 109, RULE_joinPart = 110, RULE_queryExpression = 111, 
		RULE_queryExpressionNointo = 112, RULE_querySpecification = 113, RULE_querySpecificationNointo = 114, 
		RULE_unionParenthesis = 115, RULE_unionStatement = 116, RULE_selectSpec = 117, 
		RULE_selectElements = 118, RULE_selectElement = 119, RULE_selectIntoExpression = 120, 
		RULE_selectFieldsInto = 121, RULE_selectLinesInto = 122, RULE_fromClause = 123, 
		RULE_groupByItem = 124, RULE_limitClause = 125, RULE_limitClauseAtom = 126, 
		RULE_startTransaction = 127, RULE_beginWork = 128, RULE_commitWork = 129, 
		RULE_rollbackWork = 130, RULE_savepointStatement = 131, RULE_rollbackStatement = 132, 
		RULE_releaseStatement = 133, RULE_lockTables = 134, RULE_unlockTables = 135, 
		RULE_setAutocommitStatement = 136, RULE_setTransactionStatement = 137, 
		RULE_transactionMode = 138, RULE_lockTableElement = 139, RULE_lockAction = 140, 
		RULE_transactionOption = 141, RULE_transactionLevel = 142, RULE_changeMaster = 143, 
		RULE_changeReplicationFilter = 144, RULE_purgeBinaryLogs = 145, RULE_resetMaster = 146, 
		RULE_resetSlave = 147, RULE_startSlave = 148, RULE_stopSlave = 149, RULE_startGroupReplication = 150, 
		RULE_stopGroupReplication = 151, RULE_masterOption = 152, RULE_stringMasterOption = 153, 
		RULE_decimalMasterOption = 154, RULE_boolMasterOption = 155, RULE_channelOption = 156, 
		RULE_replicationFilter = 157, RULE_tablePair = 158, RULE_threadType = 159, 
		RULE_untilOption = 160, RULE_connectionOption = 161, RULE_gtuidSet = 162, 
		RULE_xaStartTransaction = 163, RULE_xaEndTransaction = 164, RULE_xaPrepareStatement = 165, 
		RULE_xaCommitWork = 166, RULE_xaRollbackWork = 167, RULE_xaRecoverWork = 168, 
		RULE_prepareStatement = 169, RULE_executeStatement = 170, RULE_deallocatePrepare = 171, 
		RULE_routineBody = 172, RULE_blockStatement = 173, RULE_caseStatement = 174, 
		RULE_ifStatement = 175, RULE_iterateStatement = 176, RULE_leaveStatement = 177, 
		RULE_loopStatement = 178, RULE_repeatStatement = 179, RULE_returnStatement = 180, 
		RULE_whileStatement = 181, RULE_cursorStatement = 182, RULE_declareVariable = 183, 
		RULE_declareCondition = 184, RULE_declareCursor = 185, RULE_declareHandler = 186, 
		RULE_handlerConditionValue = 187, RULE_procedureSqlStatement = 188, RULE_caseAlternative = 189, 
		RULE_elifAlternative = 190, RULE_alterUser = 191, RULE_createUser = 192, 
		RULE_dropUser = 193, RULE_grantStatement = 194, RULE_grantProxy = 195, 
		RULE_renameUser = 196, RULE_revokeStatement = 197, RULE_revokeProxy = 198, 
		RULE_setPasswordStatement = 199, RULE_userSpecification = 200, RULE_userAuthOption = 201, 
		RULE_tlsOption = 202, RULE_userResourceOption = 203, RULE_userPasswordOption = 204, 
		RULE_userLockOption = 205, RULE_privelegeClause = 206, RULE_privilege = 207, 
		RULE_privilegeLevel = 208, RULE_renameUserClause = 209, RULE_analyzeTable = 210, 
		RULE_checkTable = 211, RULE_checksumTable = 212, RULE_optimizeTable = 213, 
		RULE_repairTable = 214, RULE_checkTableOption = 215, RULE_createUdfunction = 216, 
		RULE_installPlugin = 217, RULE_uninstallPlugin = 218, RULE_setStatement = 219, 
		RULE_showStatement = 220, RULE_variableClause = 221, RULE_showCommonEntity = 222, 
		RULE_showFilter = 223, RULE_showGlobalInfoClause = 224, RULE_showSchemaEntity = 225, 
		RULE_showProfileType = 226, RULE_binlogStatement = 227, RULE_cacheIndexStatement = 228, 
		RULE_flushStatement = 229, RULE_killStatement = 230, RULE_loadIndexIntoCache = 231, 
		RULE_resetStatement = 232, RULE_shutdownStatement = 233, RULE_tableIndexes = 234, 
		RULE_flushOption = 235, RULE_flushTableOption = 236, RULE_loadedTableIndexes = 237, 
		RULE_simpleDescribeStatement = 238, RULE_fullDescribeStatement = 239, 
		RULE_helpStatement = 240, RULE_useStatement = 241, RULE_describeObjectClause = 242, 
		RULE_fullId = 243, RULE_tableName = 244, RULE_fullColumnName = 245, RULE_indexColumnName = 246, 
		RULE_userName = 247, RULE_mysqlVariable = 248, RULE_charsetName = 249, 
		RULE_collationName = 250, RULE_engineName = 251, RULE_uuidSet = 252, RULE_xid = 253, 
		RULE_xuidStringId = 254, RULE_authPlugin = 255, RULE_uid = 256, RULE_simpleId = 257, 
		RULE_dottedId = 258, RULE_decimalLiteral = 259, RULE_fileSizeLiteral = 260, 
		RULE_stringLiteral = 261, RULE_booleanLiteral = 262, RULE_hexadecimalLiteral = 263, 
		RULE_nullNotnull = 264, RULE_constant = 265, RULE_dataType = 266, RULE_collectionOptions = 267, 
		RULE_convertedDataType = 268, RULE_lengthOneDimension = 269, RULE_lengthTwoDimension = 270, 
		RULE_lengthTwoOptionalDimension = 271, RULE_uidList = 272, RULE_tables = 273, 
		RULE_indexColumnNames = 274, RULE_expressions = 275, RULE_expressionsWithDefaults = 276, 
		RULE_constants = 277, RULE_simpleStrings = 278, RULE_userVariables = 279, 
		RULE_defaultValue = 280, RULE_currentTimestamp = 281, RULE_expressionOrDefault = 282, 
		RULE_ifExists = 283, RULE_ifNotExists = 284, RULE_functionCall = 285, 
		RULE_specificFunction = 286, RULE_caseFuncAlternative = 287, RULE_levelsInWeightString = 288, 
		RULE_levelInWeightListElement = 289, RULE_aggregateWindowedFunction = 290, 
		RULE_scalarFunctionName = 291, RULE_passwordFunctionClause = 292, RULE_functionArgs = 293, 
		RULE_functionArg = 294, RULE_expression = 295, RULE_predicate = 296, RULE_expressionAtom = 297, 
		RULE_unaryOperator = 298, RULE_comparisonOperator = 299, RULE_logicalOperator = 300, 
		RULE_bitOperator = 301, RULE_mathOperator = 302, RULE_charsetNameBase = 303, 
		RULE_transactionLevelBase = 304, RULE_privilegesBase = 305, RULE_intervalTypeBase = 306, 
		RULE_dataTypeBase = 307, RULE_keywordsCanBeId = 308, RULE_functionNameBase = 309;
	public static final String[] ruleNames = {
		"root", "sqlStatements", "sqlStatement", "emptyStatement", "ddlStatement", 
		"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
		"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
		"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
		"createFunction", "createServer", "createTable", "createTablespaceInnodb", 
		"createTablespaceNdb", "createTrigger", "createView", "createDatabaseOption", 
		"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
		"intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
		"functionParameter", "routineOption", "serverOption", "createDefinitions", 
		"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
		"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
		"tableOption", "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", 
		"subpartitionFunctionDefinition", "partitionDefinition", "partitionDefinerAtom", 
		"partitionDefinerVector", "subpartitionDefinition", "partitionOption", 
		"alterDatabase", "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", 
		"alterProcedure", "alterServer", "alterTable", "alterTablespace", "alterView", 
		"alterSpecification", "dropDatabase", "dropEvent", "dropIndex", "dropLogfileGroup", 
		"dropProcedure", "dropFunction", "dropServer", "dropTable", "dropTablespace", 
		"dropTrigger", "dropView", "renameTable", "renameTableClause", "truncateTable", 
		"callStatement", "deleteStatement", "doStatement", "handlerStatement", 
		"insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", 
		"selectStatement", "updateStatement", "insertStatementValue", "updatedElement", 
		"assignmentField", "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
		"handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement", 
		"handlerCloseStatement", "singleUpdateStatement", "multipleUpdateStatement", 
		"orderByClause", "orderByExpression", "tableSources", "tableSource", "tableSourceItem", 
		"indexHint", "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
		"querySpecification", "querySpecificationNointo", "unionParenthesis", 
		"unionStatement", "selectSpec", "selectElements", "selectElement", "selectIntoExpression", 
		"selectFieldsInto", "selectLinesInto", "fromClause", "groupByItem", "limitClause", 
		"limitClauseAtom", "startTransaction", "beginWork", "commitWork", "rollbackWork", 
		"savepointStatement", "rollbackStatement", "releaseStatement", "lockTables", 
		"unlockTables", "setAutocommitStatement", "setTransactionStatement", "transactionMode", 
		"lockTableElement", "lockAction", "transactionOption", "transactionLevel", 
		"changeMaster", "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
		"resetSlave", "startSlave", "stopSlave", "startGroupReplication", "stopGroupReplication", 
		"masterOption", "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
		"channelOption", "replicationFilter", "tablePair", "threadType", "untilOption", 
		"connectionOption", "gtuidSet", "xaStartTransaction", "xaEndTransaction", 
		"xaPrepareStatement", "xaCommitWork", "xaRollbackWork", "xaRecoverWork", 
		"prepareStatement", "executeStatement", "deallocatePrepare", "routineBody", 
		"blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
		"leaveStatement", "loopStatement", "repeatStatement", "returnStatement", 
		"whileStatement", "cursorStatement", "declareVariable", "declareCondition", 
		"declareCursor", "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
		"caseAlternative", "elifAlternative", "alterUser", "createUser", "dropUser", 
		"grantStatement", "grantProxy", "renameUser", "revokeStatement", "revokeProxy", 
		"setPasswordStatement", "userSpecification", "userAuthOption", "tlsOption", 
		"userResourceOption", "userPasswordOption", "userLockOption", "privelegeClause", 
		"privilege", "privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", 
		"checksumTable", "optimizeTable", "repairTable", "checkTableOption", "createUdfunction", 
		"installPlugin", "uninstallPlugin", "setStatement", "showStatement", "variableClause", 
		"showCommonEntity", "showFilter", "showGlobalInfoClause", "showSchemaEntity", 
		"showProfileType", "binlogStatement", "cacheIndexStatement", "flushStatement", 
		"killStatement", "loadIndexIntoCache", "resetStatement", "shutdownStatement", 
		"tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes", 
		"simpleDescribeStatement", "fullDescribeStatement", "helpStatement", "useStatement", 
		"describeObjectClause", "fullId", "tableName", "fullColumnName", "indexColumnName", 
		"userName", "mysqlVariable", "charsetName", "collationName", "engineName", 
		"uuidSet", "xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", 
		"decimalLiteral", "fileSizeLiteral", "stringLiteral", "booleanLiteral", 
		"hexadecimalLiteral", "nullNotnull", "constant", "dataType", "collectionOptions", 
		"convertedDataType", "lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
		"uidList", "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
		"constants", "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
		"expressionOrDefault", "ifExists", "ifNotExists", "functionCall", "specificFunction", 
		"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
		"aggregateWindowedFunction", "scalarFunctionName", "passwordFunctionClause", 
		"functionArgs", "functionArg", "expression", "predicate", "expressionAtom", 
		"unaryOperator", "comparisonOperator", "logicalOperator", "bitOperator", 
		"mathOperator", "charsetNameBase", "transactionLevelBase", "privilegesBase", 
		"intervalTypeBase", "dataTypeBase", "keywordsCanBeId", "functionNameBase"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
		"'ANALYZE'", "'AND'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", 
		"'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", 
		"'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
		"'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", 
		"'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", 
		"'DESCRIBE'", "'DETERMINISTIC'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", 
		"'EACH'", "'ELSE'", "'ELSEIF'", "'ENCLOSED'", "'ESCAPED'", "'EXISTS'", 
		"'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
		"'FROM'", "'FULLTEXT'", "'GENERATED'", "'GRANT'", "'GROUP'", "'HAVING'", 
		"'HIGH_PRIORITY'", "'IF'", "'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", 
		"'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", 
		"'JOIN'", "'KEY'", "'KEYS'", "'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", 
		"'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", 
		"'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
		"'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", 
		"'NULL'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", "'ORDER'", 
		"'OUT'", "'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", 
		"'PURGE'", "'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", 
		"'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESTRICT'", 
		"'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", 
		"'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", 
		"'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
		"'SQL_SMALL_RESULT'", "'SSL'", "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", 
		"'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", 
		"'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
		"'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", 
		"'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
		"'MEDIUMINT'", "'INT'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", 
		"'PRECISION'", "'FLOAT'", "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", 
		"'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", 
		"'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'", 
		"'MEDIUMBLOB'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", 
		"'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", 
		"'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
		"'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
		"'DAY_MICROSECOND'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
		"'GROUP_CONCAT'", "'MAX'", "'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
		"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
		"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", 
		"'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", 
		"'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", 
		"'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
		"'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
		"'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
		"'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", 
		"'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
		"'CIPHER'", "'CLIENT'", "'CLOSE'", "'COALESCE'", "'CODE'", "'COLUMNS'", 
		"'COLUMN_FORMAT'", "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPLETION'", 
		"'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", "'CONNECTION'", "'CONSISTENT'", 
		"'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'DATA'", 
		"'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", 
		"'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'", 
		"'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", 
		"'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", 
		"'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", 
		"'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", 
		"'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", 
		"'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", 
		"'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HOST'", 
		"'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", 
		"'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", 
		"'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", 
		"'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", 
		"'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", 
		"'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", 
		"'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", 
		"'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", "'MASTER_SSL_CA'", 
		"'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", 
		"'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", "'MASTER_USER'", 
		"'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", 
		"'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", "'MEDIUM'", 
		"'MERGE'", "'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", 
		"'MYSQL'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", 
		"'NODEGROUP'", "'NONE'", "'OFFLINE'", "'OFFSET'", "'OJ'", "'OLD_PASSWORD'", 
		"'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'", 
		"'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", "'PARTIAL'", "'PARTITIONING'", 
		"'PARTITIONS'", "'PASSWORD'", "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", 
		"'PORT'", "'PRECEDES'", "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", 
		"'PROFILE'", "'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", 
		"'RECOVER'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", 
		"'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", "'REPAIR'", 
		"'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", 
		"'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
		"'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", "'RESUME'", 
		"'RETURNS'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", 
		"'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SERVER'", 
		"'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'", 
		"'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", 
		"'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", 
		"'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", 
		"'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
		"'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", "'STRING'", "'SUBJECT'", 
		"'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", 
		"'TABLESPACE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", 
		"'TRANSACTION'", "'TRIGGERS'", "'TRUNCATE'", "'UNDEFINED'", "'UNDOFILE'", 
		"'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", 
		"'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", 
		"'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'WAIT'", "'WARNINGS'", "'WITHOUT'", 
		"'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", 
		"'ISO'", "'INTERNAL'", "'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", 
		"'WEEK'", "'SECOND'", "'MICROSECOND'", "'TABLES'", "'ROUTINE'", "'EXECUTE'", 
		"'FILE'", "'PROCESS'", "'RELOAD'", "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", 
		"'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
		"'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
		"'EUCKR'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", 
		"'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", 
		"'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", 
		"'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", 
		"'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", 
		"'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", 
		"'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", 
		"'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", 
		"'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
		"'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", 
		"'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
		"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
		"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
		"'BUFFER'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
		"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
		"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
		"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
		"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
		"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
		"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
		"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'", 
		"'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
		"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
		"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
		"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
		"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
		"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
		"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
		"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
		"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", 
		"'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'", 
		"'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'", 
		"'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'", 
		"'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
		"'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", 
		"'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", 
		"'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
		"'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", 
		"'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'", 
		"'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
		"'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", 
		"'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
		"'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
		"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
		"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
		"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
		"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'", 
		"'SHA2'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", 
		"'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", 
		"'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", 
		"'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
		"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
		"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
		"'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
		"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
		"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
		"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
		"'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
		"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
		"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
		"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
		"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
		"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
		"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
		"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
		"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
		"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
		"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", 
		"'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", 
		"'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'--'", 
		"'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", 
		"'^'", "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", 
		"'''", "'\"'", "'`'", "':'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "AS", "ASC", "BEFORE", 
		"BETWEEN", "BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", 
		"CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", 
		"CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT_USER", "CURSOR", "DATABASE", 
		"DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", 
		"DETERMINISTIC", "DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", 
		"ENCLOSED", "ESCAPED", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", 
		"FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GENERATED", "GRANT", "GROUP", 
		"HAVING", "HIGH_PRIORITY", "IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", 
		"INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", 
		"KEYS", "KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", 
		"LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
		"MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
		"NULL_LITERAL", "ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", 
		"OUT", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", 
		"RANGE", "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", "RENAME", 
		"REPEAT", "REPLACE", "REQUIRE", "RESTRICT", "RETURN", "REVOKE", "RIGHT", 
		"RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", "SHOW", "SPATIAL", 
		"SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", 
		"SQL_SMALL_RESULT", "SSL", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
		"THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
		"UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
		"WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", 
		"MEDIUMINT", "INT", "INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", 
		"FLOAT", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", 
		"YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
		"TINYBLOB", "BLOB", "MEDIUMBLOB", "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", 
		"LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", 
		"DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", 
		"MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", "AVG", "BIT_AND", 
		"BIT_OR", "BIT_XOR", "COUNT", "GROUP_CONCAT", "MAX", "MIN", "STD", "STDDEV", 
		"STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", 
		"CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", 
		"CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", "NOW", 
		"POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", 
		"UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", 
		"ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", 
		"AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", 
		"BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", 
		"PAGE_CHECKSUM", "CIPHER", "CLIENT", "CLOSE", "COALESCE", "CODE", "COLUMNS", 
		"COLUMN_FORMAT", "COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", 
		"COMPRESSION", "CONCURRENT", "CONNECTION", "CONSISTENT", "CONTAINS", "CONTEXT", 
		"CONTRIBUTORS", "COPY", "CPU", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
		"DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", 
		"DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", 
		"ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", "ESCAPE", 
		"EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", "EXPIRE", 
		"EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", 
		"FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION", 
		"GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH", 
		"HELP", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", 
		"INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", 
		"INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", 
		"LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", 
		"LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
		"MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
		"MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", 
		"MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
		"MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
		"MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", 
		"MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", 
		"MERGE", "MID", "MIGRATE", "MIN_ROWS", "MODE", "MODIFY", "MUTEX", "MYSQL", 
		"NAME", "NAMES", "NCHAR", "NEVER", "NEXT", "NO", "NODEGROUP", "NONE", 
		"OFFLINE", "OFFSET", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", "OPEN", 
		"OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", 
		"PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", "PHASE", "PLUGIN", 
		"PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PREPARE", "PRESERVE", "PREV", 
		"PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", 
		"RECOVER", "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", 
		"RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", 
		"REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", 
		"REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", 
		"REPLICATION", "RESET", "RESUME", "RETURNS", "ROLLBACK", "ROLLUP", "ROTATE", 
		"ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", "SCHEDULE", "SECURITY", "SERVER", 
		"SESSION", "SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", 
		"SOCKET", "SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", 
		"SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", 
		"SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", 
		"STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", "STORED", "STRING", 
		"SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", 
		"TABLESPACE", "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", 
		"TRIGGERS", "TRUNCATE", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", 
		"UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", 
		"VALUE", "VARIABLES", "VIEW", "VIRTUAL", "WAIT", "WARNINGS", "WITHOUT", 
		"WORK", "WRAPPER", "X509", "XA", "XML", "EUR", "USA", "JIS", "ISO", "INTERNAL", 
		"QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", 
		"TABLES", "ROUTINE", "EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", 
		"SUPER", "PRIVILEGES", "ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", 
		"CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", 
		"EUCKR", "GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", 
		"KOI8R", "KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", 
		"SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", 
		"UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", 
		"INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", 
		"TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
		"GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
		"MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
		"AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", 
		"ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
		"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
		"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CEIL", "CEILING", "CENTROID", 
		"CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
		"COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
		"COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
		"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
		"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
		"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
		"ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING", 
		"EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
		"FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
		"GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
		"GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", 
		"GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", 
		"HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", 
		"INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", 
		"ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
		"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
		"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
		"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
		"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
		"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
		"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
		"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
		"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", 
		"MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", 
		"NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
		"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
		"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
		"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
		"RPAD", "RTRIM", "SEC_TO_TIME", "SESSION_USER", "SHA", "SHA1", "SHA2", 
		"SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", 
		"SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY", 
		"ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
		"ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", 
		"ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", 
		"ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
		"ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", 
		"ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
		"ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
		"ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
		"ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
		"ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
		"ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", 
		"ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
		"ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", 
		"SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", 
		"TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
		"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
		"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
		"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
		"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
		"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
		"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", 
		"MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
		"LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", 
		"BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", 
		"ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
		"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
		"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
		"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
		"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
		"LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "OpenDistroSqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public OpenDistroSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class RootContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(OpenDistroSqlParser.EOF, 0); }
		public SqlStatementsContext sqlStatements() {
			return getRuleContext(SqlStatementsContext.class,0);
		}
		public TerminalNode MINUSMINUS() { return getToken(OpenDistroSqlParser.MINUSMINUS, 0); }
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRoot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRoot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << ANALYZE) | (1L << CHANGE) | (1L << CHECK) | (1L << CREATE) | (1L << DELETE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DROP) | (1L << EXPLAIN) | (1L << GRANT))) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (KILL - 81)) | (1L << (LOAD - 81)) | (1L << (LOCK - 81)) | (1L << (OPTIMIZE - 81)) | (1L << (PURGE - 81)) | (1L << (RELEASE - 81)) | (1L << (RENAME - 81)) | (1L << (REVOKE - 81)) | (1L << (SELECT - 81)) | (1L << (SET - 81)) | (1L << (SHOW - 81)))) != 0) || _la==UNLOCK || _la==USE || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (BEGIN - 264)) | (1L << (BINLOG - 264)) | (1L << (CACHE - 264)) | (1L << (CHECKSUM - 264)) | (1L << (COMMIT - 264)) | (1L << (DEALLOCATE - 264)))) != 0) || ((((_la - 340)) & ~0x3f) == 0 && ((1L << (_la - 340)) & ((1L << (FLUSH - 340)) | (1L << (HELP - 340)) | (1L << (INSTALL - 340)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (PREPARE - 448)) | (1L << (REPAIR - 448)) | (1L << (RESET - 448)) | (1L << (ROLLBACK - 448)) | (1L << (SAVEPOINT - 448)) | (1L << (START - 448)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (STOP - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (XA - 515)) | (1L << (EXECUTE - 515)) | (1L << (SHUTDOWN - 515)))) != 0) || _la==LR_BRACKET || _la==SEMI) {
				{
				setState(620);
				sqlStatements();
				}
			}

			setState(624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUSMINUS) {
				{
				setState(623);
				match(MINUSMINUS);
				}
			}

			setState(626);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementsContext extends ParserRuleContext {
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public List<EmptyStatementContext> emptyStatement() {
			return getRuleContexts(EmptyStatementContext.class);
		}
		public EmptyStatementContext emptyStatement(int i) {
			return getRuleContext(EmptyStatementContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(OpenDistroSqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(OpenDistroSqlParser.SEMI, i);
		}
		public List<TerminalNode> MINUSMINUS() { return getTokens(OpenDistroSqlParser.MINUSMINUS); }
		public TerminalNode MINUSMINUS(int i) {
			return getToken(OpenDistroSqlParser.MINUSMINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSqlStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSqlStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSqlStatements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementsContext sqlStatements() throws RecognitionException {
		SqlStatementsContext _localctx = new SqlStatementsContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(638);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(636);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALTER:
					case ANALYZE:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case GRANT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case UNLOCK:
					case USE:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case FLUSH:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						setState(628);
						sqlStatement();
						setState(630);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==MINUSMINUS) {
							{
							setState(629);
							match(MINUSMINUS);
							}
						}

						setState(633);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
						case 1:
							{
							setState(632);
							match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						setState(635);
						emptyStatement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(640);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			setState(649);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GRANT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case UNLOCK:
			case USE:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case FLUSH:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				setState(641);
				sqlStatement();
				setState(646);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(643);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MINUSMINUS) {
						{
						setState(642);
						match(MINUSMINUS);
						}
					}

					setState(645);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				setState(648);
				emptyStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public DdlStatementContext ddlStatement() {
			return getRuleContext(DdlStatementContext.class,0);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public AdministrationStatementContext administrationStatement() {
			return getRuleContext(AdministrationStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sqlStatement);
		try {
			setState(658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(651);
				ddlStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(652);
				dmlStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(653);
				transactionStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(654);
				replicationStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(655);
				preparedStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(656);
				administrationStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(657);
				utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(OpenDistroSqlParser.SEMI, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterEmptyStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitEmptyStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitEmptyStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EmptyStatementContext emptyStatement() throws RecognitionException {
		EmptyStatementContext _localctx = new EmptyStatementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_emptyStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(660);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DdlStatementContext extends ParserRuleContext {
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateEventContext createEvent() {
			return getRuleContext(CreateEventContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return getRuleContext(CreateLogfileGroupContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return getRuleContext(CreateTablespaceInnodbContext.class,0);
		}
		public CreateTablespaceNdbContext createTablespaceNdb() {
			return getRuleContext(CreateTablespaceNdbContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public AlterEventContext alterEvent() {
			return getRuleContext(AlterEventContext.class,0);
		}
		public AlterFunctionContext alterFunction() {
			return getRuleContext(AlterFunctionContext.class,0);
		}
		public AlterInstanceContext alterInstance() {
			return getRuleContext(AlterInstanceContext.class,0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return getRuleContext(AlterLogfileGroupContext.class,0);
		}
		public AlterProcedureContext alterProcedure() {
			return getRuleContext(AlterProcedureContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropEventContext dropEvent() {
			return getRuleContext(DropEventContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return getRuleContext(DropLogfileGroupContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public DropTablespaceContext dropTablespace() {
			return getRuleContext(DropTablespaceContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public RenameTableContext renameTable() {
			return getRuleContext(RenameTableContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDdlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDdlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDdlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DdlStatementContext ddlStatement() throws RecognitionException {
		DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_ddlStatement);
		try {
			setState(697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(662);
				createDatabase();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(663);
				createEvent();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(664);
				createIndex();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(665);
				createLogfileGroup();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(666);
				createProcedure();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(667);
				createFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(668);
				createServer();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(669);
				createTable();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(670);
				createTablespaceInnodb();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(671);
				createTablespaceNdb();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(672);
				createTrigger();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(673);
				createView();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(674);
				alterDatabase();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(675);
				alterEvent();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(676);
				alterFunction();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(677);
				alterInstance();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(678);
				alterLogfileGroup();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(679);
				alterProcedure();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(680);
				alterServer();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(681);
				alterTable();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(682);
				alterTablespace();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(683);
				alterView();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(684);
				dropDatabase();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(685);
				dropEvent();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(686);
				dropIndex();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(687);
				dropLogfileGroup();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(688);
				dropProcedure();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(689);
				dropFunction();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(690);
				dropServer();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(691);
				dropTable();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(692);
				dropTablespace();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(693);
				dropTrigger();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(694);
				dropView();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(695);
				renameTable();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(696);
				truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DmlStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DmlStatementContext dmlStatement() throws RecognitionException {
		DmlStatementContext _localctx = new DmlStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_dmlStatement);
		try {
			setState(701);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(699);
				selectStatement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 2);
				{
				setState(700);
				deleteStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStatementContext extends ParserRuleContext {
		public StartTransactionContext startTransaction() {
			return getRuleContext(StartTransactionContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public CommitWorkContext commitWork() {
			return getRuleContext(CommitWorkContext.class,0);
		}
		public RollbackWorkContext rollbackWork() {
			return getRuleContext(RollbackWorkContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public RollbackStatementContext rollbackStatement() {
			return getRuleContext(RollbackStatementContext.class,0);
		}
		public ReleaseStatementContext releaseStatement() {
			return getRuleContext(ReleaseStatementContext.class,0);
		}
		public LockTablesContext lockTables() {
			return getRuleContext(LockTablesContext.class,0);
		}
		public UnlockTablesContext unlockTables() {
			return getRuleContext(UnlockTablesContext.class,0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_transactionStatement);
		try {
			setState(712);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(703);
				startTransaction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(704);
				beginWork();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(705);
				commitWork();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(706);
				rollbackWork();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(707);
				savepointStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(708);
				rollbackStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(709);
				releaseStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(710);
				lockTables();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(711);
				unlockTables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationStatementContext extends ParserRuleContext {
		public ChangeMasterContext changeMaster() {
			return getRuleContext(ChangeMasterContext.class,0);
		}
		public ChangeReplicationFilterContext changeReplicationFilter() {
			return getRuleContext(ChangeReplicationFilterContext.class,0);
		}
		public PurgeBinaryLogsContext purgeBinaryLogs() {
			return getRuleContext(PurgeBinaryLogsContext.class,0);
		}
		public ResetMasterContext resetMaster() {
			return getRuleContext(ResetMasterContext.class,0);
		}
		public ResetSlaveContext resetSlave() {
			return getRuleContext(ResetSlaveContext.class,0);
		}
		public StartSlaveContext startSlave() {
			return getRuleContext(StartSlaveContext.class,0);
		}
		public StopSlaveContext stopSlave() {
			return getRuleContext(StopSlaveContext.class,0);
		}
		public StartGroupReplicationContext startGroupReplication() {
			return getRuleContext(StartGroupReplicationContext.class,0);
		}
		public StopGroupReplicationContext stopGroupReplication() {
			return getRuleContext(StopGroupReplicationContext.class,0);
		}
		public XaStartTransactionContext xaStartTransaction() {
			return getRuleContext(XaStartTransactionContext.class,0);
		}
		public XaEndTransactionContext xaEndTransaction() {
			return getRuleContext(XaEndTransactionContext.class,0);
		}
		public XaPrepareStatementContext xaPrepareStatement() {
			return getRuleContext(XaPrepareStatementContext.class,0);
		}
		public XaCommitWorkContext xaCommitWork() {
			return getRuleContext(XaCommitWorkContext.class,0);
		}
		public XaRollbackWorkContext xaRollbackWork() {
			return getRuleContext(XaRollbackWorkContext.class,0);
		}
		public XaRecoverWorkContext xaRecoverWork() {
			return getRuleContext(XaRecoverWorkContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterReplicationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitReplicationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitReplicationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_replicationStatement);
		try {
			setState(729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(714);
				changeMaster();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(715);
				changeReplicationFilter();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(716);
				purgeBinaryLogs();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(717);
				resetMaster();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(718);
				resetSlave();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(719);
				startSlave();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(720);
				stopSlave();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(721);
				startGroupReplication();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(722);
				stopGroupReplication();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(723);
				xaStartTransaction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(724);
				xaEndTransaction();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(725);
				xaPrepareStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(726);
				xaCommitWork();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(727);
				xaRollbackWork();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(728);
				xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparedStatementContext extends ParserRuleContext {
		public PrepareStatementContext prepareStatement() {
			return getRuleContext(PrepareStatementContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public DeallocatePrepareContext deallocatePrepare() {
			return getRuleContext(DeallocatePrepareContext.class,0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPreparedStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPreparedStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPreparedStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_preparedStatement);
		try {
			setState(734);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE:
				enterOuterAlt(_localctx, 1);
				{
				setState(731);
				prepareStatement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(732);
				executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(733);
				deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public LoopStatementContext loopStatement() {
			return getRuleContext(LoopStatementContext.class,0);
		}
		public RepeatStatementContext repeatStatement() {
			return getRuleContext(RepeatStatementContext.class,0);
		}
		public WhileStatementContext whileStatement() {
			return getRuleContext(WhileStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public CursorStatementContext cursorStatement() {
			return getRuleContext(CursorStatementContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCompoundStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCompoundStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCompoundStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_compoundStatement);
		try {
			setState(746);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(736);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(737);
				caseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(738);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(739);
				leaveStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(740);
				loopStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(741);
				repeatStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(742);
				whileStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(743);
				iterateStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(744);
				returnStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(745);
				cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdministrationStatementContext extends ParserRuleContext {
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public GrantStatementContext grantStatement() {
			return getRuleContext(GrantStatementContext.class,0);
		}
		public GrantProxyContext grantProxy() {
			return getRuleContext(GrantProxyContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public RevokeStatementContext revokeStatement() {
			return getRuleContext(RevokeStatementContext.class,0);
		}
		public RevokeProxyContext revokeProxy() {
			return getRuleContext(RevokeProxyContext.class,0);
		}
		public AnalyzeTableContext analyzeTable() {
			return getRuleContext(AnalyzeTableContext.class,0);
		}
		public CheckTableContext checkTable() {
			return getRuleContext(CheckTableContext.class,0);
		}
		public ChecksumTableContext checksumTable() {
			return getRuleContext(ChecksumTableContext.class,0);
		}
		public OptimizeTableContext optimizeTable() {
			return getRuleContext(OptimizeTableContext.class,0);
		}
		public RepairTableContext repairTable() {
			return getRuleContext(RepairTableContext.class,0);
		}
		public CreateUdfunctionContext createUdfunction() {
			return getRuleContext(CreateUdfunctionContext.class,0);
		}
		public InstallPluginContext installPlugin() {
			return getRuleContext(InstallPluginContext.class,0);
		}
		public UninstallPluginContext uninstallPlugin() {
			return getRuleContext(UninstallPluginContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public BinlogStatementContext binlogStatement() {
			return getRuleContext(BinlogStatementContext.class,0);
		}
		public CacheIndexStatementContext cacheIndexStatement() {
			return getRuleContext(CacheIndexStatementContext.class,0);
		}
		public FlushStatementContext flushStatement() {
			return getRuleContext(FlushStatementContext.class,0);
		}
		public KillStatementContext killStatement() {
			return getRuleContext(KillStatementContext.class,0);
		}
		public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return getRuleContext(LoadIndexIntoCacheContext.class,0);
		}
		public ResetStatementContext resetStatement() {
			return getRuleContext(ResetStatementContext.class,0);
		}
		public ShutdownStatementContext shutdownStatement() {
			return getRuleContext(ShutdownStatementContext.class,0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_administrationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAdministrationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAdministrationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAdministrationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdministrationStatementContext administrationStatement() throws RecognitionException {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_administrationStatement);
		try {
			setState(773);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(748);
				alterUser();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(749);
				createUser();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(750);
				dropUser();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(751);
				grantStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(752);
				grantProxy();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(753);
				renameUser();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(754);
				revokeStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(755);
				revokeProxy();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(756);
				analyzeTable();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(757);
				checkTable();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(758);
				checksumTable();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(759);
				optimizeTable();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(760);
				repairTable();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(761);
				createUdfunction();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(762);
				installPlugin();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(763);
				uninstallPlugin();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(764);
				setStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(765);
				showStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(766);
				binlogStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(767);
				cacheIndexStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(768);
				flushStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(769);
				killStatement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(770);
				loadIndexIntoCache();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(771);
				resetStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(772);
				shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilityStatementContext extends ParserRuleContext {
		public SimpleDescribeStatementContext simpleDescribeStatement() {
			return getRuleContext(SimpleDescribeStatementContext.class,0);
		}
		public FullDescribeStatementContext fullDescribeStatement() {
			return getRuleContext(FullDescribeStatementContext.class,0);
		}
		public HelpStatementContext helpStatement() {
			return getRuleContext(HelpStatementContext.class,0);
		}
		public UseStatementContext useStatement() {
			return getRuleContext(UseStatementContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUtilityStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUtilityStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUtilityStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_utilityStatement);
		try {
			setState(779);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(775);
				simpleDescribeStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(776);
				fullDescribeStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(777);
				helpStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(778);
				useStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(OpenDistroSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(OpenDistroSqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCreateDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(781);
			match(CREATE);
			setState(782);
			((CreateDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((CreateDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(784);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(783);
				ifNotExists();
				}
			}

			setState(786);
			uid();
			setState(790);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHARSET) {
				{
				{
				setState(787);
				createDatabaseOption();
				}
				}
				setState(792);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(OpenDistroSqlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(OpenDistroSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(OpenDistroSqlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(OpenDistroSqlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(OpenDistroSqlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(OpenDistroSqlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(OpenDistroSqlParser.PRESERVE, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(OpenDistroSqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(OpenDistroSqlParser.NOT, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCreateEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCreateEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCreateEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventContext createEvent() throws RecognitionException {
		CreateEventContext _localctx = new CreateEventContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_createEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(793);
			match(CREATE);
			setState(795);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(794);
				ownerStatement();
				}
			}

			setState(797);
			match(EVENT);
			setState(799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(798);
				ifNotExists();
				}
			}

			setState(801);
			fullId();
			setState(802);
			match(ON);
			setState(803);
			match(SCHEDULE);
			setState(804);
			scheduleExpression();
			setState(811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(805);
				match(ON);
				setState(806);
				match(COMPLETION);
				setState(808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(807);
					match(NOT);
					}
				}

				setState(810);
				match(PRESERVE);
				}
			}

			setState(814);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(813);
				enableType();
				}
			}

			setState(818);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(816);
				match(COMMENT);
				setState(817);
				match(STRING_LITERAL);
				}
			}

			setState(820);
			match(DO);
			setState(821);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token indexCategory;
		public Token algType;
		public Token lockType;
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(OpenDistroSqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(OpenDistroSqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(OpenDistroSqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(OpenDistroSqlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(OpenDistroSqlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(OpenDistroSqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(OpenDistroSqlParser.OFFLINE, 0); }
		public TerminalNode UNIQUE() { return getToken(OpenDistroSqlParser.UNIQUE, 0); }
		public TerminalNode FULLTEXT() { return getToken(OpenDistroSqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(OpenDistroSqlParser.SPATIAL, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(OpenDistroSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(OpenDistroSqlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(OpenDistroSqlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(OpenDistroSqlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(OpenDistroSqlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(OpenDistroSqlParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(OpenDistroSqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(OpenDistroSqlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(OpenDistroSqlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(OpenDistroSqlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(OpenDistroSqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(OpenDistroSqlParser.EXCLUSIVE, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_createIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(823);
			match(CREATE);
			setState(825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(824);
				((CreateIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((CreateIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(828);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				setState(827);
				((CreateIndexContext)_localctx).indexCategory = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					((CreateIndexContext)_localctx).indexCategory = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(830);
			match(INDEX);
			setState(831);
			uid();
			setState(833);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(832);
				indexType();
				}
			}

			setState(835);
			match(ON);
			setState(836);
			tableName();
			setState(837);
			indexColumnNames();
			setState(841);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
				{
				{
				setState(838);
				indexOption();
				}
				}
				setState(843);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(856);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(854);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(844);
						match(ALGORITHM);
						setState(846);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(845);
							match(EQUAL_SYMBOL);
							}
						}

						setState(848);
						((CreateIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((CreateIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(849);
						match(LOCK);
						setState(851);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(850);
							match(EQUAL_SYMBOL);
							}
						}

						setState(853);
						((CreateIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((CreateIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(858);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLogfileGroupContext extends ParserRuleContext {
		public Token undoFile;
		public FileSizeLiteralContext initSize;
		public FileSizeLiteralContext undoSize;
		public FileSizeLiteralContext redoSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode LOGFILE() { return getToken(OpenDistroSqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(OpenDistroSqlParser.GROUP, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(OpenDistroSqlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(OpenDistroSqlParser.UNDOFILE, 0); }
		public TerminalNode ENGINE() { return getToken(OpenDistroSqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(OpenDistroSqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(OpenDistroSqlParser.STRING_LITERAL, i);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(OpenDistroSqlParser.INITIAL_SIZE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(OpenDistroSqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(OpenDistroSqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(OpenDistroSqlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(OpenDistroSqlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(OpenDistroSqlParser.COMMENT, 0); }
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCreateLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCreateLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCreateLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_createLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(859);
			match(CREATE);
			setState(860);
			match(LOGFILE);
			setState(861);
			match(GROUP);
			setState(862);
			uid();
			setState(863);
			match(ADD);
			setState(864);
			match(UNDOFILE);
			setState(865);
			((CreateLogfileGroupContext)_localctx).undoFile = match(STRING_LITERAL);
			setState(871);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(866);
				match(INITIAL_SIZE);
				setState(868);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(867);
					match(EQUAL_SYMBOL);
					}
				}

				setState(870);
				((CreateLogfileGroupContext)_localctx).initSize = fileSizeLiteral();
				}
			}

			setState(878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				setState(873);
				match(UNDO_BUFFER_SIZE);
				setState(875);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(874);
					match(EQUAL_SYMBOL);
					}
				}

				setState(877);
				((CreateLogfileGroupContext)_localctx).undoSize = fileSizeLiteral();
				}
			}

			setState(885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				setState(880);
				match(REDO_BUFFER_SIZE);
				setState(882);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(881);
					match(EQUAL_SYMBOL);
					}
				}

				setState(884);
				((CreateLogfileGroupContext)_localctx).redoSize = fileSizeLiteral();
				}
			}

			setState(892);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(887);
				match(NODEGROUP);
				setState(889);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(888);
					match(EQUAL_SYMBOL);
					}
				}

				setState(891);
				uid();
				}
			}

			setState(895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(894);
				match(WAIT);
				}
			}

			setState(902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(897);
				match(COMMENT);
				setState(899);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(898);
					match(EQUAL_SYMBOL);
					}
				}

				setState(901);
				((CreateLogfileGroupContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(904);
			match(ENGINE);
			setState(906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(905);
				match(EQUAL_SYMBOL);
				}
			}

			setState(908);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(OpenDistroSqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<ProcedureParameterContext> procedureParameter() {
			return getRuleContexts(ProcedureParameterContext.class);
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return getRuleContext(ProcedureParameterContext.class,i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCreateProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(910);
			match(CREATE);
			setState(912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(911);
				ownerStatement();
				}
			}

			setState(914);
			match(PROCEDURE);
			setState(915);
			fullId();
			setState(916);
			match(LR_BRACKET);
			setState(918);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATABASE || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (IN - 68)) | (1L << (INOUT - 68)) | (1L << (LEFT - 68)) | (1L << (OUT - 68)) | (1L << (RIGHT - 68)))) != 0) || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
				{
				setState(917);
				procedureParameter();
				}
			}

			setState(924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(920);
				match(COMMA);
				setState(921);
				procedureParameter();
				}
				}
				setState(926);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(927);
			match(RR_BRACKET);
			setState(931);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(928);
					routineOption();
					}
					} 
				}
				setState(933);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			}
			setState(934);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(OpenDistroSqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(OpenDistroSqlParser.RETURNS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCreateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_createFunction);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(936);
			match(CREATE);
			setState(938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(937);
				ownerStatement();
				}
			}

			setState(940);
			match(FUNCTION);
			setState(941);
			fullId();
			setState(942);
			match(LR_BRACKET);
			setState(944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
				{
				setState(943);
				functionParameter();
				}
			}

			setState(950);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(946);
				match(COMMA);
				setState(947);
				functionParameter();
				}
				}
				setState(952);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(953);
			match(RR_BRACKET);
			setState(954);
			match(RETURNS);
			setState(955);
			dataType();
			setState(959);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,53,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(956);
					routineOption();
					}
					} 
				}
				setState(961);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,53,_ctx);
			}
			setState(962);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public Token wrapperName;
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(OpenDistroSqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(OpenDistroSqlParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(OpenDistroSqlParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(OpenDistroSqlParser.WRAPPER, 0); }
		public TerminalNode OPTIONS() { return getToken(OpenDistroSqlParser.OPTIONS, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode MYSQL() { return getToken(OpenDistroSqlParser.MYSQL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCreateServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCreateServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCreateServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_createServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(964);
			match(CREATE);
			setState(965);
			match(SERVER);
			setState(966);
			uid();
			setState(967);
			match(FOREIGN);
			setState(968);
			match(DATA);
			setState(969);
			match(WRAPPER);
			setState(970);
			((CreateServerContext)_localctx).wrapperName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
				((CreateServerContext)_localctx).wrapperName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(971);
			match(OPTIONS);
			setState(972);
			match(LR_BRACKET);
			setState(973);
			serverOption();
			setState(978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(974);
				match(COMMA);
				setState(975);
				serverOption();
				}
				}
				setState(980);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(981);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
	 
		public CreateTableContext() { }
		public void copyFrom(CreateTableContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CopyCreateTableContext extends CreateTableContext {
		public TableNameContext parenthesisTable;
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(OpenDistroSqlParser.LIKE, 0); }
		public TerminalNode TEMPORARY() { return getToken(OpenDistroSqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CopyCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCopyCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCopyCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCopyCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ColumnCreateTableContext extends CreateTableContext {
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(OpenDistroSqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public ColumnCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterColumnCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitColumnCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitColumnCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class QueryCreateTableContext extends CreateTableContext {
		public Token keyViolate;
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(OpenDistroSqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode AS() { return getToken(OpenDistroSqlParser.AS, 0); }
		public TerminalNode IGNORE() { return getToken(OpenDistroSqlParser.IGNORE, 0); }
		public TerminalNode REPLACE() { return getToken(OpenDistroSqlParser.REPLACE, 0); }
		public QueryCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterQueryCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitQueryCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitQueryCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_createTable);
		int _la;
		try {
			int _alt;
			setState(1061);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(983);
				match(CREATE);
				setState(985);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(984);
					match(TEMPORARY);
					}
				}

				setState(987);
				match(TABLE);
				setState(989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(988);
					ifNotExists();
					}
				}

				setState(991);
				tableName();
				setState(999);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(992);
					match(LIKE);
					setState(993);
					tableName();
					}
					break;
				case LR_BRACKET:
					{
					setState(994);
					match(LR_BRACKET);
					setState(995);
					match(LIKE);
					setState(996);
					((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					setState(997);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1001);
				match(CREATE);
				setState(1003);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1002);
					match(TEMPORARY);
					}
				}

				setState(1005);
				match(TABLE);
				setState(1007);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1006);
					ifNotExists();
					}
				}

				setState(1009);
				tableName();
				setState(1011);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
				case 1:
					{
					setState(1010);
					createDefinitions();
					}
					break;
				}
				setState(1023);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & ((1L << (CHARACTER - 22)) | (1L << (COLLATE - 22)) | (1L << (DEFAULT - 22)) | (1L << (INDEX - 22)))) != 0) || _la==UNION || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & ((1L << (AUTO_INCREMENT - 262)) | (1L << (AVG_ROW_LENGTH - 262)) | (1L << (CHECKSUM - 262)) | (1L << (PAGE_CHECKSUM - 262)) | (1L << (COMMENT - 262)) | (1L << (COMPRESSION - 262)) | (1L << (CONNECTION - 262)) | (1L << (DATA - 262)) | (1L << (DELAY_KEY_WRITE - 262)) | (1L << (ENCRYPTION - 262)) | (1L << (ENGINE - 262)))) != 0) || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & ((1L << (INSERT_METHOD - 360)) | (1L << (KEY_BLOCK_SIZE - 360)) | (1L << (MAX_ROWS - 360)) | (1L << (MIN_ROWS - 360)))) != 0) || ((((_la - 435)) & ~0x3f) == 0 && ((1L << (_la - 435)) & ((1L << (PACK_KEYS - 435)) | (1L << (PASSWORD - 435)) | (1L << (ROW_FORMAT - 435)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (STATS_AUTO_RECALC - 511)) | (1L << (STATS_PERSISTENT - 511)) | (1L << (STATS_SAMPLE_PAGES - 511)) | (1L << (STORAGE - 511)) | (1L << (TABLESPACE - 511)))) != 0) || _la==CHARSET) {
					{
					setState(1013);
					tableOption();
					setState(1020);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & ((1L << (CHARACTER - 22)) | (1L << (COLLATE - 22)) | (1L << (DEFAULT - 22)) | (1L << (INDEX - 22)))) != 0) || _la==UNION || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & ((1L << (AUTO_INCREMENT - 262)) | (1L << (AVG_ROW_LENGTH - 262)) | (1L << (CHECKSUM - 262)) | (1L << (PAGE_CHECKSUM - 262)) | (1L << (COMMENT - 262)) | (1L << (COMPRESSION - 262)) | (1L << (CONNECTION - 262)) | (1L << (DATA - 262)) | (1L << (DELAY_KEY_WRITE - 262)) | (1L << (ENCRYPTION - 262)) | (1L << (ENGINE - 262)))) != 0) || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & ((1L << (INSERT_METHOD - 360)) | (1L << (KEY_BLOCK_SIZE - 360)) | (1L << (MAX_ROWS - 360)) | (1L << (MIN_ROWS - 360)))) != 0) || ((((_la - 435)) & ~0x3f) == 0 && ((1L << (_la - 435)) & ((1L << (PACK_KEYS - 435)) | (1L << (PASSWORD - 435)) | (1L << (ROW_FORMAT - 435)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (STATS_AUTO_RECALC - 511)) | (1L << (STATS_PERSISTENT - 511)) | (1L << (STATS_SAMPLE_PAGES - 511)) | (1L << (STORAGE - 511)) | (1L << (TABLESPACE - 511)))) != 0) || _la==CHARSET || _la==COMMA) {
						{
						{
						setState(1015);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1014);
							match(COMMA);
							}
						}

						setState(1017);
						tableOption();
						}
						}
						setState(1022);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1026);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1025);
					partitionDefinitions();
					}
				}

				setState(1029);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					setState(1028);
					((QueryCreateTableContext)_localctx).keyViolate = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1031);
					match(AS);
					}
				}

				setState(1034);
				selectStatement();
				}
				break;
			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1036);
				match(CREATE);
				setState(1038);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1037);
					match(TEMPORARY);
					}
				}

				setState(1040);
				match(TABLE);
				setState(1042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1041);
					ifNotExists();
					}
				}

				setState(1044);
				tableName();
				setState(1045);
				createDefinitions();
				setState(1056);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
				case 1:
					{
					setState(1046);
					tableOption();
					setState(1053);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1048);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1047);
								match(COMMA);
								}
							}

							setState(1050);
							tableOption();
							}
							} 
						}
						setState(1055);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
					}
					}
					break;
				}
				setState(1059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1058);
					partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceInnodbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext fileBlockSize;
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(OpenDistroSqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(OpenDistroSqlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(OpenDistroSqlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(OpenDistroSqlParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode ENGINE() { return getToken(OpenDistroSqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceInnodb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCreateTablespaceInnodb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCreateTablespaceInnodb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCreateTablespaceInnodb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceInnodbContext createTablespaceInnodb() throws RecognitionException {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_createTablespaceInnodb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1063);
			match(CREATE);
			setState(1064);
			match(TABLESPACE);
			setState(1065);
			uid();
			setState(1066);
			match(ADD);
			setState(1067);
			match(DATAFILE);
			setState(1068);
			((CreateTablespaceInnodbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				setState(1069);
				match(FILE_BLOCK_SIZE);
				setState(1070);
				match(EQUAL_SYMBOL);
				setState(1071);
				((CreateTablespaceInnodbContext)_localctx).fileBlockSize = fileSizeLiteral();
				}
			}

			setState(1079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(1074);
				match(ENGINE);
				setState(1076);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1075);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1078);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceNdbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext extentSize;
		public FileSizeLiteralContext initialSize;
		public FileSizeLiteralContext autoextendSize;
		public FileSizeLiteralContext maxSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(OpenDistroSqlParser.TABLESPACE, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(OpenDistroSqlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(OpenDistroSqlParser.DATAFILE, 0); }
		public TerminalNode USE() { return getToken(OpenDistroSqlParser.USE, 0); }
		public TerminalNode LOGFILE() { return getToken(OpenDistroSqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(OpenDistroSqlParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(OpenDistroSqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(OpenDistroSqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(OpenDistroSqlParser.STRING_LITERAL, i);
		}
		public TerminalNode EXTENT_SIZE() { return getToken(OpenDistroSqlParser.EXTENT_SIZE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(OpenDistroSqlParser.INITIAL_SIZE, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(OpenDistroSqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(OpenDistroSqlParser.MAX_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(OpenDistroSqlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(OpenDistroSqlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(OpenDistroSqlParser.COMMENT, 0); }
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceNdb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCreateTablespaceNdb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCreateTablespaceNdb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCreateTablespaceNdb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceNdbContext createTablespaceNdb() throws RecognitionException {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createTablespaceNdb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1081);
			match(CREATE);
			setState(1082);
			match(TABLESPACE);
			setState(1083);
			uid();
			setState(1084);
			match(ADD);
			setState(1085);
			match(DATAFILE);
			setState(1086);
			((CreateTablespaceNdbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1087);
			match(USE);
			setState(1088);
			match(LOGFILE);
			setState(1089);
			match(GROUP);
			setState(1090);
			uid();
			setState(1096);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				setState(1091);
				match(EXTENT_SIZE);
				setState(1093);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1092);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1095);
				((CreateTablespaceNdbContext)_localctx).extentSize = fileSizeLiteral();
				}
			}

			setState(1103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(1098);
				match(INITIAL_SIZE);
				setState(1100);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1099);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1102);
				((CreateTablespaceNdbContext)_localctx).initialSize = fileSizeLiteral();
				}
			}

			setState(1110);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				setState(1105);
				match(AUTOEXTEND_SIZE);
				setState(1107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1106);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1109);
				((CreateTablespaceNdbContext)_localctx).autoextendSize = fileSizeLiteral();
				}
			}

			setState(1117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_SIZE) {
				{
				setState(1112);
				match(MAX_SIZE);
				setState(1114);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1113);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1116);
				((CreateTablespaceNdbContext)_localctx).maxSize = fileSizeLiteral();
				}
			}

			setState(1124);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(1119);
				match(NODEGROUP);
				setState(1121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1120);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1123);
				uid();
				}
			}

			setState(1127);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(1126);
				match(WAIT);
				}
			}

			setState(1134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1129);
				match(COMMENT);
				setState(1131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1130);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1133);
				((CreateTablespaceNdbContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(1136);
			match(ENGINE);
			setState(1138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(1137);
				match(EQUAL_SYMBOL);
				}
			}

			setState(1140);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public FullIdContext thisTrigger;
		public Token triggerTime;
		public Token triggerEvent;
		public Token triggerPlace;
		public FullIdContext otherTrigger;
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(OpenDistroSqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(OpenDistroSqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(OpenDistroSqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(OpenDistroSqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(OpenDistroSqlParser.ROW, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(OpenDistroSqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(OpenDistroSqlParser.AFTER, 0); }
		public TerminalNode INSERT() { return getToken(OpenDistroSqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(OpenDistroSqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(OpenDistroSqlParser.DELETE, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode FOLLOWS() { return getToken(OpenDistroSqlParser.FOLLOWS, 0); }
		public TerminalNode PRECEDES() { return getToken(OpenDistroSqlParser.PRECEDES, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCreateTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCreateTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1142);
			match(CREATE);
			setState(1144);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1143);
				ownerStatement();
				}
			}

			setState(1146);
			match(TRIGGER);
			setState(1147);
			((CreateTriggerContext)_localctx).thisTrigger = fullId();
			setState(1148);
			((CreateTriggerContext)_localctx).triggerTime = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				((CreateTriggerContext)_localctx).triggerTime = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1149);
			((CreateTriggerContext)_localctx).triggerEvent = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				((CreateTriggerContext)_localctx).triggerEvent = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1150);
			match(ON);
			setState(1151);
			tableName();
			setState(1152);
			match(FOR);
			setState(1153);
			match(EACH);
			setState(1154);
			match(ROW);
			setState(1157);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
			case 1:
				{
				setState(1155);
				((CreateTriggerContext)_localctx).triggerPlace = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
					((CreateTriggerContext)_localctx).triggerPlace = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1156);
				((CreateTriggerContext)_localctx).otherTrigger = fullId();
				}
				break;
			}
			setState(1159);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOption;
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(OpenDistroSqlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(OpenDistroSqlParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode OR() { return getToken(OpenDistroSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(OpenDistroSqlParser.REPLACE, 0); }
		public TerminalNode ALGORITHM() { return getToken(OpenDistroSqlParser.ALGORITHM, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(OpenDistroSqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(OpenDistroSqlParser.SECURITY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(OpenDistroSqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(OpenDistroSqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(OpenDistroSqlParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(OpenDistroSqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(OpenDistroSqlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(OpenDistroSqlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(OpenDistroSqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(OpenDistroSqlParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(OpenDistroSqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(OpenDistroSqlParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1161);
			match(CREATE);
			setState(1164);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1162);
				match(OR);
				setState(1163);
				match(REPLACE);
				}
			}

			setState(1169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(1166);
				match(ALGORITHM);
				setState(1167);
				match(EQUAL_SYMBOL);
				setState(1168);
				((CreateViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((CreateViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1172);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1171);
				ownerStatement();
				}
			}

			setState(1177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(1174);
				match(SQL);
				setState(1175);
				match(SECURITY);
				setState(1176);
				((CreateViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((CreateViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1179);
			match(VIEW);
			setState(1180);
			fullId();
			setState(1185);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1181);
				match(LR_BRACKET);
				setState(1182);
				uidList();
				setState(1183);
				match(RR_BRACKET);
				}
			}

			setState(1187);
			match(AS);
			setState(1188);
			selectStatement();
			setState(1195);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1189);
				match(WITH);
				setState(1191);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(1190);
					((CreateViewContext)_localctx).checkOption = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((CreateViewContext)_localctx).checkOption = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1193);
				match(CHECK);
				setState(1194);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(OpenDistroSqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(OpenDistroSqlParser.CHARSET, 0); }
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(OpenDistroSqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCreateDatabaseOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCreateDatabaseOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCreateDatabaseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_createDatabaseOption);
		int _la;
		try {
			setState(1217);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1198);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1197);
					match(DEFAULT);
					}
				}

				setState(1203);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(1200);
					match(CHARACTER);
					setState(1201);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(1202);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1206);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1205);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1208);
				charsetName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1209);
					match(DEFAULT);
					}
				}

				setState(1212);
				match(COLLATE);
				setState(1214);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1213);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1216);
				collationName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerStatementContext extends ParserRuleContext {
		public TerminalNode DEFINER() { return getToken(OpenDistroSqlParser.DEFINER, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(OpenDistroSqlParser.CURRENT_USER, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ownerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterOwnerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitOwnerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitOwnerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerStatementContext ownerStatement() throws RecognitionException {
		OwnerStatementContext _localctx = new OwnerStatementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_ownerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1219);
			match(DEFINER);
			setState(1220);
			match(EQUAL_SYMBOL);
			setState(1227);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
			case ID:
			case STRING_USER_NAME:
				{
				setState(1221);
				userName();
				}
				break;
			case CURRENT_USER:
				{
				setState(1222);
				match(CURRENT_USER);
				setState(1225);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1223);
					match(LR_BRACKET);
					setState(1224);
					match(RR_BRACKET);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScheduleExpressionContext extends ParserRuleContext {
		public ScheduleExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scheduleExpression; }
	 
		public ScheduleExpressionContext() { }
		public void copyFrom(ScheduleExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PreciseScheduleContext extends ScheduleExpressionContext {
		public TerminalNode AT() { return getToken(OpenDistroSqlParser.AT, 0); }
		public TimestampValueContext timestampValue() {
			return getRuleContext(TimestampValueContext.class,0);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public PreciseScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPreciseSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPreciseSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPreciseSchedule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalScheduleContext extends ScheduleExpressionContext {
		public TimestampValueContext startTimestamp;
		public IntervalExprContext intervalExpr;
		public List<IntervalExprContext> startIntervals = new ArrayList<IntervalExprContext>();
		public TimestampValueContext endTimestamp;
		public List<IntervalExprContext> endIntervals = new ArrayList<IntervalExprContext>();
		public TerminalNode EVERY() { return getToken(OpenDistroSqlParser.EVERY, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode STARTS() { return getToken(OpenDistroSqlParser.STARTS, 0); }
		public TerminalNode ENDS() { return getToken(OpenDistroSqlParser.ENDS, 0); }
		public List<TimestampValueContext> timestampValue() {
			return getRuleContexts(TimestampValueContext.class);
		}
		public TimestampValueContext timestampValue(int i) {
			return getRuleContext(TimestampValueContext.class,i);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public IntervalScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIntervalSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIntervalSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIntervalSchedule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScheduleExpressionContext scheduleExpression() throws RecognitionException {
		ScheduleExpressionContext _localctx = new ScheduleExpressionContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_scheduleExpression);
		int _la;
		try {
			setState(1263);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1229);
				match(AT);
				setState(1230);
				timestampValue();
				setState(1234);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(1231);
					intervalExpr();
					}
					}
					setState(1236);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1237);
				match(EVERY);
				setState(1240);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
				case 1:
					{
					setState(1238);
					decimalLiteral();
					}
					break;
				case 2:
					{
					setState(1239);
					expression(0);
					}
					break;
				}
				setState(1242);
				intervalType();
				setState(1251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTS) {
					{
					setState(1243);
					match(STARTS);
					setState(1244);
					((IntervalScheduleContext)_localctx).startTimestamp = timestampValue();
					setState(1248);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1245);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).startIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1250);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1261);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDS) {
					{
					setState(1253);
					match(ENDS);
					setState(1254);
					((IntervalScheduleContext)_localctx).endTimestamp = timestampValue();
					setState(1258);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1255);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).endIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1260);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimestampValueContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(OpenDistroSqlParser.CURRENT_TIMESTAMP, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTimestampValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTimestampValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTimestampValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimestampValueContext timestampValue() throws RecognitionException {
		TimestampValueContext _localctx = new TimestampValueContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_timestampValue);
		try {
			setState(1269);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1265);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1266);
				stringLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1267);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1268);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalExprContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(OpenDistroSqlParser.INTERVAL, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIntervalExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIntervalExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIntervalExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalExprContext intervalExpr() throws RecognitionException {
		IntervalExprContext _localctx = new IntervalExprContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_intervalExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1271);
			match(PLUS);
			setState(1272);
			match(INTERVAL);
			setState(1275);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
			case 1:
				{
				setState(1273);
				decimalLiteral();
				}
				break;
			case 2:
				{
				setState(1274);
				expression(0);
				}
				break;
			}
			setState(1277);
			intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeContext extends ParserRuleContext {
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(OpenDistroSqlParser.YEAR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(OpenDistroSqlParser.YEAR_MONTH, 0); }
		public TerminalNode DAY_HOUR() { return getToken(OpenDistroSqlParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(OpenDistroSqlParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(OpenDistroSqlParser.DAY_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(OpenDistroSqlParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(OpenDistroSqlParser.HOUR_SECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(OpenDistroSqlParser.MINUTE_SECOND, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(OpenDistroSqlParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(OpenDistroSqlParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(OpenDistroSqlParser.HOUR_MICROSECOND, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(OpenDistroSqlParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIntervalType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIntervalType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIntervalType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_intervalType);
		try {
			setState(1292);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 1);
				{
				setState(1279);
				intervalTypeBase();
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1280);
				match(YEAR);
				}
				break;
			case YEAR_MONTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1281);
				match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				enterOuterAlt(_localctx, 4);
				{
				setState(1282);
				match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1283);
				match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				enterOuterAlt(_localctx, 6);
				{
				setState(1284);
				match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1285);
				match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(1286);
				match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				enterOuterAlt(_localctx, 9);
				{
				setState(1287);
				match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				enterOuterAlt(_localctx, 10);
				{
				setState(1288);
				match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				enterOuterAlt(_localctx, 11);
				{
				setState(1289);
				match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				enterOuterAlt(_localctx, 12);
				{
				setState(1290);
				match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				enterOuterAlt(_localctx, 13);
				{
				setState(1291);
				match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableTypeContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(OpenDistroSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(OpenDistroSqlParser.DISABLE, 0); }
		public TerminalNode ON() { return getToken(OpenDistroSqlParser.ON, 0); }
		public TerminalNode SLAVE() { return getToken(OpenDistroSqlParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterEnableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitEnableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitEnableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableTypeContext enableType() throws RecognitionException {
		EnableTypeContext _localctx = new EnableTypeContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_enableType);
		try {
			setState(1299);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1294);
				match(ENABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1295);
				match(DISABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1296);
				match(DISABLE);
				setState(1297);
				match(ON);
				setState(1298);
				match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(OpenDistroSqlParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(OpenDistroSqlParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(OpenDistroSqlParser.HASH, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIndexType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIndexType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIndexType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1301);
			match(USING);
			setState(1302);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(OpenDistroSqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(OpenDistroSqlParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(OpenDistroSqlParser.PARSER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(OpenDistroSqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_indexOption);
		int _la;
		try {
			setState(1315);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1304);
				match(KEY_BLOCK_SIZE);
				setState(1306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1305);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1308);
				fileSizeLiteral();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1309);
				indexType();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1310);
				match(WITH);
				setState(1311);
				match(PARSER);
				setState(1312);
				uid();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1313);
				match(COMMENT);
				setState(1314);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureParameterContext extends ParserRuleContext {
		public Token direction;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode IN() { return getToken(OpenDistroSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(OpenDistroSqlParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(OpenDistroSqlParser.INOUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterProcedureParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitProcedureParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitProcedureParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureParameterContext procedureParameter() throws RecognitionException {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_procedureParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1318);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (IN - 68)) | (1L << (INOUT - 68)) | (1L << (OUT - 68)))) != 0)) {
				{
				setState(1317);
				((ProcedureParameterContext)_localctx).direction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (IN - 68)) | (1L << (INOUT - 68)) | (1L << (OUT - 68)))) != 0)) ) {
					((ProcedureParameterContext)_localctx).direction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1320);
			uid();
			setState(1321);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterFunctionParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitFunctionParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitFunctionParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_functionParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1323);
			uid();
			setState(1324);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOptionContext extends ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
	 
		public RoutineOptionContext() { }
		public void copyFrom(RoutineOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RoutineBehaviorContext extends RoutineOptionContext {
		public TerminalNode DETERMINISTIC() { return getToken(OpenDistroSqlParser.DETERMINISTIC, 0); }
		public TerminalNode NOT() { return getToken(OpenDistroSqlParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRoutineBehavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRoutineBehavior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRoutineBehavior(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineLanguageContext extends RoutineOptionContext {
		public TerminalNode LANGUAGE() { return getToken(OpenDistroSqlParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(OpenDistroSqlParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRoutineLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRoutineLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRoutineLanguage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineCommentContext extends RoutineOptionContext {
		public TerminalNode COMMENT() { return getToken(OpenDistroSqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRoutineComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRoutineComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRoutineComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineSecurityContext extends RoutineOptionContext {
		public Token context;
		public TerminalNode SQL() { return getToken(OpenDistroSqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(OpenDistroSqlParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(OpenDistroSqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(OpenDistroSqlParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRoutineSecurity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRoutineSecurity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRoutineSecurity(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineDataContext extends RoutineOptionContext {
		public TerminalNode CONTAINS() { return getToken(OpenDistroSqlParser.CONTAINS, 0); }
		public TerminalNode SQL() { return getToken(OpenDistroSqlParser.SQL, 0); }
		public TerminalNode NO() { return getToken(OpenDistroSqlParser.NO, 0); }
		public TerminalNode READS() { return getToken(OpenDistroSqlParser.READS, 0); }
		public TerminalNode DATA() { return getToken(OpenDistroSqlParser.DATA, 0); }
		public TerminalNode MODIFIES() { return getToken(OpenDistroSqlParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRoutineData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRoutineData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRoutineData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_routineOption);
		int _la;
		try {
			setState(1349);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1326);
				match(COMMENT);
				setState(1327);
				match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1328);
				match(LANGUAGE);
				setState(1329);
				match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1330);
					match(NOT);
					}
				}

				setState(1333);
				match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1344);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTAINS:
					{
					setState(1334);
					match(CONTAINS);
					setState(1335);
					match(SQL);
					}
					break;
				case NO:
					{
					setState(1336);
					match(NO);
					setState(1337);
					match(SQL);
					}
					break;
				case READS:
					{
					setState(1338);
					match(READS);
					setState(1339);
					match(SQL);
					setState(1340);
					match(DATA);
					}
					break;
				case MODIFIES:
					{
					setState(1341);
					match(MODIFIES);
					setState(1342);
					match(SQL);
					setState(1343);
					match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1346);
				match(SQL);
				setState(1347);
				match(SECURITY);
				setState(1348);
				((RoutineSecurityContext)_localctx).context = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionContext extends ParserRuleContext {
		public TerminalNode HOST() { return getToken(OpenDistroSqlParser.HOST, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode DATABASE() { return getToken(OpenDistroSqlParser.DATABASE, 0); }
		public TerminalNode USER() { return getToken(OpenDistroSqlParser.USER, 0); }
		public TerminalNode PASSWORD() { return getToken(OpenDistroSqlParser.PASSWORD, 0); }
		public TerminalNode SOCKET() { return getToken(OpenDistroSqlParser.SOCKET, 0); }
		public TerminalNode OWNER() { return getToken(OpenDistroSqlParser.OWNER, 0); }
		public TerminalNode PORT() { return getToken(OpenDistroSqlParser.PORT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterServerOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitServerOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitServerOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_serverOption);
		try {
			setState(1365);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST:
				enterOuterAlt(_localctx, 1);
				{
				setState(1351);
				match(HOST);
				setState(1352);
				match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1353);
				match(DATABASE);
				setState(1354);
				match(STRING_LITERAL);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1355);
				match(USER);
				setState(1356);
				match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(1357);
				match(PASSWORD);
				setState(1358);
				match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				enterOuterAlt(_localctx, 5);
				{
				setState(1359);
				match(SOCKET);
				setState(1360);
				match(STRING_LITERAL);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 6);
				{
				setState(1361);
				match(OWNER);
				setState(1362);
				match(STRING_LITERAL);
				}
				break;
			case PORT:
				enterOuterAlt(_localctx, 7);
				{
				setState(1363);
				match(PORT);
				setState(1364);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionsContext extends ParserRuleContext {
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCreateDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCreateDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCreateDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionsContext createDefinitions() throws RecognitionException {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_createDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1367);
			match(LR_BRACKET);
			setState(1368);
			createDefinition();
			setState(1373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1369);
				match(COMMA);
				setState(1370);
				createDefinition();
				}
				}
				setState(1375);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1376);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
	 
		public CreateDefinitionContext() { }
		public void copyFrom(CreateDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ColumnDeclarationContext extends CreateDefinitionContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterColumnDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitColumnDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitColumnDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstraintDeclarationContext extends CreateDefinitionContext {
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterConstraintDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitConstraintDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitConstraintDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IndexDeclarationContext extends CreateDefinitionContext {
		public IndexColumnDefinitionContext indexColumnDefinition() {
			return getRuleContext(IndexColumnDefinitionContext.class,0);
		}
		public IndexDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_createDefinition);
		try {
			setState(1383);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new ColumnDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1378);
				uid();
				setState(1379);
				columnDefinition();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				_localctx = new ConstraintDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1381);
				tableConstraint();
				}
				break;
			case FULLTEXT:
			case INDEX:
			case KEY:
			case SPATIAL:
				_localctx = new IndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1382);
				indexColumnDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_columnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1385);
			dataType();
			setState(1389);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << COLLATE) | (1L << DEFAULT) | (1L << GENERATED))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (KEY - 79)) | (1L << (NOT - 79)) | (1L << (NULL_LITERAL - 79)) | (1L << (ON - 79)) | (1L << (PRIMARY - 79)) | (1L << (REFERENCES - 79)))) != 0) || _la==UNIQUE || _la==SERIAL || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & ((1L << (AUTO_INCREMENT - 262)) | (1L << (COLUMN_FORMAT - 262)) | (1L << (COMMENT - 262)))) != 0) || _la==STORAGE || _la==NULL_SPEC_LITERAL) {
				{
				{
				setState(1386);
				columnConstraint();
				}
				}
				setState(1391);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
	 
		public ColumnConstraintContext() { }
		public void copyFrom(ColumnConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StorageColumnConstraintContext extends ColumnConstraintContext {
		public Token storageval;
		public TerminalNode STORAGE() { return getToken(OpenDistroSqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(OpenDistroSqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(OpenDistroSqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterStorageColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitStorageColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitStorageColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FormatColumnConstraintContext extends ColumnConstraintContext {
		public Token colformat;
		public TerminalNode COLUMN_FORMAT() { return getToken(OpenDistroSqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(OpenDistroSqlParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(OpenDistroSqlParser.DYNAMIC, 0); }
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterFormatColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitFormatColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitFormatColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COLLATE() { return getToken(OpenDistroSqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCollateColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCollateColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCollateColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(OpenDistroSqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode ON() { return getToken(OpenDistroSqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(OpenDistroSqlParser.UPDATE, 0); }
		public CurrentTimestampContext currentTimestamp() {
			return getRuleContext(CurrentTimestampContext.class,0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAutoIncrementColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAutoIncrementColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAutoIncrementColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommentColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COMMENT() { return getToken(OpenDistroSqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCommentColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCommentColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCommentColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(OpenDistroSqlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPrimaryKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPrimaryKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPrimaryKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode UNIQUE() { return getToken(OpenDistroSqlParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUniqueKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUniqueKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUniqueKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode SERIAL() { return getToken(OpenDistroSqlParser.SERIAL, 0); }
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public TerminalNode VALUE() { return getToken(OpenDistroSqlParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSerialDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSerialDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSerialDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullColumnConstraintContext extends ColumnConstraintContext {
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterNullColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitNullColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitNullColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReferenceColumnConstraintContext extends ColumnConstraintContext {
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterReferenceColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitReferenceColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitReferenceColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GeneratedColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AS() { return getToken(OpenDistroSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(OpenDistroSqlParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(OpenDistroSqlParser.ALWAYS, 0); }
		public TerminalNode VIRTUAL() { return getToken(OpenDistroSqlParser.VIRTUAL, 0); }
		public TerminalNode STORED() { return getToken(OpenDistroSqlParser.STORED, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterGeneratedColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitGeneratedColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitGeneratedColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_columnConstraint);
		int _la;
		try {
			setState(1432);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1392);
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1393);
				match(DEFAULT);
				setState(1394);
				defaultValue();
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1399);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO_INCREMENT:
					{
					setState(1395);
					match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					setState(1396);
					match(ON);
					setState(1397);
					match(UPDATE);
					setState(1398);
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1402);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(1401);
					match(PRIMARY);
					}
				}

				setState(1404);
				match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1405);
				match(UNIQUE);
				setState(1407);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
				case 1:
					{
					setState(1406);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1409);
				match(COMMENT);
				setState(1410);
				match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1411);
				match(COLUMN_FORMAT);
				setState(1412);
				((FormatColumnConstraintContext)_localctx).colformat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1413);
				match(STORAGE);
				setState(1414);
				((StorageColumnConstraintContext)_localctx).storageval = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1415);
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1416);
				match(COLLATE);
				setState(1417);
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1420);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED) {
					{
					setState(1418);
					match(GENERATED);
					setState(1419);
					match(ALWAYS);
					}
				}

				setState(1422);
				match(AS);
				setState(1423);
				match(LR_BRACKET);
				setState(1424);
				expression(0);
				setState(1425);
				match(RR_BRACKET);
				setState(1427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORED || _la==VIRTUAL) {
					{
					setState(1426);
					_la = _input.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1429);
				match(SERIAL);
				setState(1430);
				match(DEFAULT);
				setState(1431);
				match(VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
	 
		public TableConstraintContext() { }
		public void copyFrom(TableConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UniqueKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext index;
		public TerminalNode UNIQUE() { return getToken(OpenDistroSqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(OpenDistroSqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUniqueKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUniqueKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUniqueKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(OpenDistroSqlParser.CHECK, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(OpenDistroSqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode PRIMARY() { return getToken(OpenDistroSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(OpenDistroSqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPrimaryKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPrimaryKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPrimaryKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode FOREIGN() { return getToken(OpenDistroSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(OpenDistroSqlParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterForeignKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitForeignKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitForeignKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_tableConstraint);
		int _la;
		try {
			setState(1503);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1438);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1434);
					match(CONSTRAINT);
					setState(1436);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
						{
						setState(1435);
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1440);
				match(PRIMARY);
				setState(1441);
				match(KEY);
				setState(1443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
					{
					setState(1442);
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1446);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1445);
					indexType();
					}
				}

				setState(1448);
				indexColumnNames();
				setState(1452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(1449);
					indexOption();
					}
					}
					setState(1454);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1455);
					match(CONSTRAINT);
					setState(1457);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
						{
						setState(1456);
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1461);
				match(UNIQUE);
				setState(1463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1462);
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1466);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
					{
					setState(1465);
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1469);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1468);
					indexType();
					}
				}

				setState(1471);
				indexColumnNames();
				setState(1475);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(1472);
					indexOption();
					}
					}
					setState(1477);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1482);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1478);
					match(CONSTRAINT);
					setState(1480);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
						{
						setState(1479);
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1484);
				match(FOREIGN);
				setState(1485);
				match(KEY);
				setState(1487);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
					{
					setState(1486);
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1489);
				indexColumnNames();
				setState(1490);
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1496);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1492);
					match(CONSTRAINT);
					setState(1494);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
						{
						setState(1493);
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1498);
				match(CHECK);
				setState(1499);
				match(LR_BRACKET);
				setState(1500);
				expression(0);
				setState(1501);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceDefinitionContext extends ParserRuleContext {
		public Token matchType;
		public TerminalNode REFERENCES() { return getToken(OpenDistroSqlParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(OpenDistroSqlParser.MATCH, 0); }
		public ReferenceActionContext referenceAction() {
			return getRuleContext(ReferenceActionContext.class,0);
		}
		public TerminalNode FULL() { return getToken(OpenDistroSqlParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(OpenDistroSqlParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(OpenDistroSqlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterReferenceDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitReferenceDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitReferenceDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_referenceDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1505);
			match(REFERENCES);
			setState(1506);
			tableName();
			setState(1508);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
			case 1:
				{
				setState(1507);
				indexColumnNames();
				}
				break;
			}
			setState(1512);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(1510);
				match(MATCH);
				setState(1511);
				((ReferenceDefinitionContext)_localctx).matchType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					((ReferenceDefinitionContext)_localctx).matchType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1515);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				setState(1514);
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceActionContext extends ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		public List<TerminalNode> ON() { return getTokens(OpenDistroSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(OpenDistroSqlParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(OpenDistroSqlParser.DELETE, 0); }
		public List<ReferenceControlTypeContext> referenceControlType() {
			return getRuleContexts(ReferenceControlTypeContext.class);
		}
		public ReferenceControlTypeContext referenceControlType(int i) {
			return getRuleContext(ReferenceControlTypeContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(OpenDistroSqlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterReferenceAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitReferenceAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitReferenceAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceActionContext referenceAction() throws RecognitionException {
		ReferenceActionContext _localctx = new ReferenceActionContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_referenceAction);
		try {
			setState(1533);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1517);
				match(ON);
				setState(1518);
				match(DELETE);
				setState(1519);
				((ReferenceActionContext)_localctx).onDelete = referenceControlType();
				setState(1523);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
				case 1:
					{
					setState(1520);
					match(ON);
					setState(1521);
					match(UPDATE);
					setState(1522);
					((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1525);
				match(ON);
				setState(1526);
				match(UPDATE);
				setState(1527);
				((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
				setState(1531);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
				case 1:
					{
					setState(1528);
					match(ON);
					setState(1529);
					match(DELETE);
					setState(1530);
					((ReferenceActionContext)_localctx).onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(OpenDistroSqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(OpenDistroSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(OpenDistroSqlParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(OpenDistroSqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(OpenDistroSqlParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterReferenceControlType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitReferenceControlType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitReferenceControlType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_referenceControlType);
		try {
			setState(1541);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1535);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1536);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(1537);
				match(SET);
				setState(1538);
				match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(1539);
				match(NO);
				setState(1540);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnDefinitionContext extends ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnDefinition; }
	 
		public IndexColumnDefinitionContext() { }
		public void copyFrom(IndexColumnDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(OpenDistroSqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(OpenDistroSqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSpecialIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSpecialIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSpecialIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSimpleIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSimpleIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSimpleIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnDefinitionContext indexColumnDefinition() throws RecognitionException {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_indexColumnDefinition);
		int _la;
		try {
			setState(1571);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1543);
				((SimpleIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1545);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
					{
					setState(1544);
					uid();
					}
				}

				setState(1548);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1547);
					indexType();
					}
				}

				setState(1550);
				indexColumnNames();
				setState(1554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(1551);
					indexOption();
					}
					}
					setState(1556);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1557);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1559);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1558);
					((SpecialIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
					{
					setState(1561);
					uid();
					}
				}

				setState(1564);
				indexColumnNames();
				setState(1568);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(1565);
					indexOption();
					}
					}
					setState(1570);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionContext extends ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption; }
	 
		public TableOptionContext() { }
		public void copyFrom(TableOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableOptionEngineContext extends TableOptionContext {
		public TerminalNode ENGINE() { return getToken(OpenDistroSqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TableOptionEngineContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMaxRowsContext extends TableOptionContext {
		public TerminalNode MAX_ROWS() { return getToken(OpenDistroSqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TableOptionMaxRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCollateContext extends TableOptionContext {
		public TerminalNode COLLATE() { return getToken(OpenDistroSqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public TableOptionCollateContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionCollate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPersistentContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_PERSISTENT() { return getToken(OpenDistroSqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public TableOptionPersistentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionPersistent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionPersistent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionPersistent(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionTablespaceContext extends TableOptionContext {
		public TerminalNode TABLESPACE() { return getToken(OpenDistroSqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TablespaceStorageContext tablespaceStorage() {
			return getRuleContext(TablespaceStorageContext.class,0);
		}
		public TableOptionTablespaceContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPackKeysContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode PACK_KEYS() { return getToken(OpenDistroSqlParser.PACK_KEYS, 0); }
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public TableOptionPackKeysContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionPackKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionPackKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionPackKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionPasswordContext extends TableOptionContext {
		public TerminalNode PASSWORD() { return getToken(OpenDistroSqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TableOptionPasswordContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionUnionContext extends TableOptionContext {
		public TerminalNode UNION() { return getToken(OpenDistroSqlParser.UNION, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TableOptionUnionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionUnion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionUnion(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionSamplePageContext extends TableOptionContext {
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(OpenDistroSqlParser.STATS_SAMPLE_PAGES, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TableOptionSamplePageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionSamplePage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionSamplePage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionSamplePage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCharsetContext extends TableOptionContext {
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(OpenDistroSqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(OpenDistroSqlParser.CHARSET, 0); }
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public TableOptionCharsetContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionIndexDirectoryContext extends TableOptionContext {
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(OpenDistroSqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionKeyBlockSizeContext extends TableOptionContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(OpenDistroSqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TableOptionKeyBlockSizeContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionKeyBlockSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionKeyBlockSize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionKeyBlockSize(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionEncryptionContext extends TableOptionContext {
		public TerminalNode ENCRYPTION() { return getToken(OpenDistroSqlParser.ENCRYPTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TableOptionEncryptionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionEncryption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionEncryption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionEncryption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDataDirectoryContext extends TableOptionContext {
		public TerminalNode DATA() { return getToken(OpenDistroSqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(OpenDistroSqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRecalculationContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_AUTO_RECALC() { return getToken(OpenDistroSqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public TableOptionRecalculationContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionRecalculation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionRecalculation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionRecalculation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAutoIncrementContext extends TableOptionContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(OpenDistroSqlParser.AUTO_INCREMENT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TableOptionAutoIncrementContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionAutoIncrement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionAutoIncrement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionAutoIncrement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionChecksumContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode CHECKSUM() { return getToken(OpenDistroSqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(OpenDistroSqlParser.PAGE_CHECKSUM, 0); }
		public TableOptionChecksumContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionChecksum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionChecksum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionChecksum(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionDelayContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode DELAY_KEY_WRITE() { return getToken(OpenDistroSqlParser.DELAY_KEY_WRITE, 0); }
		public TableOptionDelayContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionDelay(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionDelay(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionDelay(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionConnectionContext extends TableOptionContext {
		public TerminalNode CONNECTION() { return getToken(OpenDistroSqlParser.CONNECTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TableOptionConnectionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionConnection(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCommentContext extends TableOptionContext {
		public TerminalNode COMMENT() { return getToken(OpenDistroSqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TableOptionCommentContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionAverageContext extends TableOptionContext {
		public TerminalNode AVG_ROW_LENGTH() { return getToken(OpenDistroSqlParser.AVG_ROW_LENGTH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TableOptionAverageContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionAverage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionAverage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionAverage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionRowFormatContext extends TableOptionContext {
		public Token rowFormat;
		public TerminalNode ROW_FORMAT() { return getToken(OpenDistroSqlParser.ROW_FORMAT, 0); }
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public TerminalNode DYNAMIC() { return getToken(OpenDistroSqlParser.DYNAMIC, 0); }
		public TerminalNode FIXED() { return getToken(OpenDistroSqlParser.FIXED, 0); }
		public TerminalNode COMPRESSED() { return getToken(OpenDistroSqlParser.COMPRESSED, 0); }
		public TerminalNode REDUNDANT() { return getToken(OpenDistroSqlParser.REDUNDANT, 0); }
		public TerminalNode COMPACT() { return getToken(OpenDistroSqlParser.COMPACT, 0); }
		public TableOptionRowFormatContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionRowFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionRowFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionRowFormat(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionCompressionContext extends TableOptionContext {
		public TerminalNode COMPRESSION() { return getToken(OpenDistroSqlParser.COMPRESSION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode ID() { return getToken(OpenDistroSqlParser.ID, 0); }
		public TableOptionCompressionContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionCompression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionCompression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionCompression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionInsertMethodContext extends TableOptionContext {
		public Token insertMethod;
		public TerminalNode INSERT_METHOD() { return getToken(OpenDistroSqlParser.INSERT_METHOD, 0); }
		public TerminalNode NO() { return getToken(OpenDistroSqlParser.NO, 0); }
		public TerminalNode FIRST() { return getToken(OpenDistroSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(OpenDistroSqlParser.LAST, 0); }
		public TableOptionInsertMethodContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionInsertMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionInsertMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionInsertMethod(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableOptionMinRowsContext extends TableOptionContext {
		public TerminalNode MIN_ROWS() { return getToken(OpenDistroSqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TableOptionMinRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionContext tableOption() throws RecognitionException {
		TableOptionContext _localctx = new TableOptionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_tableOption);
		int _la;
		try {
			setState(1714);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1573);
				match(ENGINE);
				setState(1575);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1574);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1577);
				engineName();
				}
				break;
			case 2:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1578);
				match(AUTO_INCREMENT);
				setState(1580);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1579);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1582);
				decimalLiteral();
				}
				break;
			case 3:
				_localctx = new TableOptionAverageContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1583);
				match(AVG_ROW_LENGTH);
				setState(1585);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1584);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1587);
				decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionCharsetContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1588);
					match(DEFAULT);
					}
				}

				setState(1594);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(1591);
					match(CHARACTER);
					setState(1592);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(1593);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1597);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1596);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1599);
				charsetName();
				}
				break;
			case 5:
				_localctx = new TableOptionChecksumContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1600);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM || _la==PAGE_CHECKSUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1602);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1601);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1604);
				((TableOptionChecksumContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				_localctx = new TableOptionCollateContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1606);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1605);
					match(DEFAULT);
					}
				}

				setState(1608);
				match(COLLATE);
				setState(1610);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1609);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1612);
				collationName();
				}
				break;
			case 7:
				_localctx = new TableOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1613);
				match(COMMENT);
				setState(1615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1614);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1617);
				match(STRING_LITERAL);
				}
				break;
			case 8:
				_localctx = new TableOptionCompressionContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1618);
				match(COMPRESSION);
				setState(1620);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1619);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1622);
				_la = _input.LA(1);
				if ( !(_la==STRING_LITERAL || _la==ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new TableOptionConnectionContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1623);
				match(CONNECTION);
				setState(1625);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1624);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1627);
				match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1628);
				match(DATA);
				setState(1629);
				match(DIRECTORY);
				setState(1631);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1630);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1633);
				match(STRING_LITERAL);
				}
				break;
			case 11:
				_localctx = new TableOptionDelayContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1634);
				match(DELAY_KEY_WRITE);
				setState(1636);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1635);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1638);
				((TableOptionDelayContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new TableOptionEncryptionContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1639);
				match(ENCRYPTION);
				setState(1641);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1640);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1643);
				match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1644);
				match(INDEX);
				setState(1645);
				match(DIRECTORY);
				setState(1647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1646);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1649);
				match(STRING_LITERAL);
				}
				break;
			case 14:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1650);
				match(INSERT_METHOD);
				setState(1652);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1651);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1654);
				((TableOptionInsertMethodContext)_localctx).insertMethod = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1655);
				match(KEY_BLOCK_SIZE);
				setState(1657);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1656);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1659);
				fileSizeLiteral();
				}
				break;
			case 16:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1660);
				match(MAX_ROWS);
				setState(1662);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1661);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1664);
				decimalLiteral();
				}
				break;
			case 17:
				_localctx = new TableOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1665);
				match(MIN_ROWS);
				setState(1667);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1666);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1669);
				decimalLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionPackKeysContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1670);
				match(PACK_KEYS);
				setState(1672);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1671);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1674);
				((TableOptionPackKeysContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 19:
				_localctx = new TableOptionPasswordContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1675);
				match(PASSWORD);
				setState(1677);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1676);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1679);
				match(STRING_LITERAL);
				}
				break;
			case 20:
				_localctx = new TableOptionRowFormatContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1680);
				match(ROW_FORMAT);
				setState(1682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1681);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1684);
				((TableOptionRowFormatContext)_localctx).rowFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 287)) & ~0x3f) == 0 && ((1L << (_la - 287)) & ((1L << (COMPACT - 287)) | (1L << (COMPRESSED - 287)) | (1L << (DYNAMIC - 287)) | (1L << (FIXED - 287)))) != 0) || _la==REDUNDANT) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 21:
				_localctx = new TableOptionRecalculationContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(1685);
				match(STATS_AUTO_RECALC);
				setState(1687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1686);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1689);
				((TableOptionRecalculationContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 22:
				_localctx = new TableOptionPersistentContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(1690);
				match(STATS_PERSISTENT);
				setState(1692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1691);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1694);
				((TableOptionPersistentContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 23:
				_localctx = new TableOptionSamplePageContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(1695);
				match(STATS_SAMPLE_PAGES);
				setState(1697);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1696);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1699);
				decimalLiteral();
				}
				break;
			case 24:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1700);
				match(TABLESPACE);
				setState(1701);
				uid();
				setState(1703);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
				case 1:
					{
					setState(1702);
					tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 25:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(1705);
				tablespaceStorage();
				}
				break;
			case 26:
				_localctx = new TableOptionUnionContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(1706);
				match(UNION);
				setState(1708);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1707);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1710);
				match(LR_BRACKET);
				setState(1711);
				tables();
				setState(1712);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceStorageContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(OpenDistroSqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(OpenDistroSqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(OpenDistroSqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceStorage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTablespaceStorage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTablespaceStorage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTablespaceStorage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceStorageContext tablespaceStorage() throws RecognitionException {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_tablespaceStorage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1716);
			match(STORAGE);
			setState(1717);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(OpenDistroSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(OpenDistroSqlParser.BY, i);
		}
		public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return getRuleContext(PartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(OpenDistroSqlParser.PARTITIONS, 0); }
		public TerminalNode SUBPARTITION() { return getToken(OpenDistroSqlParser.SUBPARTITION, 0); }
		public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return getRuleContext(SubpartitionFunctionDefinitionContext.class,0);
		}
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(OpenDistroSqlParser.SUBPARTITIONS, 0); }
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1719);
			match(PARTITION);
			setState(1720);
			match(BY);
			setState(1721);
			partitionFunctionDefinition();
			setState(1724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(1722);
				match(PARTITIONS);
				setState(1723);
				((PartitionDefinitionsContext)_localctx).count = decimalLiteral();
				}
			}

			setState(1733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(1726);
				match(SUBPARTITION);
				setState(1727);
				match(BY);
				setState(1728);
				subpartitionFunctionDefinition();
				setState(1731);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					setState(1729);
					match(SUBPARTITIONS);
					setState(1730);
					((PartitionDefinitionsContext)_localctx).subCount = decimalLiteral();
					}
				}

				}
			}

			setState(1746);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				setState(1735);
				match(LR_BRACKET);
				setState(1736);
				partitionDefinition();
				setState(1741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1737);
					match(COMMA);
					setState(1738);
					partitionDefinition();
					}
					}
					setState(1743);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1744);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionFunctionDefinitionContext extends ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionFunctionDefinition; }
	 
		public PartitionFunctionDefinitionContext() { }
		public void copyFrom(PartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode LINEAR() { return getToken(OpenDistroSqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(OpenDistroSqlParser.ALGORITHM, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(OpenDistroSqlParser.HASH, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LINEAR() { return getToken(OpenDistroSqlParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
		public TerminalNode LIST() { return getToken(OpenDistroSqlParser.LIST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(OpenDistroSqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionFunctionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionFunctionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionFunctionList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
		public TerminalNode RANGE() { return getToken(OpenDistroSqlParser.RANGE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(OpenDistroSqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionFunctionRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionFunctionRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionFunctionRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionFunctionDefinitionContext partitionFunctionDefinition() throws RecognitionException {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_partitionFunctionDefinition);
		int _la;
		try {
			setState(1793);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1749);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1748);
					match(LINEAR);
					}
				}

				setState(1751);
				match(HASH);
				setState(1752);
				match(LR_BRACKET);
				setState(1753);
				expression(0);
				setState(1754);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1757);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1756);
					match(LINEAR);
					}
				}

				setState(1759);
				match(KEY);
				setState(1763);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1760);
					match(ALGORITHM);
					setState(1761);
					match(EQUAL_SYMBOL);
					setState(1762);
					((PartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1765);
				match(LR_BRACKET);
				setState(1766);
				uidList();
				setState(1767);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1769);
				match(RANGE);
				setState(1779);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1770);
					match(LR_BRACKET);
					setState(1771);
					expression(0);
					setState(1772);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1774);
					match(COLUMNS);
					setState(1775);
					match(LR_BRACKET);
					setState(1776);
					uidList();
					setState(1777);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1781);
				match(LIST);
				setState(1791);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(1782);
					match(LR_BRACKET);
					setState(1783);
					expression(0);
					setState(1784);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(1786);
					match(COLUMNS);
					setState(1787);
					match(LR_BRACKET);
					setState(1788);
					uidList();
					setState(1789);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionFunctionDefinition; }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public void copyFrom(SubpartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(OpenDistroSqlParser.HASH, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LINEAR() { return getToken(OpenDistroSqlParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSubPartitionFunctionHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSubPartitionFunctionHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSubPartitionFunctionHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode LINEAR() { return getToken(OpenDistroSqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(OpenDistroSqlParser.ALGORITHM, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSubPartitionFunctionKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSubPartitionFunctionKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSubPartitionFunctionKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() throws RecognitionException {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			setState(1816);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1796);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1795);
					match(LINEAR);
					}
				}

				setState(1798);
				match(HASH);
				setState(1799);
				match(LR_BRACKET);
				setState(1800);
				expression(0);
				setState(1801);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1804);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1803);
					match(LINEAR);
					}
				}

				setState(1806);
				match(KEY);
				setState(1810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1807);
					match(ALGORITHM);
					setState(1808);
					match(EQUAL_SYMBOL);
					setState(1809);
					((SubPartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1812);
				match(LR_BRACKET);
				setState(1813);
				uidList();
				setState(1814);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionContext extends ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
	 
		public PartitionDefinitionContext() { }
		public void copyFrom(PartitionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionComparisionContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(OpenDistroSqlParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(OpenDistroSqlParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(OpenDistroSqlParser.THAN, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionComparisionContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionComparision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionComparision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionComparision(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListAtomContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(OpenDistroSqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(OpenDistroSqlParser.IN, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionListAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionListAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionListAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionListVectorContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(OpenDistroSqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(OpenDistroSqlParser.IN, 0); }
		public List<PartitionDefinerVectorContext> partitionDefinerVector() {
			return getRuleContexts(PartitionDefinerVectorContext.class);
		}
		public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return getRuleContext(PartitionDefinerVectorContext.class,i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionListVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionListVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionListVector(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionSimpleContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionSimple(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionSimple(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionSimple(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_partitionDefinition);
		int _la;
		try {
			int _alt;
			setState(1949);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				_localctx = new PartitionComparisionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1818);
				match(PARTITION);
				setState(1819);
				uid();
				setState(1820);
				match(VALUES);
				setState(1821);
				match(LESS);
				setState(1822);
				match(THAN);
				setState(1823);
				match(LR_BRACKET);
				setState(1824);
				partitionDefinerAtom();
				setState(1829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1825);
					match(COMMA);
					setState(1826);
					partitionDefinerAtom();
					}
					}
					setState(1831);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1832);
				match(RR_BRACKET);
				setState(1836);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (COMMENT - 285)) | (1L << (DATA - 285)) | (1L << (ENGINE - 285)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (MAX_ROWS - 403)) | (1L << (MIN_ROWS - 403)) | (1L << (NODEGROUP - 403)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1833);
					partitionOption();
					}
					}
					setState(1838);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1847);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1839);
					subpartitionDefinition();
					setState(1844);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,212,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1840);
							match(COMMA);
							setState(1841);
							subpartitionDefinition();
							}
							} 
						}
						setState(1846);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,212,_ctx);
					}
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionComparisionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1849);
				match(PARTITION);
				setState(1850);
				uid();
				setState(1851);
				match(VALUES);
				setState(1852);
				match(LESS);
				setState(1853);
				match(THAN);
				setState(1854);
				partitionDefinerAtom();
				setState(1858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (COMMENT - 285)) | (1L << (DATA - 285)) | (1L << (ENGINE - 285)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (MAX_ROWS - 403)) | (1L << (MIN_ROWS - 403)) | (1L << (NODEGROUP - 403)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1855);
					partitionOption();
					}
					}
					setState(1860);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1869);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1861);
					subpartitionDefinition();
					setState(1866);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1862);
							match(COMMA);
							setState(1863);
							subpartitionDefinition();
							}
							} 
						}
						setState(1868);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
					}
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1871);
				match(PARTITION);
				setState(1872);
				uid();
				setState(1873);
				match(VALUES);
				setState(1874);
				match(IN);
				setState(1875);
				match(LR_BRACKET);
				setState(1876);
				partitionDefinerAtom();
				setState(1881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1877);
					match(COMMA);
					setState(1878);
					partitionDefinerAtom();
					}
					}
					setState(1883);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1884);
				match(RR_BRACKET);
				setState(1888);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (COMMENT - 285)) | (1L << (DATA - 285)) | (1L << (ENGINE - 285)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (MAX_ROWS - 403)) | (1L << (MIN_ROWS - 403)) | (1L << (NODEGROUP - 403)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1885);
					partitionOption();
					}
					}
					setState(1890);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1899);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1891);
					subpartitionDefinition();
					setState(1896);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,219,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1892);
							match(COMMA);
							setState(1893);
							subpartitionDefinition();
							}
							} 
						}
						setState(1898);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,219,_ctx);
					}
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1901);
				match(PARTITION);
				setState(1902);
				uid();
				setState(1903);
				match(VALUES);
				setState(1904);
				match(IN);
				setState(1905);
				match(LR_BRACKET);
				setState(1906);
				partitionDefinerVector();
				setState(1911);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1907);
					match(COMMA);
					setState(1908);
					partitionDefinerVector();
					}
					}
					setState(1913);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1914);
				match(RR_BRACKET);
				setState(1918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (COMMENT - 285)) | (1L << (DATA - 285)) | (1L << (ENGINE - 285)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (MAX_ROWS - 403)) | (1L << (MIN_ROWS - 403)) | (1L << (NODEGROUP - 403)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1915);
					partitionOption();
					}
					}
					setState(1920);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1921);
					subpartitionDefinition();
					setState(1926);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1922);
							match(COMMA);
							setState(1923);
							subpartitionDefinition();
							}
							} 
						}
						setState(1928);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
					}
					}
				}

				}
				break;
			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1931);
				match(PARTITION);
				setState(1932);
				uid();
				setState(1936);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INDEX || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (COMMENT - 285)) | (1L << (DATA - 285)) | (1L << (ENGINE - 285)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (MAX_ROWS - 403)) | (1L << (MIN_ROWS - 403)) | (1L << (NODEGROUP - 403)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(1933);
					partitionOption();
					}
					}
					setState(1938);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1947);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITION) {
					{
					setState(1939);
					subpartitionDefinition();
					setState(1944);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,226,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1940);
							match(COMMA);
							setState(1941);
							subpartitionDefinition();
							}
							} 
						}
						setState(1946);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,226,_ctx);
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerAtomContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(OpenDistroSqlParser.MAXVALUE, 0); }
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionDefinerAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionDefinerAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionDefinerAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerAtomContext partitionDefinerAtom() throws RecognitionException {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_partitionDefinerAtom);
		try {
			setState(1954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1951);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1952);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1953);
				match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerVectorContext extends ParserRuleContext {
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerVector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionDefinerVector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionDefinerVector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionDefinerVector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinerVectorContext partitionDefinerVector() throws RecognitionException {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_partitionDefinerVector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1956);
			match(LR_BRACKET);
			setState(1957);
			partitionDefinerAtom();
			setState(1960); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1958);
				match(COMMA);
				setState(1959);
				partitionDefinerAtom();
				}
				}
				setState(1962); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			setState(1964);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(OpenDistroSqlParser.SUBPARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSubpartitionDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSubpartitionDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSubpartitionDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1966);
			match(SUBPARTITION);
			setState(1967);
			uid();
			setState(1971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INDEX || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (COMMENT - 285)) | (1L << (DATA - 285)) | (1L << (ENGINE - 285)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (MAX_ROWS - 403)) | (1L << (MIN_ROWS - 403)) | (1L << (NODEGROUP - 403)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				setState(1968);
				partitionOption();
				}
				}
				setState(1973);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionOptionContext extends ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
	 
		public PartitionOptionContext() { }
		public void copyFrom(PartitionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionOptionCommentContext extends PartitionOptionContext {
		public Token comment;
		public TerminalNode COMMENT() { return getToken(OpenDistroSqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionNodeGroupContext extends PartitionOptionContext {
		public UidContext nodegroup;
		public TerminalNode NODEGROUP() { return getToken(OpenDistroSqlParser.NODEGROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public PartitionOptionNodeGroupContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionOptionNodeGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionOptionNodeGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionOptionNodeGroup(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
		public Token indexDirectory;
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(OpenDistroSqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionOptionIndexDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionOptionIndexDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMaxRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		public TerminalNode MAX_ROWS() { return getToken(OpenDistroSqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public PartitionOptionMaxRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionOptionMaxRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionOptionMaxRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionTablespaceContext extends PartitionOptionContext {
		public UidContext tablespace;
		public TerminalNode TABLESPACE() { return getToken(OpenDistroSqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public PartitionOptionTablespaceContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionOptionTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionOptionTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionEngineContext extends PartitionOptionContext {
		public TerminalNode ENGINE() { return getToken(OpenDistroSqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(OpenDistroSqlParser.STORAGE, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMinRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext minRows;
		public TerminalNode MIN_ROWS() { return getToken(OpenDistroSqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public PartitionOptionMinRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionOptionMinRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionOptionMinRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
		public Token dataDirectory;
		public TerminalNode DATA() { return getToken(OpenDistroSqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(OpenDistroSqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPartitionOptionDataDirectory(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPartitionOptionDataDirectory(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPartitionOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_partitionOption);
		int _la;
		try {
			setState(2019);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1975);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(1974);
					match(STORAGE);
					}
				}

				setState(1977);
				match(ENGINE);
				setState(1979);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1978);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1981);
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1982);
				match(COMMENT);
				setState(1984);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1983);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1986);
				((PartitionOptionCommentContext)_localctx).comment = match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1987);
				match(DATA);
				setState(1988);
				match(DIRECTORY);
				setState(1990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1989);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1992);
				((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1993);
				match(INDEX);
				setState(1994);
				match(DIRECTORY);
				setState(1996);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1995);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1998);
				((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1999);
				match(MAX_ROWS);
				setState(2001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2000);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2003);
				((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2004);
				match(MIN_ROWS);
				setState(2006);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2005);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2008);
				((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2009);
				match(TABLESPACE);
				setState(2011);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2010);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2013);
				((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2014);
				match(NODEGROUP);
				setState(2016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2015);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2018);
				((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
	 
		public AlterDatabaseContext() { }
		public void copyFrom(AlterDatabaseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUpgradeNameContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(OpenDistroSqlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode UPGRADE() { return getToken(OpenDistroSqlParser.UPGRADE, 0); }
		public TerminalNode DATA() { return getToken(OpenDistroSqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(OpenDistroSqlParser.DIRECTORY, 0); }
		public TerminalNode NAME() { return getToken(OpenDistroSqlParser.NAME, 0); }
		public TerminalNode DATABASE() { return getToken(OpenDistroSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(OpenDistroSqlParser.SCHEMA, 0); }
		public AlterUpgradeNameContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterUpgradeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterUpgradeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterUpgradeName(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterSimpleDatabaseContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(OpenDistroSqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(OpenDistroSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(OpenDistroSqlParser.SCHEMA, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterSimpleDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterSimpleDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterSimpleDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_alterDatabase);
		int _la;
		try {
			setState(2039);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2021);
				match(ALTER);
				setState(2022);
				((AlterSimpleDatabaseContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterSimpleDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2024);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
				case 1:
					{
					setState(2023);
					uid();
					}
					break;
				}
				setState(2027); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2026);
					createDatabaseOption();
					}
					}
					setState(2029); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==CHARSET );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2031);
				match(ALTER);
				setState(2032);
				((AlterUpgradeNameContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterUpgradeNameContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2033);
				uid();
				setState(2034);
				match(UPGRADE);
				setState(2035);
				match(DATA);
				setState(2036);
				match(DIRECTORY);
				setState(2037);
				match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OpenDistroSqlParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(OpenDistroSqlParser.EVENT, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(OpenDistroSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(OpenDistroSqlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(OpenDistroSqlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(OpenDistroSqlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(OpenDistroSqlParser.PRESERVE, 0); }
		public TerminalNode RENAME() { return getToken(OpenDistroSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(OpenDistroSqlParser.TO, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(OpenDistroSqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode DO() { return getToken(OpenDistroSqlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode NOT() { return getToken(OpenDistroSqlParser.NOT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventContext alterEvent() throws RecognitionException {
		AlterEventContext _localctx = new AlterEventContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_alterEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2041);
			match(ALTER);
			setState(2043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2042);
				ownerStatement();
				}
			}

			setState(2045);
			match(EVENT);
			setState(2046);
			fullId();
			setState(2050);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				{
				setState(2047);
				match(ON);
				setState(2048);
				match(SCHEDULE);
				setState(2049);
				scheduleExpression();
				}
				break;
			}
			setState(2058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2052);
				match(ON);
				setState(2053);
				match(COMPLETION);
				setState(2055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2054);
					match(NOT);
					}
				}

				setState(2057);
				match(PRESERVE);
				}
			}

			setState(2063);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				{
				setState(2060);
				match(RENAME);
				setState(2061);
				match(TO);
				setState(2062);
				fullId();
				}
				break;
			}
			setState(2066);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(2065);
				enableType();
				}
			}

			setState(2070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(2068);
				match(COMMENT);
				setState(2069);
				match(STRING_LITERAL);
				}
			}

			setState(2074);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DO) {
				{
				setState(2072);
				match(DO);
				setState(2073);
				routineBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OpenDistroSqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(OpenDistroSqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionContext alterFunction() throws RecognitionException {
		AlterFunctionContext _localctx = new AlterFunctionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alterFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2076);
			match(ALTER);
			setState(2077);
			match(FUNCTION);
			setState(2078);
			fullId();
			setState(2082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (MODIFIES - 97)) | (1L << (NOT - 97)) | (1L << (READS - 97)) | (1L << (SQL - 97)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2079);
				routineOption();
				}
				}
				setState(2084);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterInstanceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OpenDistroSqlParser.ALTER, 0); }
		public TerminalNode INSTANCE() { return getToken(OpenDistroSqlParser.INSTANCE, 0); }
		public TerminalNode ROTATE() { return getToken(OpenDistroSqlParser.ROTATE, 0); }
		public TerminalNode INNODB() { return getToken(OpenDistroSqlParser.INNODB, 0); }
		public TerminalNode MASTER() { return getToken(OpenDistroSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public AlterInstanceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterInstance; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterInstance(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterInstance(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterInstance(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterInstanceContext alterInstance() throws RecognitionException {
		AlterInstanceContext _localctx = new AlterInstanceContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_alterInstance);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2085);
			match(ALTER);
			setState(2086);
			match(INSTANCE);
			setState(2087);
			match(ROTATE);
			setState(2088);
			match(INNODB);
			setState(2089);
			match(MASTER);
			setState(2090);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OpenDistroSqlParser.ALTER, 0); }
		public TerminalNode LOGFILE() { return getToken(OpenDistroSqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(OpenDistroSqlParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(OpenDistroSqlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(OpenDistroSqlParser.UNDOFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(OpenDistroSqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(OpenDistroSqlParser.INITIAL_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(OpenDistroSqlParser.WAIT, 0); }
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_alterLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2092);
			match(ALTER);
			setState(2093);
			match(LOGFILE);
			setState(2094);
			match(GROUP);
			setState(2095);
			uid();
			setState(2096);
			match(ADD);
			setState(2097);
			match(UNDOFILE);
			setState(2098);
			match(STRING_LITERAL);
			setState(2104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2099);
				match(INITIAL_SIZE);
				setState(2101);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2100);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2103);
				fileSizeLiteral();
				}
			}

			setState(2107);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2106);
				match(WAIT);
				}
			}

			setState(2109);
			match(ENGINE);
			setState(2111);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2110);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2113);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OpenDistroSqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(OpenDistroSqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureContext alterProcedure() throws RecognitionException {
		AlterProcedureContext _localctx = new AlterProcedureContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_alterProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2115);
			match(ALTER);
			setState(2116);
			match(PROCEDURE);
			setState(2117);
			fullId();
			setState(2121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (MODIFIES - 97)) | (1L << (NOT - 97)) | (1L << (READS - 97)) | (1L << (SQL - 97)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2118);
				routineOption();
				}
				}
				setState(2123);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(OpenDistroSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(OpenDistroSqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(OpenDistroSqlParser.OPTIONS, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_alterServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2124);
			match(ALTER);
			setState(2125);
			match(SERVER);
			setState(2126);
			uid();
			setState(2127);
			match(OPTIONS);
			setState(2128);
			match(LR_BRACKET);
			setState(2129);
			serverOption();
			setState(2134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2130);
				match(COMMA);
				setState(2131);
				serverOption();
				}
				}
				setState(2136);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2137);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public Token intimeAction;
		public TerminalNode ALTER() { return getToken(OpenDistroSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(OpenDistroSqlParser.IGNORE, 0); }
		public List<AlterSpecificationContext> alterSpecification() {
			return getRuleContexts(AlterSpecificationContext.class);
		}
		public AlterSpecificationContext alterSpecification(int i) {
			return getRuleContext(AlterSpecificationContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode ONLINE() { return getToken(OpenDistroSqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(OpenDistroSqlParser.OFFLINE, 0); }
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2139);
			match(ALTER);
			setState(2141);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(2140);
				((AlterTableContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((AlterTableContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2144);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2143);
				match(IGNORE);
				}
			}

			setState(2146);
			match(TABLE);
			setState(2147);
			tableName();
			setState(2156);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				{
				setState(2148);
				alterSpecification();
				setState(2153);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2149);
					match(COMMA);
					setState(2150);
					alterSpecification();
					}
					}
					setState(2155);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2159);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2158);
				partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public Token objectAction;
		public TerminalNode ALTER() { return getToken(OpenDistroSqlParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(OpenDistroSqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATAFILE() { return getToken(OpenDistroSqlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(OpenDistroSqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(OpenDistroSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(OpenDistroSqlParser.INITIAL_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(OpenDistroSqlParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alterTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2161);
			match(ALTER);
			setState(2162);
			match(TABLESPACE);
			setState(2163);
			uid();
			setState(2164);
			((AlterTablespaceContext)_localctx).objectAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				((AlterTablespaceContext)_localctx).objectAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2165);
			match(DATAFILE);
			setState(2166);
			match(STRING_LITERAL);
			setState(2170);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2167);
				match(INITIAL_SIZE);
				setState(2168);
				match(EQUAL_SYMBOL);
				setState(2169);
				fileSizeLiteral();
				}
			}

			setState(2173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2172);
				match(WAIT);
				}
			}

			setState(2175);
			match(ENGINE);
			setState(2177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2176);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2179);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOpt;
		public TerminalNode ALTER() { return getToken(OpenDistroSqlParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(OpenDistroSqlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(OpenDistroSqlParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(OpenDistroSqlParser.ALGORITHM, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(OpenDistroSqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(OpenDistroSqlParser.SECURITY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(OpenDistroSqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(OpenDistroSqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(OpenDistroSqlParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(OpenDistroSqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(OpenDistroSqlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(OpenDistroSqlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(OpenDistroSqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(OpenDistroSqlParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(OpenDistroSqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(OpenDistroSqlParser.LOCAL, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alterView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2181);
			match(ALTER);
			setState(2185);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2182);
				match(ALGORITHM);
				setState(2183);
				match(EQUAL_SYMBOL);
				setState(2184);
				((AlterViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((AlterViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2187);
				ownerStatement();
				}
			}

			setState(2193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(2190);
				match(SQL);
				setState(2191);
				match(SECURITY);
				setState(2192);
				((AlterViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((AlterViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2195);
			match(VIEW);
			setState(2196);
			fullId();
			setState(2201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2197);
				match(LR_BRACKET);
				setState(2198);
				uidList();
				setState(2199);
				match(RR_BRACKET);
				}
			}

			setState(2203);
			match(AS);
			setState(2204);
			selectStatement();
			setState(2211);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2205);
				match(WITH);
				setState(2207);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(2206);
					((AlterViewContext)_localctx).checkOpt = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((AlterViewContext)_localctx).checkOpt = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2209);
				match(CHECK);
				setState(2210);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSpecificationContext extends ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSpecification; }
	 
		public AlterSpecificationContext() { }
		public void copyFrom(AlterSpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterByDisableKeysContext extends AlterSpecificationContext {
		public TerminalNode DISABLE() { return getToken(OpenDistroSqlParser.DISABLE, 0); }
		public TerminalNode KEYS() { return getToken(OpenDistroSqlParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByDisableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByDisableKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByDisableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDefaultCharsetContext extends AlterSpecificationContext {
		public TerminalNode CHARACTER() { return getToken(OpenDistroSqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(OpenDistroSqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByDefaultCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByDefaultCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByDefaultCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public TerminalNode RENAME() { return getToken(OpenDistroSqlParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(OpenDistroSqlParser.COLUMN, 0); }
		public TerminalNode TO() { return getToken(OpenDistroSqlParser.TO, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByRenameColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByRenameColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByRenameColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByRenameColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByConvertCharsetContext extends AlterSpecificationContext {
		public TerminalNode CONVERT() { return getToken(OpenDistroSqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(OpenDistroSqlParser.TO, 0); }
		public TerminalNode CHARACTER() { return getToken(OpenDistroSqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(OpenDistroSqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByConvertCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByConvertCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByConvertCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddPartitionContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(OpenDistroSqlParser.ADD, 0); }
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public AlterByAddPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByAddPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByAddPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByAddPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddForeignKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(OpenDistroSqlParser.ADD, 0); }
		public TerminalNode FOREIGN() { return getToken(OpenDistroSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(OpenDistroSqlParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByAddForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByAddForeignKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByAddForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode RENAME() { return getToken(OpenDistroSqlParser.RENAME, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode TO() { return getToken(OpenDistroSqlParser.TO, 0); }
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public AlterByRenameIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByRenameIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByRenameIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByRenameIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRemovePartitioningContext extends AlterSpecificationContext {
		public TerminalNode REMOVE() { return getToken(OpenDistroSqlParser.REMOVE, 0); }
		public TerminalNode PARTITIONING() { return getToken(OpenDistroSqlParser.PARTITIONING, 0); }
		public AlterByRemovePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByRemovePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByRemovePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByRemovePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRenameContext extends AlterSpecificationContext {
		public Token renameFormat;
		public TerminalNode RENAME() { return getToken(OpenDistroSqlParser.RENAME, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode TO() { return getToken(OpenDistroSqlParser.TO, 0); }
		public TerminalNode AS() { return getToken(OpenDistroSqlParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByRename(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByRename(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByRename(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByOptimizePartitionContext extends AlterSpecificationContext {
		public TerminalNode OPTIMIZE() { return getToken(OpenDistroSqlParser.OPTIMIZE, 0); }
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByOptimizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByOptimizePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByOptimizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByImportTablespaceContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(OpenDistroSqlParser.IMPORT, 0); }
		public TerminalNode TABLESPACE() { return getToken(OpenDistroSqlParser.TABLESPACE, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByImportTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByImportTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByImportTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByCoalescePartitionContext extends AlterSpecificationContext {
		public TerminalNode COALESCE() { return getToken(OpenDistroSqlParser.COALESCE, 0); }
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public AlterByCoalescePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByCoalescePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByCoalescePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByCoalescePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddColumnsContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(OpenDistroSqlParser.ADD, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<ColumnDefinitionContext> columnDefinition() {
			return getRuleContexts(ColumnDefinitionContext.class);
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return getRuleContext(ColumnDefinitionContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(OpenDistroSqlParser.COLUMN, 0); }
		public AlterByAddColumnsContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByAddColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByAddColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByAddColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropForeignKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(OpenDistroSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByDropForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByDropForeignKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByDropForeignKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByDropForeignKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {
		public UidContext name;
		public TerminalNode ADD() { return getToken(OpenDistroSqlParser.ADD, 0); }
		public TerminalNode CHECK() { return getToken(OpenDistroSqlParser.CHECK, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(OpenDistroSqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByAddCheckTableConstraintContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByAddCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByAddCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByAddCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRebuildPartitionContext extends AlterSpecificationContext {
		public TerminalNode REBUILD() { return getToken(OpenDistroSqlParser.REBUILD, 0); }
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByRebuildPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByRebuildPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByRebuildPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByUpgradePartitioningContext extends AlterSpecificationContext {
		public TerminalNode UPGRADE() { return getToken(OpenDistroSqlParser.UPGRADE, 0); }
		public TerminalNode PARTITIONING() { return getToken(OpenDistroSqlParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByUpgradePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByUpgradePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByUpgradePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByRepairPartitionContext extends AlterSpecificationContext {
		public TerminalNode REPAIR() { return getToken(OpenDistroSqlParser.REPAIR, 0); }
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByRepairPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByRepairPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByRepairPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByExchangePartitionContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode EXCHANGE() { return getToken(OpenDistroSqlParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(OpenDistroSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(OpenDistroSqlParser.WITH, i);
		}
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode VALIDATION() { return getToken(OpenDistroSqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(OpenDistroSqlParser.WITHOUT, 0); }
		public AlterByExchangePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByExchangePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByExchangePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByExchangePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(OpenDistroSqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public AlterByAddIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByAddIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByAddIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByAddIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropColumnContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(OpenDistroSqlParser.COLUMN, 0); }
		public TerminalNode RESTRICT() { return getToken(OpenDistroSqlParser.RESTRICT, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByDropColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByDropColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByDropColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByImportPartitionContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(OpenDistroSqlParser.IMPORT, 0); }
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(OpenDistroSqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByImportPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByImportPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByImportPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByChangeDefaultContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(OpenDistroSqlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(OpenDistroSqlParser.COLUMN, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByChangeDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByChangeDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByChangeDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByForceContext extends AlterSpecificationContext {
		public TerminalNode FORCE() { return getToken(OpenDistroSqlParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByForce(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByForce(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByForce(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropPartitionContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByDropPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByDropPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByDropPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByDropPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
		public Token keyType;
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(OpenDistroSqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(OpenDistroSqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(OpenDistroSqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByAddSpecialIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByAddSpecialIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByAddSpecialIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByModifyColumnContext extends AlterSpecificationContext {
		public TerminalNode MODIFY() { return getToken(OpenDistroSqlParser.MODIFY, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(OpenDistroSqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(OpenDistroSqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(OpenDistroSqlParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByModifyColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByModifyColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByModifyColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTableOptionContext extends AlterSpecificationContext {
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public AlterByTableOptionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByTableOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public TerminalNode PRIMARY() { return getToken(OpenDistroSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByDropPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByDropPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByDropPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByLockContext extends AlterSpecificationContext {
		public Token lockType;
		public TerminalNode LOCK() { return getToken(OpenDistroSqlParser.LOCK, 0); }
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(OpenDistroSqlParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(OpenDistroSqlParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(OpenDistroSqlParser.EXCLUSIVE, 0); }
		public AlterByLockContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByLock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByLock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByLock(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDiscardPartitionContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(OpenDistroSqlParser.DISCARD, 0); }
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(OpenDistroSqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByDiscardPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByDiscardPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByDiscardPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(OpenDistroSqlParser.DISCARD, 0); }
		public TerminalNode TABLESPACE() { return getToken(OpenDistroSqlParser.TABLESPACE, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByDiscardTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByDiscardTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByDiscardTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByValidateContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode VALIDATION() { return getToken(OpenDistroSqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(OpenDistroSqlParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(OpenDistroSqlParser.WITH, 0); }
		public AlterByValidateContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByValidate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByValidate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByValidate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public TerminalNode ADD() { return getToken(OpenDistroSqlParser.ADD, 0); }
		public TerminalNode PRIMARY() { return getToken(OpenDistroSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(OpenDistroSqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByAddPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByAddPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByAddPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByCheckPartitionContext extends AlterSpecificationContext {
		public TerminalNode CHECK() { return getToken(OpenDistroSqlParser.CHECK, 0); }
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByCheckPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByCheckPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByCheckPartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByEnableKeysContext extends AlterSpecificationContext {
		public TerminalNode ENABLE() { return getToken(OpenDistroSqlParser.ENABLE, 0); }
		public TerminalNode KEYS() { return getToken(OpenDistroSqlParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByEnableKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByEnableKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByEnableKeys(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByReorganizePartitionContext extends AlterSpecificationContext {
		public TerminalNode REORGANIZE() { return getToken(OpenDistroSqlParser.REORGANIZE, 0); }
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode INTO() { return getToken(OpenDistroSqlParser.INTO, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public AlterByReorganizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByReorganizePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByReorganizePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByReorganizePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterBySetAlgorithmContext extends AlterSpecificationContext {
		public Token algType;
		public TerminalNode ALGORITHM() { return getToken(OpenDistroSqlParser.ALGORITHM, 0); }
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public TerminalNode INPLACE() { return getToken(OpenDistroSqlParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(OpenDistroSqlParser.COPY, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterBySetAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterBySetAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterBySetAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAnalyzePartitionContext extends AlterSpecificationContext {
		public TerminalNode ANALYZE() { return getToken(OpenDistroSqlParser.ANALYZE, 0); }
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public AlterByAnalyzePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByAnalyzePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByAnalyzePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByAnalyzePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByChangeColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		public TerminalNode CHANGE() { return getToken(OpenDistroSqlParser.CHANGE, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(OpenDistroSqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(OpenDistroSqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(OpenDistroSqlParser.AFTER, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByChangeColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByChangeColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByChangeColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(OpenDistroSqlParser.ADD, 0); }
		public TerminalNode UNIQUE() { return getToken(OpenDistroSqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(OpenDistroSqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public AlterByAddUniqueKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByAddUniqueKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByAddUniqueKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByAddUniqueKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTruncatePartitionContext extends AlterSpecificationContext {
		public TerminalNode TRUNCATE() { return getToken(OpenDistroSqlParser.TRUNCATE, 0); }
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByTruncatePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByTruncatePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByTruncatePartition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByDropIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public AlterByDropIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByAddColumnContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(OpenDistroSqlParser.ADD, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(OpenDistroSqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(OpenDistroSqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(OpenDistroSqlParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByAddColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByAddColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByAddColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByOrderContext extends AlterSpecificationContext {
		public TerminalNode ORDER() { return getToken(OpenDistroSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(OpenDistroSqlParser.BY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByOrderContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterByOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterByOrder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterByOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSpecificationContext alterSpecification() throws RecognitionException {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alterSpecification);
		int _la;
		try {
			int _alt;
			setState(2568);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2213);
				tableOption();
				setState(2220);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,275,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2215);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2214);
							match(COMMA);
							}
						}

						setState(2217);
						tableOption();
						}
						} 
					}
					setState(2222);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,275,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2223);
				match(ADD);
				setState(2225);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2224);
					match(COLUMN);
					}
				}

				setState(2227);
				uid();
				setState(2228);
				columnDefinition();
				setState(2232);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2229);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2230);
					match(AFTER);
					setState(2231);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GRANT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case UNLOCK:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case FLUSH:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUSMINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2234);
				match(ADD);
				setState(2236);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2235);
					match(COLUMN);
					}
				}

				setState(2238);
				match(LR_BRACKET);
				setState(2239);
				uid();
				setState(2240);
				columnDefinition();
				setState(2247);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2241);
					match(COMMA);
					setState(2242);
					uid();
					setState(2243);
					columnDefinition();
					}
					}
					setState(2249);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2250);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2252);
				match(ADD);
				setState(2253);
				((AlterByAddIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
					{
					setState(2254);
					uid();
					}
				}

				setState(2258);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2257);
					indexType();
					}
				}

				setState(2260);
				indexColumnNames();
				setState(2264);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(2261);
					indexOption();
					}
					}
					setState(2266);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2267);
				match(ADD);
				setState(2272);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2268);
					match(CONSTRAINT);
					setState(2270);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
						{
						setState(2269);
						((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2274);
				match(PRIMARY);
				setState(2275);
				match(KEY);
				setState(2277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2276);
					indexType();
					}
				}

				setState(2279);
				indexColumnNames();
				setState(2283);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(2280);
					indexOption();
					}
					}
					setState(2285);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2286);
				match(ADD);
				setState(2291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2287);
					match(CONSTRAINT);
					setState(2289);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
						{
						setState(2288);
						((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2293);
				match(UNIQUE);
				setState(2295);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2294);
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2298);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
					{
					setState(2297);
					((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2301);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2300);
					indexType();
					}
				}

				setState(2303);
				indexColumnNames();
				setState(2307);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(2304);
					indexOption();
					}
					}
					setState(2309);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2310);
				match(ADD);
				setState(2311);
				((AlterByAddSpecialIndexContext)_localctx).keyType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2313);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2312);
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
					{
					setState(2315);
					uid();
					}
				}

				setState(2318);
				indexColumnNames();
				setState(2322);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==KEY_BLOCK_SIZE) {
					{
					{
					setState(2319);
					indexOption();
					}
					}
					setState(2324);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2325);
				match(ADD);
				setState(2330);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2326);
					match(CONSTRAINT);
					setState(2328);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
						{
						setState(2327);
						((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2332);
				match(FOREIGN);
				setState(2333);
				match(KEY);
				setState(2335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
					{
					setState(2334);
					((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2337);
				indexColumnNames();
				setState(2338);
				referenceDefinition();
				}
				break;
			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2340);
				match(ADD);
				setState(2345);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2341);
					match(CONSTRAINT);
					setState(2343);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
						{
						setState(2342);
						((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2347);
				match(CHECK);
				setState(2348);
				match(LR_BRACKET);
				setState(2349);
				expression(0);
				setState(2350);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2352);
				match(ALGORITHM);
				setState(2354);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2353);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2356);
				((AlterBySetAlgorithmContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2357);
				match(ALTER);
				setState(2359);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2358);
					match(COLUMN);
					}
				}

				setState(2361);
				uid();
				setState(2367);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(2362);
					match(SET);
					setState(2363);
					match(DEFAULT);
					setState(2364);
					defaultValue();
					}
					break;
				case DROP:
					{
					setState(2365);
					match(DROP);
					setState(2366);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2369);
				match(CHANGE);
				setState(2371);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2370);
					match(COLUMN);
					}
				}

				setState(2373);
				((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				setState(2374);
				((AlterByChangeColumnContext)_localctx).newColumn = uid();
				setState(2375);
				columnDefinition();
				setState(2379);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2376);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2377);
					match(AFTER);
					setState(2378);
					((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GRANT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case UNLOCK:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case FLUSH:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUSMINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2381);
				match(RENAME);
				setState(2382);
				match(COLUMN);
				setState(2383);
				((AlterByRenameColumnContext)_localctx).oldColumn = uid();
				setState(2384);
				match(TO);
				setState(2385);
				((AlterByRenameColumnContext)_localctx).newColumn = uid();
				}
				break;
			case 14:
				_localctx = new AlterByLockContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2387);
				match(LOCK);
				setState(2389);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2388);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2391);
				((AlterByLockContext)_localctx).lockType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2392);
				match(MODIFY);
				setState(2394);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2393);
					match(COLUMN);
					}
				}

				setState(2396);
				uid();
				setState(2397);
				columnDefinition();
				setState(2401);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2398);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2399);
					match(AFTER);
					setState(2400);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GRANT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case UNLOCK:
				case USE:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case FLUSH:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUSMINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2403);
				match(DROP);
				setState(2405);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2404);
					match(COLUMN);
					}
				}

				setState(2407);
				uid();
				setState(2409);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(2408);
					match(RESTRICT);
					}
				}

				}
				break;
			case 17:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2411);
				match(DROP);
				setState(2412);
				match(PRIMARY);
				setState(2413);
				match(KEY);
				}
				break;
			case 18:
				_localctx = new AlterByRenameIndexContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2414);
				match(RENAME);
				setState(2415);
				((AlterByRenameIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByRenameIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2416);
				uid();
				setState(2417);
				match(TO);
				setState(2418);
				uid();
				}
				break;
			case 19:
				_localctx = new AlterByDropIndexContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2420);
				match(DROP);
				setState(2421);
				((AlterByDropIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2422);
				uid();
				}
				break;
			case 20:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2423);
				match(DROP);
				setState(2424);
				match(FOREIGN);
				setState(2425);
				match(KEY);
				setState(2426);
				uid();
				}
				break;
			case 21:
				_localctx = new AlterByDisableKeysContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2427);
				match(DISABLE);
				setState(2428);
				match(KEYS);
				}
				break;
			case 22:
				_localctx = new AlterByEnableKeysContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2429);
				match(ENABLE);
				setState(2430);
				match(KEYS);
				}
				break;
			case 23:
				_localctx = new AlterByRenameContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2431);
				match(RENAME);
				setState(2433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==TO) {
					{
					setState(2432);
					((AlterByRenameContext)_localctx).renameFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2437);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
				case 1:
					{
					setState(2435);
					uid();
					}
					break;
				case 2:
					{
					setState(2436);
					fullId();
					}
					break;
				}
				}
				break;
			case 24:
				_localctx = new AlterByOrderContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2439);
				match(ORDER);
				setState(2440);
				match(BY);
				setState(2441);
				uidList();
				}
				break;
			case 25:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2442);
				match(CONVERT);
				setState(2443);
				match(TO);
				setState(2444);
				match(CHARACTER);
				setState(2445);
				match(SET);
				setState(2446);
				charsetName();
				setState(2449);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2447);
					match(COLLATE);
					setState(2448);
					collationName();
					}
				}

				}
				break;
			case 26:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2451);
					match(DEFAULT);
					}
				}

				setState(2454);
				match(CHARACTER);
				setState(2455);
				match(SET);
				setState(2456);
				match(EQUAL_SYMBOL);
				setState(2457);
				charsetName();
				setState(2461);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2458);
					match(COLLATE);
					setState(2459);
					match(EQUAL_SYMBOL);
					setState(2460);
					collationName();
					}
				}

				}
				break;
			case 27:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2463);
				match(DISCARD);
				setState(2464);
				match(TABLESPACE);
				}
				break;
			case 28:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2465);
				match(IMPORT);
				setState(2466);
				match(TABLESPACE);
				}
				break;
			case 29:
				_localctx = new AlterByForceContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2467);
				match(FORCE);
				}
				break;
			case 30:
				_localctx = new AlterByValidateContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2468);
				((AlterByValidateContext)_localctx).validationFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2469);
				match(VALIDATION);
				}
				break;
			case 31:
				_localctx = new AlterByAddPartitionContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2470);
				match(ADD);
				setState(2471);
				match(PARTITION);
				setState(2472);
				match(LR_BRACKET);
				setState(2473);
				partitionDefinition();
				setState(2478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2474);
					match(COMMA);
					setState(2475);
					partitionDefinition();
					}
					}
					setState(2480);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2481);
				match(RR_BRACKET);
				}
				break;
			case 32:
				_localctx = new AlterByDropPartitionContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2483);
				match(DROP);
				setState(2484);
				match(PARTITION);
				setState(2485);
				uidList();
				}
				break;
			case 33:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2486);
				match(DISCARD);
				setState(2487);
				match(PARTITION);
				setState(2490);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2488);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2489);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2492);
				match(TABLESPACE);
				}
				break;
			case 34:
				_localctx = new AlterByImportPartitionContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2493);
				match(IMPORT);
				setState(2494);
				match(PARTITION);
				setState(2497);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2495);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2496);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2499);
				match(TABLESPACE);
				}
				break;
			case 35:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2500);
				match(TRUNCATE);
				setState(2501);
				match(PARTITION);
				setState(2504);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2502);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2503);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 36:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2506);
				match(COALESCE);
				setState(2507);
				match(PARTITION);
				setState(2508);
				decimalLiteral();
				}
				break;
			case 37:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2509);
				match(REORGANIZE);
				setState(2510);
				match(PARTITION);
				setState(2511);
				uidList();
				setState(2512);
				match(INTO);
				setState(2513);
				match(LR_BRACKET);
				setState(2514);
				partitionDefinition();
				setState(2519);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2515);
					match(COMMA);
					setState(2516);
					partitionDefinition();
					}
					}
					setState(2521);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2522);
				match(RR_BRACKET);
				}
				break;
			case 38:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2524);
				match(EXCHANGE);
				setState(2525);
				match(PARTITION);
				setState(2526);
				uid();
				setState(2527);
				match(WITH);
				setState(2528);
				match(TABLE);
				setState(2529);
				tableName();
				setState(2532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(2530);
					((AlterByExchangePartitionContext)_localctx).validationFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2531);
					match(VALIDATION);
					}
				}

				}
				break;
			case 39:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2534);
				match(ANALYZE);
				setState(2535);
				match(PARTITION);
				setState(2538);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2536);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2537);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 40:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(2540);
				match(CHECK);
				setState(2541);
				match(PARTITION);
				setState(2544);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2542);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2543);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 41:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(2546);
				match(OPTIMIZE);
				setState(2547);
				match(PARTITION);
				setState(2550);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2548);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2549);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 42:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(2552);
				match(REBUILD);
				setState(2553);
				match(PARTITION);
				setState(2556);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2554);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2555);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 43:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(2558);
				match(REPAIR);
				setState(2559);
				match(PARTITION);
				setState(2562);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2560);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2561);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 44:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(2564);
				match(REMOVE);
				setState(2565);
				match(PARTITIONING);
				}
				break;
			case 45:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(2566);
				match(UPGRADE);
				setState(2567);
				match(PARTITIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(OpenDistroSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(OpenDistroSqlParser.SCHEMA, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDropDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_dropDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2570);
			match(DROP);
			setState(2571);
			((DropDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((DropDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2573);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2572);
				ifExists();
				}
			}

			setState(2575);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(OpenDistroSqlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDropEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDropEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDropEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropEventContext dropEvent() throws RecognitionException {
		DropEventContext _localctx = new DropEventContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_dropEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2577);
			match(DROP);
			setState(2578);
			match(EVENT);
			setState(2580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2579);
				ifExists();
				}
			}

			setState(2582);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token algType;
		public Token lockType;
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(OpenDistroSqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(OpenDistroSqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(OpenDistroSqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(OpenDistroSqlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(OpenDistroSqlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(OpenDistroSqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(OpenDistroSqlParser.OFFLINE, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(OpenDistroSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(OpenDistroSqlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(OpenDistroSqlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(OpenDistroSqlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(OpenDistroSqlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(OpenDistroSqlParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(OpenDistroSqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(OpenDistroSqlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(OpenDistroSqlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(OpenDistroSqlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(OpenDistroSqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(OpenDistroSqlParser.EXCLUSIVE, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_dropIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2584);
			match(DROP);
			setState(2585);
			match(INDEX);
			setState(2587);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				{
				setState(2586);
				((DropIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((DropIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2589);
			uid();
			setState(2590);
			match(ON);
			setState(2591);
			tableName();
			setState(2604);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,334,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2602);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(2592);
						match(ALGORITHM);
						setState(2594);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2593);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2596);
						((DropIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((DropIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(2597);
						match(LOCK);
						setState(2599);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2598);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2601);
						((DropIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((DropIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2606);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,334,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public TerminalNode LOGFILE() { return getToken(OpenDistroSqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(OpenDistroSqlParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(OpenDistroSqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDropLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDropLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDropLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_dropLogfileGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2607);
			match(DROP);
			setState(2608);
			match(LOGFILE);
			setState(2609);
			match(GROUP);
			setState(2610);
			uid();
			setState(2611);
			match(ENGINE);
			setState(2612);
			match(EQUAL_SYMBOL);
			setState(2613);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(OpenDistroSqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDropProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDropProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDropProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_dropProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2615);
			match(DROP);
			setState(2616);
			match(PROCEDURE);
			setState(2618);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2617);
				ifExists();
				}
			}

			setState(2620);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(OpenDistroSqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDropFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDropFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_dropFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2622);
			match(DROP);
			setState(2623);
			match(FUNCTION);
			setState(2625);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2624);
				ifExists();
				}
			}

			setState(2627);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(OpenDistroSqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDropServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDropServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDropServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_dropServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2629);
			match(DROP);
			setState(2630);
			match(SERVER);
			setState(2632);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2631);
				ifExists();
				}
			}

			setState(2634);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(OpenDistroSqlParser.TEMPORARY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(OpenDistroSqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(OpenDistroSqlParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2636);
			match(DROP);
			setState(2638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(2637);
				match(TEMPORARY);
				}
			}

			setState(2640);
			match(TABLE);
			setState(2642);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2641);
				ifExists();
				}
			}

			setState(2644);
			tables();
			setState(2646);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2645);
				((DropTableContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropTableContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTablespaceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(OpenDistroSqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(OpenDistroSqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public DropTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDropTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDropTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDropTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTablespaceContext dropTablespace() throws RecognitionException {
		DropTablespaceContext _localctx = new DropTablespaceContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_dropTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2648);
			match(DROP);
			setState(2649);
			match(TABLESPACE);
			setState(2650);
			uid();
			setState(2656);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(2651);
				match(ENGINE);
				setState(2653);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2652);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2655);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(OpenDistroSqlParser.TRIGGER, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDropTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDropTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDropTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_dropTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2658);
			match(DROP);
			setState(2659);
			match(TRIGGER);
			setState(2661);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2660);
				ifExists();
				}
			}

			setState(2663);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(OpenDistroSqlParser.VIEW, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(OpenDistroSqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(OpenDistroSqlParser.CASCADE, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDropView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2665);
			match(DROP);
			setState(2666);
			match(VIEW);
			setState(2668);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2667);
				ifExists();
				}
			}

			setState(2670);
			fullId();
			setState(2675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2671);
				match(COMMA);
				setState(2672);
				fullId();
				}
				}
				setState(2677);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2679);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2678);
				((DropViewContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropViewContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(OpenDistroSqlParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public List<RenameTableClauseContext> renameTableClause() {
			return getRuleContexts(RenameTableClauseContext.class);
		}
		public RenameTableClauseContext renameTableClause(int i) {
			return getRuleContext(RenameTableClauseContext.class,i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRenameTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRenameTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRenameTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableContext renameTable() throws RecognitionException {
		RenameTableContext _localctx = new RenameTableContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_renameTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2681);
			match(RENAME);
			setState(2682);
			match(TABLE);
			setState(2683);
			renameTableClause();
			setState(2688);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2684);
				match(COMMA);
				setState(2685);
				renameTableClause();
				}
				}
				setState(2690);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableClauseContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(OpenDistroSqlParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRenameTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRenameTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRenameTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableClauseContext renameTableClause() throws RecognitionException {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_renameTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2691);
			tableName();
			setState(2692);
			match(TO);
			setState(2693);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(OpenDistroSqlParser.TRUNCATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2695);
			match(TRUNCATE);
			setState(2697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(2696);
				match(TABLE);
				}
			}

			setState(2699);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(OpenDistroSqlParser.CALL, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCallStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCallStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCallStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_callStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2701);
			match(CALL);
			setState(2702);
			fullId();
			setState(2709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2703);
				match(LR_BRACKET);
				setState(2706);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
				case 1:
					{
					setState(2704);
					constants();
					}
					break;
				case 2:
					{
					setState(2705);
					expressions();
					}
					break;
				}
				setState(2708);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public SingleDeleteStatementContext singleDeleteStatement() {
			return getRuleContext(SingleDeleteStatementContext.class,0);
		}
		public MultipleDeleteStatementContext multipleDeleteStatement() {
			return getRuleContext(MultipleDeleteStatementContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_deleteStatement);
		try {
			setState(2713);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2711);
				singleDeleteStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2712);
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(OpenDistroSqlParser.DO, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2715);
			match(DO);
			setState(2716);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public HandlerOpenStatementContext handlerOpenStatement() {
			return getRuleContext(HandlerOpenStatementContext.class,0);
		}
		public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return getRuleContext(HandlerReadIndexStatementContext.class,0);
		}
		public HandlerReadStatementContext handlerReadStatement() {
			return getRuleContext(HandlerReadStatementContext.class,0);
		}
		public HandlerCloseStatementContext handlerCloseStatement() {
			return getRuleContext(HandlerCloseStatementContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterHandlerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitHandlerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitHandlerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_handlerStatement);
		try {
			setState(2722);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2718);
				handlerOpenStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2719);
				handlerReadIndexStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2720);
				handlerReadStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2721);
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public List<UpdatedElementContext> duplicatedElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode INSERT() { return getToken(OpenDistroSqlParser.INSERT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public TerminalNode IGNORE() { return getToken(OpenDistroSqlParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(OpenDistroSqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode ON() { return getToken(OpenDistroSqlParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(OpenDistroSqlParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(OpenDistroSqlParser.UPDATE, 0); }
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(OpenDistroSqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(OpenDistroSqlParser.DELAYED, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(OpenDistroSqlParser.HIGH_PRIORITY, 0); }
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitInsertStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2724);
			match(INSERT);
			setState(2726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (DELAYED - 38)) | (1L << (HIGH_PRIORITY - 38)) | (1L << (LOW_PRIORITY - 38)))) != 0)) {
				{
				setState(2725);
				((InsertStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 38)) & ~0x3f) == 0 && ((1L << (_la - 38)) & ((1L << (DELAYED - 38)) | (1L << (HIGH_PRIORITY - 38)) | (1L << (LOW_PRIORITY - 38)))) != 0)) ) {
					((InsertStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2729);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2728);
				match(IGNORE);
				}
			}

			setState(2732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2731);
				match(INTO);
				}
			}

			setState(2734);
			tableName();
			setState(2740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2735);
				match(PARTITION);
				setState(2736);
				match(LR_BRACKET);
				setState(2737);
				((InsertStatementContext)_localctx).partitions = uidList();
				setState(2738);
				match(RR_BRACKET);
				}
			}

			setState(2758);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(2746);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
				case 1:
					{
					setState(2742);
					match(LR_BRACKET);
					setState(2743);
					((InsertStatementContext)_localctx).columns = uidList();
					setState(2744);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2748);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(2749);
				match(SET);
				setState(2750);
				((InsertStatementContext)_localctx).setFirst = updatedElement();
				setState(2755);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2751);
					match(COMMA);
					setState(2752);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).setElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(2757);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2760);
				match(ON);
				setState(2761);
				match(DUPLICATE);
				setState(2762);
				match(KEY);
				setState(2763);
				match(UPDATE);
				setState(2764);
				((InsertStatementContext)_localctx).duplicatedFirst = updatedElement();
				setState(2769);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2765);
					match(COMMA);
					setState(2766);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).duplicatedElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(2771);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(OpenDistroSqlParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(OpenDistroSqlParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(OpenDistroSqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(OpenDistroSqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL() { return getToken(OpenDistroSqlParser.LOCAL, 0); }
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(OpenDistroSqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(OpenDistroSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(OpenDistroSqlParser.SET, i);
		}
		public List<TerminalNode> LINES() { return getTokens(OpenDistroSqlParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(OpenDistroSqlParser.LINES, i);
		}
		public List<TerminalNode> IGNORE() { return getTokens(OpenDistroSqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(OpenDistroSqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(OpenDistroSqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(OpenDistroSqlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(OpenDistroSqlParser.REPLACE, 0); }
		public TerminalNode FIELDS() { return getToken(OpenDistroSqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(OpenDistroSqlParser.COLUMNS, 0); }
		public TerminalNode ROWS() { return getToken(OpenDistroSqlParser.ROWS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLoadDataStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLoadDataStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLoadDataStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataStatementContext loadDataStatement() throws RecognitionException {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_loadDataStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2774);
			match(LOAD);
			setState(2775);
			match(DATA);
			setState(2777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(2776);
				((LoadDataStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadDataStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2780);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2779);
				match(LOCAL);
				}
			}

			setState(2782);
			match(INFILE);
			setState(2783);
			((LoadDataStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(2785);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2784);
				((LoadDataStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadDataStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2787);
			match(INTO);
			setState(2788);
			match(TABLE);
			setState(2789);
			tableName();
			setState(2795);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2790);
				match(PARTITION);
				setState(2791);
				match(LR_BRACKET);
				setState(2792);
				uidList();
				setState(2793);
				match(RR_BRACKET);
				}
			}

			setState(2800);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2797);
				match(CHARACTER);
				setState(2798);
				match(SET);
				setState(2799);
				((LoadDataStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(2808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				setState(2802);
				((LoadDataStatementContext)_localctx).fieldsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((LoadDataStatementContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2804); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2803);
					selectFieldsInto();
					}
					}
					setState(2806); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			setState(2816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES) {
				{
				setState(2810);
				match(LINES);
				setState(2812); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2811);
					selectLinesInto();
					}
					}
					setState(2814); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			setState(2822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2818);
				match(IGNORE);
				setState(2819);
				decimalLiteral();
				setState(2820);
				((LoadDataStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadDataStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2824);
				match(LR_BRACKET);
				setState(2825);
				assignmentField();
				setState(2830);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2826);
					match(COMMA);
					setState(2827);
					assignmentField();
					}
					}
					setState(2832);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2833);
				match(RR_BRACKET);
				}
			}

			setState(2846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2837);
				match(SET);
				setState(2838);
				updatedElement();
				setState(2843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2839);
					match(COMMA);
					setState(2840);
					updatedElement();
					}
					}
					setState(2845);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadXmlStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token tag;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(OpenDistroSqlParser.LOAD, 0); }
		public TerminalNode XML() { return getToken(OpenDistroSqlParser.XML, 0); }
		public TerminalNode INFILE() { return getToken(OpenDistroSqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(OpenDistroSqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(OpenDistroSqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(OpenDistroSqlParser.STRING_LITERAL, i);
		}
		public TerminalNode LOCAL() { return getToken(OpenDistroSqlParser.LOCAL, 0); }
		public TerminalNode CHARACTER() { return getToken(OpenDistroSqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(OpenDistroSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(OpenDistroSqlParser.SET, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(OpenDistroSqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(OpenDistroSqlParser.ROWS, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(OpenDistroSqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(OpenDistroSqlParser.BY, 0); }
		public List<TerminalNode> IGNORE() { return getTokens(OpenDistroSqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(OpenDistroSqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(OpenDistroSqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(OpenDistroSqlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(OpenDistroSqlParser.REPLACE, 0); }
		public TerminalNode LINES() { return getToken(OpenDistroSqlParser.LINES, 0); }
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadXmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLoadXmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLoadXmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLoadXmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadXmlStatementContext loadXmlStatement() throws RecognitionException {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_loadXmlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2848);
			match(LOAD);
			setState(2849);
			match(XML);
			setState(2851);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(2850);
				((LoadXmlStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadXmlStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2853);
				match(LOCAL);
				}
			}

			setState(2856);
			match(INFILE);
			setState(2857);
			((LoadXmlStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(2859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2858);
				((LoadXmlStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadXmlStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2861);
			match(INTO);
			setState(2862);
			match(TABLE);
			setState(2863);
			tableName();
			setState(2867);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2864);
				match(CHARACTER);
				setState(2865);
				match(SET);
				setState(2866);
				((LoadXmlStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(2875);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS) {
				{
				setState(2869);
				match(ROWS);
				setState(2870);
				match(IDENTIFIED);
				setState(2871);
				match(BY);
				setState(2872);
				match(LESS_SYMBOL);
				setState(2873);
				((LoadXmlStatementContext)_localctx).tag = match(STRING_LITERAL);
				setState(2874);
				match(GREATER_SYMBOL);
				}
			}

			setState(2881);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2877);
				match(IGNORE);
				setState(2878);
				decimalLiteral();
				setState(2879);
				((LoadXmlStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadXmlStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2883);
				match(LR_BRACKET);
				setState(2884);
				assignmentField();
				setState(2889);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2885);
					match(COMMA);
					setState(2886);
					assignmentField();
					}
					}
					setState(2891);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2892);
				match(RR_BRACKET);
				}
			}

			setState(2905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2896);
				match(SET);
				setState(2897);
				updatedElement();
				setState(2902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2898);
					match(COMMA);
					setState(2899);
					updatedElement();
					}
					}
					setState(2904);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode REPLACE() { return getToken(OpenDistroSqlParser.REPLACE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public TerminalNode INTO() { return getToken(OpenDistroSqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(OpenDistroSqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(OpenDistroSqlParser.DELAYED, 0); }
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterReplaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitReplaceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitReplaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2907);
			match(REPLACE);
			setState(2909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				setState(2908);
				((ReplaceStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					((ReplaceStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2911);
				match(INTO);
				}
			}

			setState(2914);
			tableName();
			setState(2920);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2915);
				match(PARTITION);
				setState(2916);
				match(LR_BRACKET);
				setState(2917);
				((ReplaceStatementContext)_localctx).partitions = uidList();
				setState(2918);
				match(RR_BRACKET);
				}
			}

			setState(2938);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(2926);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
				case 1:
					{
					setState(2922);
					match(LR_BRACKET);
					setState(2923);
					((ReplaceStatementContext)_localctx).columns = uidList();
					setState(2924);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2928);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(2929);
				match(SET);
				setState(2930);
				((ReplaceStatementContext)_localctx).setFirst = updatedElement();
				setState(2935);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2931);
					match(COMMA);
					setState(2932);
					((ReplaceStatementContext)_localctx).updatedElement = updatedElement();
					((ReplaceStatementContext)_localctx).setElements.add(((ReplaceStatementContext)_localctx).updatedElement);
					}
					}
					setState(2937);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	 
		public SelectStatementContext() { }
		public void copyFrom(SelectStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnionSelectContext extends SelectStatementContext {
		public Token unionType;
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public List<UnionStatementContext> unionStatement() {
			return getRuleContexts(UnionStatementContext.class);
		}
		public UnionStatementContext unionStatement(int i) {
			return getRuleContext(UnionStatementContext.class,i);
		}
		public TerminalNode UNION() { return getToken(OpenDistroSqlParser.UNION, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(OpenDistroSqlParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUnionSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUnionSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUnionSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnionParenthesisSelectContext extends SelectStatementContext {
		public Token unionType;
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public List<UnionParenthesisContext> unionParenthesis() {
			return getRuleContexts(UnionParenthesisContext.class);
		}
		public UnionParenthesisContext unionParenthesis(int i) {
			return getRuleContext(UnionParenthesisContext.class,i);
		}
		public TerminalNode UNION() { return getToken(OpenDistroSqlParser.UNION, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(OpenDistroSqlParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUnionParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUnionParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUnionParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleSelectContext extends SelectStatementContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public SimpleSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSimpleSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenthesisSelectContext extends SelectStatementContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public ParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			setState(2995);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2940);
				querySpecification();
				setState(2942);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
				case 1:
					{
					setState(2941);
					lockClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2944);
				queryExpression();
				setState(2946);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
				case 1:
					{
					setState(2945);
					lockClause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2948);
				querySpecificationNointo();
				setState(2950); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2949);
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2952); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,394,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2962);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(2954);
					match(UNION);
					setState(2956);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(2955);
						((UnionSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(2960);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELECT:
						{
						setState(2958);
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						setState(2959);
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(2965);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2964);
					orderByClause();
					}
				}

				setState(2968);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(2967);
					limitClause();
					}
				}

				setState(2971);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
				case 1:
					{
					setState(2970);
					lockClause();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2973);
				queryExpressionNointo();
				setState(2975); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2974);
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2977); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,401,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2984);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(2979);
					match(UNION);
					setState(2981);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(2980);
						((UnionParenthesisSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(2983);
					queryExpression();
					}
				}

				setState(2987);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2986);
					orderByClause();
					}
				}

				setState(2990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(2989);
					limitClause();
					}
				}

				setState(2993);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
				case 1:
					{
					setState(2992);
					lockClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public SingleUpdateStatementContext singleUpdateStatement() {
			return getRuleContext(SingleUpdateStatementContext.class,0);
		}
		public MultipleUpdateStatementContext multipleUpdateStatement() {
			return getRuleContext(MultipleUpdateStatementContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_updateStatement);
		try {
			setState(2999);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2997);
				singleUpdateStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2998);
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementValueContext extends ParserRuleContext {
		public Token insertFormat;
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
			return getRuleContexts(ExpressionsWithDefaultsContext.class);
		}
		public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return getRuleContext(ExpressionsWithDefaultsContext.class,i);
		}
		public TerminalNode VALUES() { return getToken(OpenDistroSqlParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(OpenDistroSqlParser.VALUE, 0); }
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatementValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterInsertStatementValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitInsertStatementValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitInsertStatementValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementValueContext insertStatementValue() throws RecognitionException {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_insertStatementValue);
		int _la;
		try {
			setState(3016);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(3001);
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3002);
				((InsertStatementValueContext)_localctx).insertFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					((InsertStatementValueContext)_localctx).insertFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3003);
				match(LR_BRACKET);
				setState(3004);
				expressionsWithDefaults();
				setState(3005);
				match(RR_BRACKET);
				setState(3013);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3006);
					match(COMMA);
					setState(3007);
					match(LR_BRACKET);
					setState(3008);
					expressionsWithDefaults();
					setState(3009);
					match(RR_BRACKET);
					}
					}
					setState(3015);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdatedElementContext extends ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatedElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUpdatedElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUpdatedElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUpdatedElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdatedElementContext updatedElement() throws RecognitionException {
		UpdatedElementContext _localctx = new UpdatedElementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_updatedElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3018);
			fullColumnName();
			setState(3019);
			match(EQUAL_SYMBOL);
			setState(3022);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT_USER:
			case DATABASE:
			case EXISTS:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case REPLACE:
			case RIGHT:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case CHARSET_REVERSE_QOUTE_STRING:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				setState(3020);
				expression(0);
				}
				break;
			case DEFAULT:
				{
				setState(3021);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentFieldContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(OpenDistroSqlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAssignmentField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAssignmentField(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAssignmentField(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentFieldContext assignmentField() throws RecognitionException {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_assignmentField);
		try {
			setState(3026);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3024);
				uid();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3025);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(OpenDistroSqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(OpenDistroSqlParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(OpenDistroSqlParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(OpenDistroSqlParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(OpenDistroSqlParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(OpenDistroSqlParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLockClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLockClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLockClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_lockClause);
		try {
			setState(3034);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3028);
				match(FOR);
				setState(3029);
				match(UPDATE);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(3030);
				match(LOCK);
				setState(3031);
				match(IN);
				setState(3032);
				match(SHARE);
				setState(3033);
				match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(OpenDistroSqlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(OpenDistroSqlParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(OpenDistroSqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(OpenDistroSqlParser.IGNORE, 0); }
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(OpenDistroSqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(OpenDistroSqlParser.LIMIT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(OpenDistroSqlParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSingleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSingleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSingleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleDeleteStatementContext singleDeleteStatement() throws RecognitionException {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_singleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3036);
			match(DELETE);
			setState(3038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3037);
				((SingleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3041);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(3040);
				match(QUICK);
				}
			}

			setState(3044);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3043);
				match(IGNORE);
				}
			}

			setState(3046);
			match(FROM);
			setState(3047);
			tableName();
			setState(3053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3048);
				match(PARTITION);
				setState(3049);
				match(LR_BRACKET);
				setState(3050);
				uidList();
				setState(3051);
				match(RR_BRACKET);
				}
			}

			setState(3057);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3055);
				match(WHERE);
				setState(3056);
				expression(0);
				}
			}

			setState(3060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3059);
				orderByClause();
				}
			}

			setState(3064);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3062);
				match(LIMIT);
				setState(3063);
				decimalLiteral();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(OpenDistroSqlParser.DELETE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(OpenDistroSqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode USING() { return getToken(OpenDistroSqlParser.USING, 0); }
		public TerminalNode QUICK() { return getToken(OpenDistroSqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(OpenDistroSqlParser.IGNORE, 0); }
		public TerminalNode WHERE() { return getToken(OpenDistroSqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(OpenDistroSqlParser.LOW_PRIORITY, 0); }
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterMultipleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitMultipleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitMultipleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleDeleteStatementContext multipleDeleteStatement() throws RecognitionException {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_multipleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3066);
			match(DELETE);
			setState(3068);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3067);
				((MultipleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3071);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				setState(3070);
				match(QUICK);
				}
				break;
			}
			setState(3074);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3073);
				match(IGNORE);
				}
			}

			setState(3115);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(3076);
				tableName();
				setState(3079);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3077);
					match(DOT);
					setState(3078);
					match(STAR);
					}
				}

				setState(3089);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3081);
					match(COMMA);
					setState(3082);
					tableName();
					setState(3085);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3083);
						match(DOT);
						setState(3084);
						match(STAR);
						}
					}

					}
					}
					setState(3091);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3092);
				match(FROM);
				setState(3093);
				tableSources();
				}
				break;
			case FROM:
				{
				setState(3095);
				match(FROM);
				setState(3096);
				tableName();
				setState(3099);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3097);
					match(DOT);
					setState(3098);
					match(STAR);
					}
				}

				setState(3109);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3101);
					match(COMMA);
					setState(3102);
					tableName();
					setState(3105);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3103);
						match(DOT);
						setState(3104);
						match(STAR);
						}
					}

					}
					}
					setState(3111);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3112);
				match(USING);
				setState(3113);
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3119);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3117);
				match(WHERE);
				setState(3118);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerOpenStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(OpenDistroSqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(OpenDistroSqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(OpenDistroSqlParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerOpenStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterHandlerOpenStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitHandlerOpenStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitHandlerOpenStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerOpenStatementContext handlerOpenStatement() throws RecognitionException {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_handlerOpenStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3121);
			match(HANDLER);
			setState(3122);
			tableName();
			setState(3123);
			match(OPEN);
			setState(3128);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
				{
				setState(3125);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3124);
					match(AS);
					}
				}

				setState(3127);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadIndexStatementContext extends ParserRuleContext {
		public UidContext index;
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(OpenDistroSqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(OpenDistroSqlParser.READ, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(OpenDistroSqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(OpenDistroSqlParser.LIMIT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(OpenDistroSqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(OpenDistroSqlParser.NEXT, 0); }
		public TerminalNode PREV() { return getToken(OpenDistroSqlParser.PREV, 0); }
		public TerminalNode LAST() { return getToken(OpenDistroSqlParser.LAST, 0); }
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterHandlerReadIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitHandlerReadIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitHandlerReadIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadIndexStatementContext handlerReadIndexStatement() throws RecognitionException {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_handlerReadIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3130);
			match(HANDLER);
			setState(3131);
			tableName();
			setState(3132);
			match(READ);
			setState(3133);
			((HandlerReadIndexStatementContext)_localctx).index = uid();
			setState(3140);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				setState(3134);
				comparisonOperator();
				setState(3135);
				match(LR_BRACKET);
				setState(3136);
				constants();
				setState(3137);
				match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				setState(3139);
				((HandlerReadIndexStatementContext)_localctx).moveOrder = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					((HandlerReadIndexStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3144);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3142);
				match(WHERE);
				setState(3143);
				expression(0);
				}
			}

			setState(3148);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3146);
				match(LIMIT);
				setState(3147);
				decimalLiteral();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadStatementContext extends ParserRuleContext {
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(OpenDistroSqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(OpenDistroSqlParser.READ, 0); }
		public TerminalNode FIRST() { return getToken(OpenDistroSqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(OpenDistroSqlParser.NEXT, 0); }
		public TerminalNode WHERE() { return getToken(OpenDistroSqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(OpenDistroSqlParser.LIMIT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterHandlerReadStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitHandlerReadStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitHandlerReadStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadStatementContext handlerReadStatement() throws RecognitionException {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_handlerReadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3150);
			match(HANDLER);
			setState(3151);
			tableName();
			setState(3152);
			match(READ);
			setState(3153);
			((HandlerReadStatementContext)_localctx).moveOrder = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				((HandlerReadStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3154);
				match(WHERE);
				setState(3155);
				expression(0);
				}
			}

			setState(3160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3158);
				match(LIMIT);
				setState(3159);
				decimalLiteral();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerCloseStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(OpenDistroSqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(OpenDistroSqlParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCloseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterHandlerCloseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitHandlerCloseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitHandlerCloseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerCloseStatementContext handlerCloseStatement() throws RecognitionException {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_handlerCloseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3162);
			match(HANDLER);
			setState(3163);
			tableName();
			setState(3164);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(OpenDistroSqlParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(OpenDistroSqlParser.IGNORE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(OpenDistroSqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(OpenDistroSqlParser.LOW_PRIORITY, 0); }
		public TerminalNode AS() { return getToken(OpenDistroSqlParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSingleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSingleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSingleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleUpdateStatementContext singleUpdateStatement() throws RecognitionException {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_singleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3166);
			match(UPDATE);
			setState(3168);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3167);
				((SingleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3170);
				match(IGNORE);
				}
			}

			setState(3173);
			tableName();
			setState(3178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
				{
				setState(3175);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3174);
					match(AS);
					}
				}

				setState(3177);
				uid();
				}
			}

			setState(3180);
			match(SET);
			setState(3181);
			updatedElement();
			setState(3186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3182);
				match(COMMA);
				setState(3183);
				updatedElement();
				}
				}
				setState(3188);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3189);
				match(WHERE);
				setState(3190);
				expression(0);
				}
			}

			setState(3194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3193);
				orderByClause();
				}
			}

			setState(3197);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3196);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(OpenDistroSqlParser.UPDATE, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(OpenDistroSqlParser.IGNORE, 0); }
		public TerminalNode WHERE() { return getToken(OpenDistroSqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(OpenDistroSqlParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterMultipleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitMultipleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitMultipleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleUpdateStatementContext multipleUpdateStatement() throws RecognitionException {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_multipleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3199);
			match(UPDATE);
			setState(3201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3200);
				((MultipleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3203);
				match(IGNORE);
				}
			}

			setState(3206);
			tableSources();
			setState(3207);
			match(SET);
			setState(3208);
			updatedElement();
			setState(3213);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3209);
				match(COMMA);
				setState(3210);
				updatedElement();
				}
				}
				setState(3215);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3216);
				match(WHERE);
				setState(3217);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(OpenDistroSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(OpenDistroSqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3220);
			match(ORDER);
			setState(3221);
			match(BY);
			setState(3222);
			orderByExpression();
			setState(3227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3223);
				match(COMMA);
				setState(3224);
				orderByExpression();
				}
				}
				setState(3229);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByExpressionContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(OpenDistroSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(OpenDistroSqlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterOrderByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitOrderByExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitOrderByExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_orderByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3230);
			expression(0);
			setState(3232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				{
				setState(3231);
				((OrderByExpressionContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderByExpressionContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourcesContext extends ParserRuleContext {
		public List<TableSourceContext> tableSource() {
			return getRuleContexts(TableSourceContext.class);
		}
		public TableSourceContext tableSource(int i) {
			return getRuleContext(TableSourceContext.class,i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableSources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableSources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableSources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourcesContext tableSources() throws RecognitionException {
		TableSourcesContext _localctx = new TableSourcesContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_tableSources);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3234);
			tableSource();
			setState(3239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3235);
				match(COMMA);
				setState(3236);
				tableSource();
				}
				}
				setState(3241);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceContext extends ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
	 
		public TableSourceContext() { }
		public void copyFrom(TableSourceContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableSourceNestedContext extends TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceNestedContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableSourceNested(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableSourceNested(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableSourceNested(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourceBaseContext extends TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceBaseContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableSourceBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableSourceBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableSourceBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_tableSource);
		int _la;
		try {
			int _alt;
			setState(3259);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3242);
				tableSourceItem();
				setState(3246);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,454,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3243);
						joinPart();
						}
						} 
					}
					setState(3248);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,454,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3249);
				match(LR_BRACKET);
				setState(3250);
				tableSourceItem();
				setState(3254);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 31)) & ~0x3f) == 0 && ((1L << (_la - 31)) & ((1L << (CROSS - 31)) | (1L << (INNER - 31)) | (1L << (JOIN - 31)) | (1L << (LEFT - 31)))) != 0) || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & ((1L << (NATURAL - 98)) | (1L << (RIGHT - 98)) | (1L << (STRAIGHT_JOIN - 98)))) != 0)) {
					{
					{
					setState(3251);
					joinPart();
					}
					}
					setState(3256);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3257);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceItemContext extends ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceItem; }
	 
		public TableSourceItemContext() { }
		public void copyFrom(TableSourceItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryTableItemContext extends TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode AS() { return getToken(OpenDistroSqlParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSubqueryTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSubqueryTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSubqueryTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtomTableItemContext extends TableSourceItemContext {
		public UidContext alias;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(OpenDistroSqlParser.AS, 0); }
		public AtomTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAtomTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAtomTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAtomTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourcesItemContext extends TableSourceItemContext {
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TableSourcesItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableSourcesItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableSourcesItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableSourcesItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceItemContext tableSourceItem() throws RecognitionException {
		TableSourceItemContext _localctx = new TableSourceItemContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			setState(3301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3261);
				tableName();
				setState(3267);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(3262);
					match(PARTITION);
					setState(3263);
					match(LR_BRACKET);
					setState(3264);
					uidList();
					setState(3265);
					match(RR_BRACKET);
					}
				}

				setState(3273);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
				case 1:
					{
					setState(3270);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3269);
						match(AS);
						}
					}

					setState(3272);
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				setState(3283);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
				case 1:
					{
					setState(3275);
					indexHint();
					setState(3280);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,460,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3276);
							match(COMMA);
							setState(3277);
							indexHint();
							}
							} 
						}
						setState(3282);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,460,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3290);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
				case 1:
					{
					setState(3285);
					selectStatement();
					}
					break;
				case 2:
					{
					setState(3286);
					match(LR_BRACKET);
					setState(3287);
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					setState(3288);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3293);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3292);
					match(AS);
					}
				}

				setState(3295);
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3297);
				match(LR_BRACKET);
				setState(3298);
				tableSources();
				setState(3299);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public Token indexHintAction;
		public Token keyFormat;
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode USE() { return getToken(OpenDistroSqlParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(OpenDistroSqlParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(OpenDistroSqlParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(OpenDistroSqlParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIndexHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIndexHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_indexHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3303);
			((IndexHintContext)_localctx).indexHintAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				((IndexHintContext)_localctx).indexHintAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3304);
			((IndexHintContext)_localctx).keyFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				((IndexHintContext)_localctx).keyFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3307);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3305);
				match(FOR);
				setState(3306);
				indexHintType();
				}
			}

			setState(3309);
			match(LR_BRACKET);
			setState(3310);
			uidList();
			setState(3311);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(OpenDistroSqlParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(OpenDistroSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(OpenDistroSqlParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(OpenDistroSqlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIndexHintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIndexHintType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIndexHintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_indexHintType);
		try {
			setState(3318);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3313);
				match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3314);
				match(ORDER);
				setState(3315);
				match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3316);
				match(GROUP);
				setState(3317);
				match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinPartContext extends ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPart; }
	 
		public JoinPartContext() { }
		public void copyFrom(JoinPartContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class InnerJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(OpenDistroSqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(OpenDistroSqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(OpenDistroSqlParser.USING, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode INNER() { return getToken(OpenDistroSqlParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(OpenDistroSqlParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitInnerJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitInnerJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NaturalJoinContext extends JoinPartContext {
		public TerminalNode NATURAL() { return getToken(OpenDistroSqlParser.NATURAL, 0); }
		public TerminalNode JOIN() { return getToken(OpenDistroSqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(OpenDistroSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(OpenDistroSqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(OpenDistroSqlParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterNaturalJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitNaturalJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitNaturalJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OuterJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(OpenDistroSqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(OpenDistroSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(OpenDistroSqlParser.RIGHT, 0); }
		public TerminalNode ON() { return getToken(OpenDistroSqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(OpenDistroSqlParser.USING, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode OUTER() { return getToken(OpenDistroSqlParser.OUTER, 0); }
		public OuterJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterOuterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitOuterJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitOuterJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StraightJoinContext extends JoinPartContext {
		public TerminalNode STRAIGHT_JOIN() { return getToken(OpenDistroSqlParser.STRAIGHT_JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(OpenDistroSqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public StraightJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterStraightJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitStraightJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitStraightJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinPartContext joinPart() throws RecognitionException {
		JoinPartContext _localctx = new JoinPartContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_joinPart);
		int _la;
		try {
			setState(3364);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3321);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					setState(3320);
					_la = _input.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3323);
				match(JOIN);
				setState(3324);
				tableSourceItem();
				setState(3332);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
				case 1:
					{
					setState(3325);
					match(ON);
					setState(3326);
					expression(0);
					}
					break;
				case 2:
					{
					setState(3327);
					match(USING);
					setState(3328);
					match(LR_BRACKET);
					setState(3329);
					uidList();
					setState(3330);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3334);
				match(STRAIGHT_JOIN);
				setState(3335);
				tableSourceItem();
				setState(3338);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
				case 1:
					{
					setState(3336);
					match(ON);
					setState(3337);
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3340);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3341);
					match(OUTER);
					}
				}

				setState(3344);
				match(JOIN);
				setState(3345);
				tableSourceItem();
				setState(3353);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(3346);
					match(ON);
					setState(3347);
					expression(0);
					}
					break;
				case USING:
					{
					setState(3348);
					match(USING);
					setState(3349);
					match(LR_BRACKET);
					setState(3350);
					uidList();
					setState(3351);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3355);
				match(NATURAL);
				setState(3360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					setState(3356);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3358);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(3357);
						match(OUTER);
						}
					}

					}
				}

				setState(3362);
				match(JOIN);
				setState(3363);
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_queryExpression);
		try {
			setState(3374);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3366);
				match(LR_BRACKET);
				setState(3367);
				querySpecification();
				setState(3368);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3370);
				match(LR_BRACKET);
				setState(3371);
				queryExpression();
				setState(3372);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionNointoContext extends ParserRuleContext {
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterQueryExpressionNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitQueryExpressionNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitQueryExpressionNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionNointoContext queryExpressionNointo() throws RecognitionException {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_queryExpressionNointo);
		try {
			setState(3384);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3376);
				match(LR_BRACKET);
				setState(3377);
				querySpecificationNointo();
				setState(3378);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3380);
				match(LR_BRACKET);
				setState(3381);
				queryExpressionNointo();
				setState(3382);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(OpenDistroSqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return getRuleContext(SelectIntoExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			setState(3422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3386);
				match(SELECT);
				setState(3390);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,477,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3387);
						selectSpec();
						}
						} 
					}
					setState(3392);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,477,_ctx);
				}
				setState(3393);
				selectElements();
				setState(3395);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3394);
					selectIntoExpression();
					}
				}

				setState(3397);
				fromClause();
				setState(3399);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
				case 1:
					{
					setState(3398);
					orderByClause();
					}
					break;
				}
				setState(3402);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
				case 1:
					{
					setState(3401);
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3404);
				match(SELECT);
				setState(3408);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,481,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3405);
						selectSpec();
						}
						} 
					}
					setState(3410);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,481,_ctx);
				}
				setState(3411);
				selectElements();
				setState(3412);
				fromClause();
				setState(3414);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
				case 1:
					{
					setState(3413);
					orderByClause();
					}
					break;
				}
				setState(3417);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
				case 1:
					{
					setState(3416);
					limitClause();
					}
					break;
				}
				setState(3420);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3419);
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationNointoContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(OpenDistroSqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecificationNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterQuerySpecificationNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitQuerySpecificationNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitQuerySpecificationNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationNointoContext querySpecificationNointo() throws RecognitionException {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_querySpecificationNointo);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3424);
			match(SELECT);
			setState(3428);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,486,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3425);
					selectSpec();
					}
					} 
				}
				setState(3430);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,486,_ctx);
			}
			setState(3431);
			selectElements();
			setState(3432);
			fromClause();
			setState(3434);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				{
				setState(3433);
				orderByClause();
				}
				break;
			}
			setState(3437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				setState(3436);
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionParenthesisContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(OpenDistroSqlParser.UNION, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(OpenDistroSqlParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionParenthesis; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUnionParenthesis(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUnionParenthesis(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUnionParenthesis(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionParenthesisContext unionParenthesis() throws RecognitionException {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_unionParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3439);
			match(UNION);
			setState(3441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3440);
				((UnionParenthesisContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionParenthesisContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3443);
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionStatementContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(OpenDistroSqlParser.UNION, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(OpenDistroSqlParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUnionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUnionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUnionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionStatementContext unionStatement() throws RecognitionException {
		UnionStatementContext _localctx = new UnionStatementContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_unionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3445);
			match(UNION);
			setState(3447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3446);
				((UnionStatementContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionStatementContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3451);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(3449);
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				setState(3450);
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSpecContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(OpenDistroSqlParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(OpenDistroSqlParser.DISTINCTROW, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(OpenDistroSqlParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(OpenDistroSqlParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(OpenDistroSqlParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(OpenDistroSqlParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(OpenDistroSqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(OpenDistroSqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(OpenDistroSqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(OpenDistroSqlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSelectSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSelectSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSelectSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectSpecContext selectSpec() throws RecognitionException {
		SelectSpecContext _localctx = new SelectSpecContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_selectSpec);
		int _la;
		try {
			setState(3461);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(3453);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3454);
				match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3455);
				match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3456);
				match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(3457);
				match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3458);
				match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(3459);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(3460);
				match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementsContext extends ParserRuleContext {
		public Token star;
		public List<SelectElementContext> selectElement() {
			return getRuleContexts(SelectElementContext.class);
		}
		public SelectElementContext selectElement(int i) {
			return getRuleContext(SelectElementContext.class,i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSelectElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSelectElements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSelectElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementsContext selectElements() throws RecognitionException {
		SelectElementsContext _localctx = new SelectElementsContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_selectElements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3465);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
				{
				setState(3463);
				((SelectElementsContext)_localctx).star = match(STAR);
				}
				break;
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT_USER:
			case DATABASE:
			case EXISTS:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case REPLACE:
			case RIGHT:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case CHARSET_REVERSE_QOUTE_STRING:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				setState(3464);
				selectElement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3467);
				match(COMMA);
				setState(3468);
				selectElement();
				}
				}
				setState(3473);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementContext extends ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElement; }
	 
		public SelectElementContext() { }
		public void copyFrom(SelectElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectExpressionElementContext extends SelectElementContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(OpenDistroSqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(OpenDistroSqlParser.VAR_ASSIGN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(OpenDistroSqlParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSelectExpressionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSelectExpressionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSelectExpressionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectFunctionElementContext extends SelectElementContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(OpenDistroSqlParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSelectFunctionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSelectFunctionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSelectFunctionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectStarElementContext extends SelectElementContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public SelectStarElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSelectStarElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSelectStarElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSelectStarElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectColumnElementContext extends SelectElementContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(OpenDistroSqlParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSelectColumnElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSelectColumnElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSelectColumnElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementContext selectElement() throws RecognitionException {
		SelectElementContext _localctx = new SelectElementContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_selectElement);
		int _la;
		try {
			setState(3503);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3474);
				fullId();
				setState(3475);
				match(DOT);
				setState(3476);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3478);
				fullColumnName();
				setState(3483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
					{
					setState(3480);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3479);
						match(AS);
						}
					}

					setState(3482);
					uid();
					}
				}

				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3485);
				functionCall();
				setState(3490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
					{
					setState(3487);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3486);
						match(AS);
						}
					}

					setState(3489);
					uid();
					}
				}

				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3494);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
				case 1:
					{
					setState(3492);
					match(LOCAL_ID);
					setState(3493);
					match(VAR_ASSIGN);
					}
					break;
				}
				setState(3496);
				expression(0);
				setState(3501);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
					{
					setState(3498);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3497);
						match(AS);
						}
					}

					setState(3500);
					uid();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoExpressionContext extends ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoExpression; }
	 
		public SelectIntoExpressionContext() { }
		public void copyFrom(SelectIntoExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectIntoVariablesContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(OpenDistroSqlParser.INTO, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSelectIntoVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSelectIntoVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSelectIntoVariables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoTextFileContext extends SelectIntoExpressionContext {
		public Token filename;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public TerminalNode INTO() { return getToken(OpenDistroSqlParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(OpenDistroSqlParser.OUTFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARACTER() { return getToken(OpenDistroSqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public TerminalNode LINES() { return getToken(OpenDistroSqlParser.LINES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode FIELDS() { return getToken(OpenDistroSqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(OpenDistroSqlParser.COLUMNS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSelectIntoTextFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSelectIntoTextFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSelectIntoTextFile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(OpenDistroSqlParser.INTO, 0); }
		public TerminalNode DUMPFILE() { return getToken(OpenDistroSqlParser.DUMPFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSelectIntoDumpFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSelectIntoDumpFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSelectIntoDumpFile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoExpressionContext selectIntoExpression() throws RecognitionException {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_selectIntoExpression);
		int _la;
		try {
			setState(3541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3505);
				match(INTO);
				setState(3506);
				assignmentField();
				setState(3511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3507);
					match(COMMA);
					setState(3508);
					assignmentField();
					}
					}
					setState(3513);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3514);
				match(INTO);
				setState(3515);
				match(DUMPFILE);
				setState(3516);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(3517);
				match(INTO);
				setState(3518);
				match(OUTFILE);
				setState(3519);
				((SelectIntoTextFileContext)_localctx).filename = match(STRING_LITERAL);
				setState(3523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(3520);
					match(CHARACTER);
					setState(3521);
					match(SET);
					setState(3522);
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				setState(3531);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
				case 1:
					{
					setState(3525);
					((SelectIntoTextFileContext)_localctx).fieldsFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3527); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3526);
						selectFieldsInto();
						}
						}
						setState(3529); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				setState(3539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(3533);
					match(LINES);
					setState(3535); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3534);
						selectLinesInto();
						}
						}
						setState(3537); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsIntoContext extends ParserRuleContext {
		public Token terminationField;
		public Token enclosion;
		public Token escaping;
		public TerminalNode TERMINATED() { return getToken(OpenDistroSqlParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(OpenDistroSqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENCLOSED() { return getToken(OpenDistroSqlParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(OpenDistroSqlParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(OpenDistroSqlParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSelectFieldsInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSelectFieldsInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSelectFieldsInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_selectFieldsInto);
		int _la;
		try {
			setState(3555);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3543);
				match(TERMINATED);
				setState(3544);
				match(BY);
				setState(3545);
				((SelectFieldsIntoContext)_localctx).terminationField = match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(3546);
					match(OPTIONALLY);
					}
				}

				setState(3549);
				match(ENCLOSED);
				setState(3550);
				match(BY);
				setState(3551);
				((SelectFieldsIntoContext)_localctx).enclosion = match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(3552);
				match(ESCAPED);
				setState(3553);
				match(BY);
				setState(3554);
				((SelectFieldsIntoContext)_localctx).escaping = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesIntoContext extends ParserRuleContext {
		public Token starting;
		public Token terminationLine;
		public TerminalNode STARTING() { return getToken(OpenDistroSqlParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(OpenDistroSqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode TERMINATED() { return getToken(OpenDistroSqlParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSelectLinesInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSelectLinesInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSelectLinesInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_selectLinesInto);
		try {
			setState(3563);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3557);
				match(STARTING);
				setState(3558);
				match(BY);
				setState(3559);
				((SelectLinesIntoContext)_localctx).starting = match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(3560);
				match(TERMINATED);
				setState(3561);
				match(BY);
				setState(3562);
				((SelectLinesIntoContext)_localctx).terminationLine = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public ExpressionContext whereExpr;
		public ExpressionContext havingExpr;
		public TerminalNode FROM() { return getToken(OpenDistroSqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(OpenDistroSqlParser.WHERE, 0); }
		public TerminalNode GROUP() { return getToken(OpenDistroSqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(OpenDistroSqlParser.BY, 0); }
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public TerminalNode HAVING() { return getToken(OpenDistroSqlParser.HAVING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WITH() { return getToken(OpenDistroSqlParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(OpenDistroSqlParser.ROLLUP, 0); }
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_fromClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3565);
			match(FROM);
			setState(3566);
			tableSources();
			setState(3569);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3567);
				match(WHERE);
				setState(3568);
				((FromClauseContext)_localctx).whereExpr = expression(0);
				}
			}

			setState(3585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(3571);
				match(GROUP);
				setState(3572);
				match(BY);
				setState(3573);
				groupByItem();
				setState(3578);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3574);
					match(COMMA);
					setState(3575);
					groupByItem();
					}
					}
					setState(3580);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3583);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
				case 1:
					{
					setState(3581);
					match(WITH);
					setState(3582);
					match(ROLLUP);
					}
					break;
				}
				}
			}

			setState(3589);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(3587);
				match(HAVING);
				setState(3588);
				((FromClauseContext)_localctx).havingExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(OpenDistroSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(OpenDistroSqlParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitGroupByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_groupByItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3591);
			expression(0);
			setState(3593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
			case 1:
				{
				setState(3592);
				((GroupByItemContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((GroupByItemContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		public TerminalNode LIMIT() { return getToken(OpenDistroSqlParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(OpenDistroSqlParser.OFFSET, 0); }
		public List<LimitClauseAtomContext> limitClauseAtom() {
			return getRuleContexts(LimitClauseAtomContext.class);
		}
		public LimitClauseAtomContext limitClauseAtom(int i) {
			return getRuleContext(LimitClauseAtomContext.class,i);
		}
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3595);
			match(LIMIT);
			setState(3606);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
			case 1:
				{
				setState(3599);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
				case 1:
					{
					setState(3596);
					((LimitClauseContext)_localctx).offset = limitClauseAtom();
					setState(3597);
					match(COMMA);
					}
					break;
				}
				setState(3601);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				setState(3602);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				setState(3603);
				match(OFFSET);
				setState(3604);
				((LimitClauseContext)_localctx).offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseAtomContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClauseAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLimitClauseAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLimitClauseAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLimitClauseAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseAtomContext limitClauseAtom() throws RecognitionException {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_limitClauseAtom);
		try {
			setState(3610);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3608);
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3609);
				mysqlVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartTransactionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(OpenDistroSqlParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(OpenDistroSqlParser.TRANSACTION, 0); }
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartTransactionContext startTransaction() throws RecognitionException {
		StartTransactionContext _localctx = new StartTransactionContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_startTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3612);
			match(START);
			setState(3613);
			match(TRANSACTION);
			setState(3622);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ || _la==WITH) {
				{
				setState(3614);
				transactionMode();
				setState(3619);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3615);
					match(COMMA);
					setState(3616);
					transactionMode();
					}
					}
					setState(3621);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(OpenDistroSqlParser.BEGIN, 0); }
		public TerminalNode WORK() { return getToken(OpenDistroSqlParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterBeginWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitBeginWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitBeginWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_beginWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3624);
			match(BEGIN);
			setState(3626);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3625);
				match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode COMMIT() { return getToken(OpenDistroSqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(OpenDistroSqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(OpenDistroSqlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(OpenDistroSqlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(OpenDistroSqlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(OpenDistroSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(OpenDistroSqlParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCommitWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitWorkContext commitWork() throws RecognitionException {
		CommitWorkContext _localctx = new CommitWorkContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_commitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3628);
			match(COMMIT);
			setState(3630);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3629);
				match(WORK);
				}
			}

			setState(3637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3632);
				match(AND);
				setState(3634);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3633);
					((CommitWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3636);
				match(CHAIN);
				}
			}

			setState(3643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
			case 1:
				{
				setState(3640);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3639);
					((CommitWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3642);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode ROLLBACK() { return getToken(OpenDistroSqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(OpenDistroSqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(OpenDistroSqlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(OpenDistroSqlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(OpenDistroSqlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(OpenDistroSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(OpenDistroSqlParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRollbackWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackWorkContext rollbackWork() throws RecognitionException {
		RollbackWorkContext _localctx = new RollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_rollbackWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3645);
			match(ROLLBACK);
			setState(3647);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3646);
				match(WORK);
				}
			}

			setState(3654);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3649);
				match(AND);
				setState(3651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3650);
					((RollbackWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3653);
				match(CHAIN);
				}
			}

			setState(3660);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				{
				setState(3657);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3656);
					((RollbackWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3659);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointStatementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(OpenDistroSqlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSavepointStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSavepointStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSavepointStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_savepointStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3662);
			match(SAVEPOINT);
			setState(3663);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackStatementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(OpenDistroSqlParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(OpenDistroSqlParser.TO, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WORK() { return getToken(OpenDistroSqlParser.WORK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(OpenDistroSqlParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRollbackStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRollbackStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRollbackStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackStatementContext rollbackStatement() throws RecognitionException {
		RollbackStatementContext _localctx = new RollbackStatementContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_rollbackStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3665);
			match(ROLLBACK);
			setState(3667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3666);
				match(WORK);
				}
			}

			setState(3669);
			match(TO);
			setState(3671);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
			case 1:
				{
				setState(3670);
				match(SAVEPOINT);
				}
				break;
			}
			setState(3673);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReleaseStatementContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(OpenDistroSqlParser.RELEASE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(OpenDistroSqlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_releaseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterReleaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitReleaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitReleaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReleaseStatementContext releaseStatement() throws RecognitionException {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_releaseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3675);
			match(RELEASE);
			setState(3676);
			match(SAVEPOINT);
			setState(3677);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTablesContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(OpenDistroSqlParser.LOCK, 0); }
		public TerminalNode TABLES() { return getToken(OpenDistroSqlParser.TABLES, 0); }
		public List<LockTableElementContext> lockTableElement() {
			return getRuleContexts(LockTableElementContext.class);
		}
		public LockTableElementContext lockTableElement(int i) {
			return getRuleContext(LockTableElementContext.class,i);
		}
		public LockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLockTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLockTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTablesContext lockTables() throws RecognitionException {
		LockTablesContext _localctx = new LockTablesContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_lockTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3679);
			match(LOCK);
			setState(3680);
			match(TABLES);
			setState(3681);
			lockTableElement();
			setState(3686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3682);
				match(COMMA);
				setState(3683);
				lockTableElement();
				}
				}
				setState(3688);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlockTablesContext extends ParserRuleContext {
		public TerminalNode UNLOCK() { return getToken(OpenDistroSqlParser.UNLOCK, 0); }
		public TerminalNode TABLES() { return getToken(OpenDistroSqlParser.TABLES, 0); }
		public UnlockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlockTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUnlockTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUnlockTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUnlockTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlockTablesContext unlockTables() throws RecognitionException {
		UnlockTablesContext _localctx = new UnlockTablesContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_unlockTables);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3689);
			match(UNLOCK);
			setState(3690);
			match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetAutocommitStatementContext extends ParserRuleContext {
		public Token autocommitValue;
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(OpenDistroSqlParser.AUTOCOMMIT, 0); }
		public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAutocommitStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSetAutocommitStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSetAutocommitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSetAutocommitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetAutocommitStatementContext setAutocommitStatement() throws RecognitionException {
		SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_setAutocommitStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3692);
			match(SET);
			setState(3693);
			match(AUTOCOMMIT);
			setState(3694);
			match(EQUAL_SYMBOL);
			setState(3695);
			((SetAutocommitStatementContext)_localctx).autocommitValue = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				((SetAutocommitStatementContext)_localctx).autocommitValue = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTransactionStatementContext extends ParserRuleContext {
		public Token transactionContext;
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(OpenDistroSqlParser.TRANSACTION, 0); }
		public List<TransactionOptionContext> transactionOption() {
			return getRuleContexts(TransactionOptionContext.class);
		}
		public TransactionOptionContext transactionOption(int i) {
			return getRuleContext(TransactionOptionContext.class,i);
		}
		public TerminalNode GLOBAL() { return getToken(OpenDistroSqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(OpenDistroSqlParser.SESSION, 0); }
		public SetTransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTransactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSetTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSetTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSetTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTransactionStatementContext setTransactionStatement() throws RecognitionException {
		SetTransactionStatementContext _localctx = new SetTransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_setTransactionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3697);
			match(SET);
			setState(3699);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				setState(3698);
				((SetTransactionStatementContext)_localctx).transactionContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
					((SetTransactionStatementContext)_localctx).transactionContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3701);
			match(TRANSACTION);
			setState(3702);
			transactionOption();
			setState(3707);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3703);
				match(COMMA);
				setState(3704);
				transactionOption();
				}
				}
				setState(3709);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(OpenDistroSqlParser.WITH, 0); }
		public TerminalNode CONSISTENT() { return getToken(OpenDistroSqlParser.CONSISTENT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(OpenDistroSqlParser.SNAPSHOT, 0); }
		public TerminalNode READ() { return getToken(OpenDistroSqlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(OpenDistroSqlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(OpenDistroSqlParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTransactionMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTransactionMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTransactionMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_transactionMode);
		try {
			setState(3717);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3710);
				match(WITH);
				setState(3711);
				match(CONSISTENT);
				setState(3712);
				match(SNAPSHOT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3713);
				match(READ);
				setState(3714);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3715);
				match(READ);
				setState(3716);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTableElementContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public LockActionContext lockAction() {
			return getRuleContext(LockActionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(OpenDistroSqlParser.AS, 0); }
		public LockTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLockTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLockTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLockTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTableElementContext lockTableElement() throws RecognitionException {
		LockTableElementContext _localctx = new LockTableElementContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_lockTableElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3719);
			tableName();
			setState(3724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
				{
				setState(3721);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3720);
					match(AS);
					}
				}

				setState(3723);
				uid();
				}
			}

			setState(3726);
			lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockActionContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(OpenDistroSqlParser.READ, 0); }
		public TerminalNode LOCAL() { return getToken(OpenDistroSqlParser.LOCAL, 0); }
		public TerminalNode WRITE() { return getToken(OpenDistroSqlParser.WRITE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(OpenDistroSqlParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLockAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLockAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLockAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockActionContext lockAction() throws RecognitionException {
		LockActionContext _localctx = new LockActionContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_lockAction);
		int _la;
		try {
			setState(3736);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(3728);
				match(READ);
				setState(3730);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(3729);
					match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3733);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					setState(3732);
					match(LOW_PRIORITY);
					}
				}

				setState(3735);
				match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionOptionContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(OpenDistroSqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(OpenDistroSqlParser.LEVEL, 0); }
		public TransactionLevelContext transactionLevel() {
			return getRuleContext(TransactionLevelContext.class,0);
		}
		public TerminalNode READ() { return getToken(OpenDistroSqlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(OpenDistroSqlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(OpenDistroSqlParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTransactionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTransactionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTransactionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionOptionContext transactionOption() throws RecognitionException {
		TransactionOptionContext _localctx = new TransactionOptionContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_transactionOption);
		try {
			setState(3745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3738);
				match(ISOLATION);
				setState(3739);
				match(LEVEL);
				setState(3740);
				transactionLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3741);
				match(READ);
				setState(3742);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3743);
				match(READ);
				setState(3744);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(OpenDistroSqlParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(OpenDistroSqlParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(OpenDistroSqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(OpenDistroSqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(OpenDistroSqlParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTransactionLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTransactionLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTransactionLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelContext transactionLevel() throws RecognitionException {
		TransactionLevelContext _localctx = new TransactionLevelContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_transactionLevel);
		try {
			setState(3754);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3747);
				match(REPEATABLE);
				setState(3748);
				match(READ);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3749);
				match(READ);
				setState(3750);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3751);
				match(READ);
				setState(3752);
				match(UNCOMMITTED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3753);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(OpenDistroSqlParser.CHANGE, 0); }
		public TerminalNode MASTER() { return getToken(OpenDistroSqlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(OpenDistroSqlParser.TO, 0); }
		public List<MasterOptionContext> masterOption() {
			return getRuleContexts(MasterOptionContext.class);
		}
		public MasterOptionContext masterOption(int i) {
			return getRuleContext(MasterOptionContext.class,i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterChangeMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitChangeMaster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitChangeMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeMasterContext changeMaster() throws RecognitionException {
		ChangeMasterContext _localctx = new ChangeMasterContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_changeMaster);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3756);
			match(CHANGE);
			setState(3757);
			match(MASTER);
			setState(3758);
			match(TO);
			setState(3759);
			masterOption();
			setState(3764);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3760);
				match(COMMA);
				setState(3761);
				masterOption();
				}
				}
				setState(3766);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3767);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeReplicationFilterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(OpenDistroSqlParser.CHANGE, 0); }
		public TerminalNode REPLICATION() { return getToken(OpenDistroSqlParser.REPLICATION, 0); }
		public TerminalNode FILTER() { return getToken(OpenDistroSqlParser.FILTER, 0); }
		public List<ReplicationFilterContext> replicationFilter() {
			return getRuleContexts(ReplicationFilterContext.class);
		}
		public ReplicationFilterContext replicationFilter(int i) {
			return getRuleContext(ReplicationFilterContext.class,i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterChangeReplicationFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitChangeReplicationFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitChangeReplicationFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeReplicationFilterContext changeReplicationFilter() throws RecognitionException {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_changeReplicationFilter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3770);
			match(CHANGE);
			setState(3771);
			match(REPLICATION);
			setState(3772);
			match(FILTER);
			setState(3773);
			replicationFilter();
			setState(3778);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3774);
				match(COMMA);
				setState(3775);
				replicationFilter();
				}
				}
				setState(3780);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PurgeBinaryLogsContext extends ParserRuleContext {
		public Token purgeFormat;
		public Token fileName;
		public Token timeValue;
		public TerminalNode PURGE() { return getToken(OpenDistroSqlParser.PURGE, 0); }
		public TerminalNode LOGS() { return getToken(OpenDistroSqlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(OpenDistroSqlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(OpenDistroSqlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(OpenDistroSqlParser.TO, 0); }
		public TerminalNode BEFORE() { return getToken(OpenDistroSqlParser.BEFORE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_purgeBinaryLogs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPurgeBinaryLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPurgeBinaryLogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPurgeBinaryLogs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PurgeBinaryLogsContext purgeBinaryLogs() throws RecognitionException {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_purgeBinaryLogs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3781);
			match(PURGE);
			setState(3782);
			((PurgeBinaryLogsContext)_localctx).purgeFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				((PurgeBinaryLogsContext)_localctx).purgeFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3783);
			match(LOGS);
			setState(3788);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(3784);
				match(TO);
				setState(3785);
				((PurgeBinaryLogsContext)_localctx).fileName = match(STRING_LITERAL);
				}
				break;
			case BEFORE:
				{
				setState(3786);
				match(BEFORE);
				setState(3787);
				((PurgeBinaryLogsContext)_localctx).timeValue = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetMasterContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(OpenDistroSqlParser.RESET, 0); }
		public TerminalNode MASTER() { return getToken(OpenDistroSqlParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterResetMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitResetMaster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitResetMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetMasterContext resetMaster() throws RecognitionException {
		ResetMasterContext _localctx = new ResetMasterContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_resetMaster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3790);
			match(RESET);
			setState(3791);
			match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetSlaveContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(OpenDistroSqlParser.RESET, 0); }
		public TerminalNode SLAVE() { return getToken(OpenDistroSqlParser.SLAVE, 0); }
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterResetSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitResetSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitResetSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetSlaveContext resetSlave() throws RecognitionException {
		ResetSlaveContext _localctx = new ResetSlaveContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_resetSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3793);
			match(RESET);
			setState(3794);
			match(SLAVE);
			setState(3796);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(3795);
				match(ALL);
				}
			}

			setState(3799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3798);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartSlaveContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(OpenDistroSqlParser.START, 0); }
		public TerminalNode SLAVE() { return getToken(OpenDistroSqlParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public TerminalNode UNTIL() { return getToken(OpenDistroSqlParser.UNTIL, 0); }
		public UntilOptionContext untilOption() {
			return getRuleContext(UntilOptionContext.class,0);
		}
		public List<ConnectionOptionContext> connectionOption() {
			return getRuleContexts(ConnectionOptionContext.class);
		}
		public ConnectionOptionContext connectionOption(int i) {
			return getRuleContext(ConnectionOptionContext.class,i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterStartSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitStartSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitStartSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartSlaveContext startSlave() throws RecognitionException {
		StartSlaveContext _localctx = new StartSlaveContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_startSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3801);
			match(START);
			setState(3802);
			match(SLAVE);
			setState(3811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(3803);
				threadType();
				setState(3808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3804);
					match(COMMA);
					setState(3805);
					threadType();
					}
					}
					setState(3810);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3815);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3813);
				match(UNTIL);
				setState(3814);
				untilOption();
				}
			}

			setState(3820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				setState(3817);
				connectionOption();
				}
				}
				setState(3822);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3824);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3823);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopSlaveContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(OpenDistroSqlParser.STOP, 0); }
		public TerminalNode SLAVE() { return getToken(OpenDistroSqlParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopSlave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterStopSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitStopSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitStopSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopSlaveContext stopSlave() throws RecognitionException {
		StopSlaveContext _localctx = new StopSlaveContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_stopSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3826);
			match(STOP);
			setState(3827);
			match(SLAVE);
			setState(3836);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(3828);
				threadType();
				setState(3833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3829);
					match(COMMA);
					setState(3830);
					threadType();
					}
					}
					setState(3835);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartGroupReplicationContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(OpenDistroSqlParser.START, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(OpenDistroSqlParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterStartGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitStartGroupReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitStartGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartGroupReplicationContext startGroupReplication() throws RecognitionException {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_startGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3838);
			match(START);
			setState(3839);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopGroupReplicationContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(OpenDistroSqlParser.STOP, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(OpenDistroSqlParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopGroupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterStopGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitStopGroupReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitStopGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopGroupReplicationContext stopGroupReplication() throws RecognitionException {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_stopGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3841);
			match(STOP);
			setState(3842);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterOptionContext extends ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOption; }
	 
		public MasterOptionContext() { }
		public void copyFrom(MasterOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MasterStringOptionContext extends MasterOptionContext {
		public StringMasterOptionContext stringMasterOption() {
			return getRuleContext(StringMasterOptionContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public MasterStringOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterMasterStringOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitMasterStringOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitMasterStringOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterRealOptionContext extends MasterOptionContext {
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(OpenDistroSqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(OpenDistroSqlParser.REAL_LITERAL, 0); }
		public MasterRealOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterMasterRealOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitMasterRealOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitMasterRealOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterBoolOptionContext extends MasterOptionContext {
		public Token boolVal;
		public BoolMasterOptionContext boolMasterOption() {
			return getRuleContext(BoolMasterOptionContext.class,0);
		}
		public MasterBoolOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterMasterBoolOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitMasterBoolOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitMasterBoolOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterUidListOptionContext extends MasterOptionContext {
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(OpenDistroSqlParser.IGNORE_SERVER_IDS, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public MasterUidListOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterMasterUidListOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitMasterUidListOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitMasterUidListOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterDecimalOptionContext extends MasterOptionContext {
		public DecimalMasterOptionContext decimalMasterOption() {
			return getRuleContext(DecimalMasterOptionContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterDecimalOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterMasterDecimalOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitMasterDecimalOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitMasterDecimalOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MasterOptionContext masterOption() throws RecognitionException {
		MasterOptionContext _localctx = new MasterOptionContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_masterOption);
		int _la;
		try {
			setState(3873);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3844);
				stringMasterOption();
				setState(3845);
				match(EQUAL_SYMBOL);
				setState(3846);
				match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3848);
				decimalMasterOption();
				setState(3849);
				match(EQUAL_SYMBOL);
				setState(3850);
				decimalLiteral();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3852);
				boolMasterOption();
				setState(3853);
				match(EQUAL_SYMBOL);
				setState(3854);
				((MasterBoolOptionContext)_localctx).boolVal = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((MasterBoolOptionContext)_localctx).boolVal = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3856);
				match(MASTER_HEARTBEAT_PERIOD);
				setState(3857);
				match(EQUAL_SYMBOL);
				setState(3858);
				match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3859);
				match(IGNORE_SERVER_IDS);
				setState(3860);
				match(EQUAL_SYMBOL);
				setState(3861);
				match(LR_BRACKET);
				setState(3870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
					{
					setState(3862);
					uid();
					setState(3867);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3863);
						match(COMMA);
						setState(3864);
						uid();
						}
						}
						setState(3869);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3872);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_BIND() { return getToken(OpenDistroSqlParser.MASTER_BIND, 0); }
		public TerminalNode MASTER_HOST() { return getToken(OpenDistroSqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_USER() { return getToken(OpenDistroSqlParser.MASTER_USER, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(OpenDistroSqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(OpenDistroSqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(OpenDistroSqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(OpenDistroSqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(OpenDistroSqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(OpenDistroSqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(OpenDistroSqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(OpenDistroSqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(OpenDistroSqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(OpenDistroSqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(OpenDistroSqlParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterStringMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitStringMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitStringMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringMasterOptionContext stringMasterOption() throws RecognitionException {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_stringMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3875);
			_la = _input.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (MASTER_HOST - 385)) | (1L << (MASTER_LOG_FILE - 385)) | (1L << (MASTER_PASSWORD - 385)) | (1L << (MASTER_SSL_CA - 385)) | (1L << (MASTER_SSL_CAPATH - 385)) | (1L << (MASTER_SSL_CERT - 385)) | (1L << (MASTER_SSL_CIPHER - 385)) | (1L << (MASTER_SSL_CRL - 385)) | (1L << (MASTER_SSL_CRLPATH - 385)) | (1L << (MASTER_SSL_KEY - 385)) | (1L << (MASTER_TLS_VERSION - 385)) | (1L << (MASTER_USER - 385)))) != 0) || _la==RELAY_LOG_FILE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_PORT() { return getToken(OpenDistroSqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(OpenDistroSqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(OpenDistroSqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(OpenDistroSqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(OpenDistroSqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(OpenDistroSqlParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDecimalMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDecimalMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDecimalMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalMasterOptionContext decimalMasterOption() throws RecognitionException {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_decimalMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3877);
			_la = _input.LA(1);
			if ( !(((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (MASTER_CONNECT_RETRY - 382)) | (1L << (MASTER_DELAY - 382)) | (1L << (MASTER_LOG_POS - 382)) | (1L << (MASTER_PORT - 382)) | (1L << (MASTER_RETRY_COUNT - 382)))) != 0) || _la==RELAY_LOG_POS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(OpenDistroSqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_SSL() { return getToken(OpenDistroSqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return getToken(OpenDistroSqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolMasterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterBoolMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitBoolMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitBoolMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoolMasterOptionContext boolMasterOption() throws RecognitionException {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_boolMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3879);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(OpenDistroSqlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(OpenDistroSqlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public ChannelOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channelOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterChannelOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitChannelOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitChannelOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChannelOptionContext channelOption() throws RecognitionException {
		ChannelOptionContext _localctx = new ChannelOptionContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_channelOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3881);
			match(FOR);
			setState(3882);
			match(CHANNEL);
			setState(3883);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationFilterContext extends ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationFilter; }
	 
		public ReplicationFilterContext() { }
		public void copyFrom(ReplicationFilterContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(OpenDistroSqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public WildIgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterWildIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitWildIgnoreTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitWildIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(OpenDistroSqlParser.REPLICATE_DO_TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public DoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDoTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(OpenDistroSqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public IgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIgnoreTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIgnoreTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RewriteDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(OpenDistroSqlParser.REPLICATE_REWRITE_DB, 0); }
		public List<TablePairContext> tablePair() {
			return getRuleContexts(TablePairContext.class);
		}
		public TablePairContext tablePair(int i) {
			return getRuleContext(TablePairContext.class,i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRewriteDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRewriteDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRewriteDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_DB() { return getToken(OpenDistroSqlParser.REPLICATE_DO_DB, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public DoDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDoDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDoDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDoDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(OpenDistroSqlParser.REPLICATE_IGNORE_DB, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public IgnoreDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIgnoreDbReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIgnoreDbReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIgnoreDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WildDoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(OpenDistroSqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public WildDoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterWildDoTableReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitWildDoTableReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitWildDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationFilterContext replicationFilter() throws RecognitionException {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_replicationFilter);
		int _la;
		try {
			setState(3934);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3885);
				match(REPLICATE_DO_DB);
				setState(3886);
				match(EQUAL_SYMBOL);
				setState(3887);
				match(LR_BRACKET);
				setState(3888);
				uidList();
				setState(3889);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3891);
				match(REPLICATE_IGNORE_DB);
				setState(3892);
				match(EQUAL_SYMBOL);
				setState(3893);
				match(LR_BRACKET);
				setState(3894);
				uidList();
				setState(3895);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3897);
				match(REPLICATE_DO_TABLE);
				setState(3898);
				match(EQUAL_SYMBOL);
				setState(3899);
				match(LR_BRACKET);
				setState(3900);
				tables();
				setState(3901);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3903);
				match(REPLICATE_IGNORE_TABLE);
				setState(3904);
				match(EQUAL_SYMBOL);
				setState(3905);
				match(LR_BRACKET);
				setState(3906);
				tables();
				setState(3907);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3909);
				match(REPLICATE_WILD_DO_TABLE);
				setState(3910);
				match(EQUAL_SYMBOL);
				setState(3911);
				match(LR_BRACKET);
				setState(3912);
				simpleStrings();
				setState(3913);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3915);
				match(REPLICATE_WILD_IGNORE_TABLE);
				setState(3916);
				match(EQUAL_SYMBOL);
				setState(3917);
				match(LR_BRACKET);
				setState(3918);
				simpleStrings();
				setState(3919);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(3921);
				match(REPLICATE_REWRITE_DB);
				setState(3922);
				match(EQUAL_SYMBOL);
				setState(3923);
				match(LR_BRACKET);
				setState(3924);
				tablePair();
				setState(3929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3925);
					match(COMMA);
					setState(3926);
					tablePair();
					}
					}
					setState(3931);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3932);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablePairContext extends ParserRuleContext {
		public TableNameContext firstTable;
		public TableNameContext secondTable;
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTablePair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTablePair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTablePair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablePairContext tablePair() throws RecognitionException {
		TablePairContext _localctx = new TablePairContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_tablePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3936);
			match(LR_BRACKET);
			setState(3937);
			((TablePairContext)_localctx).firstTable = tableName();
			setState(3938);
			match(COMMA);
			setState(3939);
			((TablePairContext)_localctx).secondTable = tableName();
			setState(3940);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadTypeContext extends ParserRuleContext {
		public TerminalNode IO_THREAD() { return getToken(OpenDistroSqlParser.IO_THREAD, 0); }
		public TerminalNode SQL_THREAD() { return getToken(OpenDistroSqlParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterThreadType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitThreadType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitThreadType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThreadTypeContext threadType() throws RecognitionException {
		ThreadTypeContext _localctx = new ThreadTypeContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_threadType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3942);
			_la = _input.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UntilOptionContext extends ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_untilOption; }
	 
		public UntilOptionContext() { }
		public void copyFrom(UntilOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GtidsUntilOptionContext extends UntilOptionContext {
		public Token gtids;
		public GtuidSetContext gtuidSet() {
			return getRuleContext(GtuidSetContext.class,0);
		}
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(OpenDistroSqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(OpenDistroSqlParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterGtidsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitGtidsUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitGtidsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SqlGapsUntilOptionContext extends UntilOptionContext {
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(OpenDistroSqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSqlGapsUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSqlGapsUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSqlGapsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode MASTER_LOG_FILE() { return getToken(OpenDistroSqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(OpenDistroSqlParser.MASTER_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterMasterLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitMasterLogUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitMasterLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RelayLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode RELAY_LOG_FILE() { return getToken(OpenDistroSqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(OpenDistroSqlParser.RELAY_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public RelayLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRelayLogUntilOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRelayLogUntilOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRelayLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UntilOptionContext untilOption() throws RecognitionException {
		UntilOptionContext _localctx = new UntilOptionContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_untilOption);
		int _la;
		try {
			setState(3962);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3944);
				((GtidsUntilOptionContext)_localctx).gtids = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3945);
				match(EQUAL_SYMBOL);
				setState(3946);
				gtuidSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3947);
				match(MASTER_LOG_FILE);
				setState(3948);
				match(EQUAL_SYMBOL);
				setState(3949);
				match(STRING_LITERAL);
				setState(3950);
				match(COMMA);
				setState(3951);
				match(MASTER_LOG_POS);
				setState(3952);
				match(EQUAL_SYMBOL);
				setState(3953);
				decimalLiteral();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3954);
				match(RELAY_LOG_FILE);
				setState(3955);
				match(EQUAL_SYMBOL);
				setState(3956);
				match(STRING_LITERAL);
				setState(3957);
				match(COMMA);
				setState(3958);
				match(RELAY_LOG_POS);
				setState(3959);
				match(EQUAL_SYMBOL);
				setState(3960);
				decimalLiteral();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3961);
				match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectionOptionContext extends ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionOption; }
	 
		public ConnectionOptionContext() { }
		public void copyFrom(ConnectionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PluginDirConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPluginDir;
		public TerminalNode PLUGIN_DIR() { return getToken(OpenDistroSqlParser.PLUGIN_DIR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public PluginDirConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPluginDirConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPluginDirConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPluginDirConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UserConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptUser;
		public TerminalNode USER() { return getToken(OpenDistroSqlParser.USER, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public UserConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUserConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUserConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUserConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptDefAuth;
		public TerminalNode DEFAULT_AUTH() { return getToken(OpenDistroSqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDefaultAuthConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDefaultAuthConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDefaultAuthConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPassword;
		public TerminalNode PASSWORD() { return getToken(OpenDistroSqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public PasswordConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPasswordConnectionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPasswordConnectionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPasswordConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectionOptionContext connectionOption() throws RecognitionException {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_connectionOption);
		try {
			setState(3976);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3964);
				match(USER);
				setState(3965);
				match(EQUAL_SYMBOL);
				setState(3966);
				((UserConnectionOptionContext)_localctx).conOptUser = match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3967);
				match(PASSWORD);
				setState(3968);
				match(EQUAL_SYMBOL);
				setState(3969);
				((PasswordConnectionOptionContext)_localctx).conOptPassword = match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3970);
				match(DEFAULT_AUTH);
				setState(3971);
				match(EQUAL_SYMBOL);
				setState(3972);
				((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3973);
				match(PLUGIN_DIR);
				setState(3974);
				match(EQUAL_SYMBOL);
				setState(3975);
				((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GtuidSetContext extends ParserRuleContext {
		public List<UuidSetContext> uuidSet() {
			return getRuleContexts(UuidSetContext.class);
		}
		public UuidSetContext uuidSet(int i) {
			return getRuleContext(UuidSetContext.class,i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public GtuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gtuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterGtuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitGtuidSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitGtuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GtuidSetContext gtuidSet() throws RecognitionException {
		GtuidSetContext _localctx = new GtuidSetContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_gtuidSet);
		int _la;
		try {
			setState(3987);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3978);
				uuidSet();
				setState(3983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3979);
					match(COMMA);
					setState(3980);
					uuidSet();
					}
					}
					setState(3985);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3986);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaStartTransactionContext extends ParserRuleContext {
		public Token xaStart;
		public Token xaAction;
		public TerminalNode XA() { return getToken(OpenDistroSqlParser.XA, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode START() { return getToken(OpenDistroSqlParser.START, 0); }
		public TerminalNode BEGIN() { return getToken(OpenDistroSqlParser.BEGIN, 0); }
		public TerminalNode JOIN() { return getToken(OpenDistroSqlParser.JOIN, 0); }
		public TerminalNode RESUME() { return getToken(OpenDistroSqlParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStartTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterXaStartTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitXaStartTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitXaStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaStartTransactionContext xaStartTransaction() throws RecognitionException {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_xaStartTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3989);
			match(XA);
			setState(3990);
			((XaStartTransactionContext)_localctx).xaStart = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				((XaStartTransactionContext)_localctx).xaStart = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3991);
			xid();
			setState(3993);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				setState(3992);
				((XaStartTransactionContext)_localctx).xaAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					((XaStartTransactionContext)_localctx).xaAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaEndTransactionContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(OpenDistroSqlParser.XA, 0); }
		public TerminalNode END() { return getToken(OpenDistroSqlParser.END, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode SUSPEND() { return getToken(OpenDistroSqlParser.SUSPEND, 0); }
		public TerminalNode FOR() { return getToken(OpenDistroSqlParser.FOR, 0); }
		public TerminalNode MIGRATE() { return getToken(OpenDistroSqlParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaEndTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterXaEndTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitXaEndTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitXaEndTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaEndTransactionContext xaEndTransaction() throws RecognitionException {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_xaEndTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3995);
			match(XA);
			setState(3996);
			match(END);
			setState(3997);
			xid();
			setState(4003);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUSPEND) {
				{
				setState(3998);
				match(SUSPEND);
				setState(4001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3999);
					match(FOR);
					setState(4000);
					match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaPrepareStatementContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(OpenDistroSqlParser.XA, 0); }
		public TerminalNode PREPARE() { return getToken(OpenDistroSqlParser.PREPARE, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaPrepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterXaPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitXaPrepareStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitXaPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaPrepareStatementContext xaPrepareStatement() throws RecognitionException {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_xaPrepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4005);
			match(XA);
			setState(4006);
			match(PREPARE);
			setState(4007);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaCommitWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(OpenDistroSqlParser.XA, 0); }
		public TerminalNode COMMIT() { return getToken(OpenDistroSqlParser.COMMIT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode ONE() { return getToken(OpenDistroSqlParser.ONE, 0); }
		public TerminalNode PHASE() { return getToken(OpenDistroSqlParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaCommitWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterXaCommitWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitXaCommitWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitXaCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaCommitWorkContext xaCommitWork() throws RecognitionException {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_xaCommitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4009);
			match(XA);
			setState(4010);
			match(COMMIT);
			setState(4011);
			xid();
			setState(4014);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONE) {
				{
				setState(4012);
				match(ONE);
				setState(4013);
				match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRollbackWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(OpenDistroSqlParser.XA, 0); }
		public TerminalNode ROLLBACK() { return getToken(OpenDistroSqlParser.ROLLBACK, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRollbackWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterXaRollbackWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitXaRollbackWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitXaRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRollbackWorkContext xaRollbackWork() throws RecognitionException {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_xaRollbackWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4016);
			match(XA);
			setState(4017);
			match(ROLLBACK);
			setState(4018);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRecoverWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(OpenDistroSqlParser.XA, 0); }
		public TerminalNode RECOVER() { return getToken(OpenDistroSqlParser.RECOVER, 0); }
		public TerminalNode CONVERT() { return getToken(OpenDistroSqlParser.CONVERT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRecoverWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterXaRecoverWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitXaRecoverWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitXaRecoverWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRecoverWorkContext xaRecoverWork() throws RecognitionException {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_xaRecoverWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4020);
			match(XA);
			setState(4021);
			match(RECOVER);
			setState(4024);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONVERT) {
				{
				setState(4022);
				match(CONVERT);
				setState(4023);
				xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareStatementContext extends ParserRuleContext {
		public Token query;
		public Token variable;
		public TerminalNode PREPARE() { return getToken(OpenDistroSqlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FROM() { return getToken(OpenDistroSqlParser.FROM, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(OpenDistroSqlParser.LOCAL_ID, 0); }
		public PrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPrepareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPrepareStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareStatementContext prepareStatement() throws RecognitionException {
		PrepareStatementContext _localctx = new PrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_prepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4026);
			match(PREPARE);
			setState(4027);
			uid();
			setState(4028);
			match(FROM);
			setState(4031);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				{
				setState(4029);
				((PrepareStatementContext)_localctx).query = match(STRING_LITERAL);
				}
				break;
			case LOCAL_ID:
				{
				setState(4030);
				((PrepareStatementContext)_localctx).variable = match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(OpenDistroSqlParser.EXECUTE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode USING() { return getToken(OpenDistroSqlParser.USING, 0); }
		public UserVariablesContext userVariables() {
			return getRuleContext(UserVariablesContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterExecuteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitExecuteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitExecuteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4033);
			match(EXECUTE);
			setState(4034);
			uid();
			setState(4037);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4035);
				match(USING);
				setState(4036);
				userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocatePrepareContext extends ParserRuleContext {
		public Token dropFormat;
		public TerminalNode PREPARE() { return getToken(OpenDistroSqlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DEALLOCATE() { return getToken(OpenDistroSqlParser.DEALLOCATE, 0); }
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatePrepare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDeallocatePrepare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDeallocatePrepare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDeallocatePrepare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocatePrepareContext deallocatePrepare() throws RecognitionException {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_deallocatePrepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4039);
			((DeallocatePrepareContext)_localctx).dropFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				((DeallocatePrepareContext)_localctx).dropFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4040);
			match(PREPARE);
			setState(4041);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineBodyContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRoutineBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRoutineBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRoutineBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineBodyContext routineBody() throws RecognitionException {
		RoutineBodyContext _localctx = new RoutineBodyContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_routineBody);
		try {
			setState(4045);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,577,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4043);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4044);
				sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockStatementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(OpenDistroSqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(OpenDistroSqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<DeclareVariableContext> declareVariable() {
			return getRuleContexts(DeclareVariableContext.class);
		}
		public DeclareVariableContext declareVariable(int i) {
			return getRuleContext(DeclareVariableContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(OpenDistroSqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(OpenDistroSqlParser.SEMI, i);
		}
		public List<DeclareConditionContext> declareCondition() {
			return getRuleContexts(DeclareConditionContext.class);
		}
		public DeclareConditionContext declareCondition(int i) {
			return getRuleContext(DeclareConditionContext.class,i);
		}
		public List<DeclareCursorContext> declareCursor() {
			return getRuleContexts(DeclareCursorContext.class);
		}
		public DeclareCursorContext declareCursor(int i) {
			return getRuleContext(DeclareCursorContext.class,i);
		}
		public List<DeclareHandlerContext> declareHandler() {
			return getRuleContexts(DeclareHandlerContext.class);
		}
		public DeclareHandlerContext declareHandler(int i) {
			return getRuleContext(DeclareHandlerContext.class,i);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blockStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterBlockStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitBlockStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitBlockStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockStatementContext blockStatement() throws RecognitionException {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4050);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
			case 1:
				{
				setState(4047);
				uid();
				setState(4048);
				match(COLON_SYMB);
				}
				break;
			}
			setState(4052);
			match(BEGIN);
			setState(4091);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
			case 1:
				{
				setState(4058);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,579,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4053);
						declareVariable();
						setState(4054);
						match(SEMI);
						}
						} 
					}
					setState(4060);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,579,_ctx);
				}
				setState(4066);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,580,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4061);
						declareCondition();
						setState(4062);
						match(SEMI);
						}
						} 
					}
					setState(4068);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,580,_ctx);
				}
				setState(4074);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,581,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4069);
						declareCursor();
						setState(4070);
						match(SEMI);
						}
						} 
					}
					setState(4076);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,581,_ctx);
				}
				setState(4082);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DECLARE) {
					{
					{
					setState(4077);
					declareHandler();
					setState(4078);
					match(SEMI);
					}
					}
					setState(4084);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4088);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,583,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4085);
						procedureSqlStatement();
						}
						} 
					}
					setState(4090);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,583,_ctx);
				}
				}
				break;
			}
			setState(4093);
			match(END);
			setState(4095);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
			case 1:
				{
				setState(4094);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(OpenDistroSqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(OpenDistroSqlParser.CASE, i);
		}
		public TerminalNode END() { return getToken(OpenDistroSqlParser.END, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<CaseAlternativeContext> caseAlternative() {
			return getRuleContexts(CaseAlternativeContext.class);
		}
		public CaseAlternativeContext caseAlternative(int i) {
			return getRuleContext(CaseAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(OpenDistroSqlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4097);
			match(CASE);
			setState(4100);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
			case 1:
				{
				setState(4098);
				uid();
				}
				break;
			case 2:
				{
				setState(4099);
				expression(0);
				}
				break;
			}
			setState(4103); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4102);
				caseAlternative();
				}
				}
				setState(4105); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4107);
				match(ELSE);
				setState(4109); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4108);
						procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4111); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,588,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4115);
			match(END);
			setState(4116);
			match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public ProcedureSqlStatementContext procedureSqlStatement;
		public List<ProcedureSqlStatementContext> thenStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<ProcedureSqlStatementContext> elseStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<TerminalNode> IF() { return getTokens(OpenDistroSqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(OpenDistroSqlParser.IF, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(OpenDistroSqlParser.THEN, 0); }
		public TerminalNode END() { return getToken(OpenDistroSqlParser.END, 0); }
		public List<ElifAlternativeContext> elifAlternative() {
			return getRuleContexts(ElifAlternativeContext.class);
		}
		public ElifAlternativeContext elifAlternative(int i) {
			return getRuleContext(ElifAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(OpenDistroSqlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIfStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIfStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIfStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4118);
			match(IF);
			setState(4119);
			expression(0);
			setState(4120);
			match(THEN);
			setState(4122); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4121);
					((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
					((IfStatementContext)_localctx).thenStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4124); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,590,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4129);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(4126);
				elifAlternative();
				}
				}
				setState(4131);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4132);
				match(ELSE);
				setState(4134); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4133);
						((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
						((IfStatementContext)_localctx).elseStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4136); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,592,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4140);
			match(END);
			setState(4141);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(OpenDistroSqlParser.ITERATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIterateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIterateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIterateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4143);
			match(ITERATE);
			setState(4144);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE() { return getToken(OpenDistroSqlParser.LEAVE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLeaveStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLeaveStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLeaveStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4146);
			match(LEAVE);
			setState(4147);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopStatementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(OpenDistroSqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(OpenDistroSqlParser.LOOP, i);
		}
		public TerminalNode END() { return getToken(OpenDistroSqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLoopStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLoopStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLoopStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoopStatementContext loopStatement() throws RecognitionException {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_loopStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4152);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
				{
				setState(4149);
				uid();
				setState(4150);
				match(COLON_SYMB);
				}
			}

			setState(4154);
			match(LOOP);
			setState(4156); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4155);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4158); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,595,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4160);
			match(END);
			setState(4161);
			match(LOOP);
			setState(4163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
				{
				setState(4162);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatStatementContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT() { return getTokens(OpenDistroSqlParser.REPEAT); }
		public TerminalNode REPEAT(int i) {
			return getToken(OpenDistroSqlParser.REPEAT, i);
		}
		public TerminalNode UNTIL() { return getToken(OpenDistroSqlParser.UNTIL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(OpenDistroSqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRepeatStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRepeatStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRepeatStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatStatementContext repeatStatement() throws RecognitionException {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_repeatStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4168);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
				{
				setState(4165);
				uid();
				setState(4166);
				match(COLON_SYMB);
				}
			}

			setState(4170);
			match(REPEAT);
			setState(4172); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4171);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4174); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,598,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4176);
			match(UNTIL);
			setState(4177);
			expression(0);
			setState(4178);
			match(END);
			setState(4179);
			match(REPEAT);
			setState(4181);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
				{
				setState(4180);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(OpenDistroSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterReturnStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitReturnStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitReturnStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4183);
			match(RETURN);
			setState(4184);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileStatementContext extends ParserRuleContext {
		public List<TerminalNode> WHILE() { return getTokens(OpenDistroSqlParser.WHILE); }
		public TerminalNode WHILE(int i) {
			return getToken(OpenDistroSqlParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(OpenDistroSqlParser.DO, 0); }
		public TerminalNode END() { return getToken(OpenDistroSqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterWhileStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitWhileStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitWhileStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhileStatementContext whileStatement() throws RecognitionException {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_whileStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
				{
				setState(4186);
				uid();
				setState(4187);
				match(COLON_SYMB);
				}
			}

			setState(4191);
			match(WHILE);
			setState(4192);
			expression(0);
			setState(4193);
			match(DO);
			setState(4195); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4194);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4197); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,601,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4199);
			match(END);
			setState(4200);
			match(WHILE);
			setState(4202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)) | (1L << (SERIAL - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (ACCOUNT - 252)) | (1L << (ACTION - 252)) | (1L << (AFTER - 252)) | (1L << (AGGREGATE - 252)) | (1L << (ALGORITHM - 252)) | (1L << (ANY - 252)) | (1L << (AT - 252)) | (1L << (AUTHORS - 252)) | (1L << (AUTOCOMMIT - 252)) | (1L << (AUTOEXTEND_SIZE - 252)) | (1L << (AUTO_INCREMENT - 252)) | (1L << (AVG_ROW_LENGTH - 252)) | (1L << (BEGIN - 252)) | (1L << (BINLOG - 252)) | (1L << (BIT - 252)) | (1L << (BLOCK - 252)) | (1L << (BOOL - 252)) | (1L << (BOOLEAN - 252)) | (1L << (BTREE - 252)) | (1L << (CACHE - 252)) | (1L << (CASCADED - 252)) | (1L << (CHAIN - 252)) | (1L << (CHANGED - 252)) | (1L << (CHANNEL - 252)) | (1L << (CHECKSUM - 252)) | (1L << (PAGE_CHECKSUM - 252)) | (1L << (CIPHER - 252)) | (1L << (CLIENT - 252)) | (1L << (CLOSE - 252)) | (1L << (COALESCE - 252)) | (1L << (CODE - 252)) | (1L << (COLUMNS - 252)) | (1L << (COLUMN_FORMAT - 252)) | (1L << (COMMENT - 252)) | (1L << (COMMIT - 252)) | (1L << (COMPACT - 252)) | (1L << (COMPLETION - 252)) | (1L << (COMPRESSED - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONCURRENT - 252)) | (1L << (CONNECTION - 252)) | (1L << (CONSISTENT - 252)) | (1L << (CONTAINS - 252)) | (1L << (CONTEXT - 252)) | (1L << (CONTRIBUTORS - 252)) | (1L << (COPY - 252)) | (1L << (CPU - 252)) | (1L << (DATA - 252)) | (1L << (DATAFILE - 252)) | (1L << (DEALLOCATE - 252)) | (1L << (DEFAULT_AUTH - 252)) | (1L << (DEFINER - 252)) | (1L << (DELAY_KEY_WRITE - 252)) | (1L << (DES_KEY_FILE - 252)) | (1L << (DIRECTORY - 252)) | (1L << (DISABLE - 252)) | (1L << (DISCARD - 252)) | (1L << (DISK - 252)) | (1L << (DO - 252)) | (1L << (DUMPFILE - 252)) | (1L << (DUPLICATE - 252)) | (1L << (DYNAMIC - 252)) | (1L << (ENABLE - 252)) | (1L << (ENCRYPTION - 252)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (END - 316)) | (1L << (ENDS - 316)) | (1L << (ENGINE - 316)) | (1L << (ENGINES - 316)) | (1L << (ERROR - 316)) | (1L << (ERRORS - 316)) | (1L << (ESCAPE - 316)) | (1L << (EVEN - 316)) | (1L << (EVENT - 316)) | (1L << (EVENTS - 316)) | (1L << (EVERY - 316)) | (1L << (EXCHANGE - 316)) | (1L << (EXCLUSIVE - 316)) | (1L << (EXPIRE - 316)) | (1L << (EXPORT - 316)) | (1L << (EXTENDED - 316)) | (1L << (EXTENT_SIZE - 316)) | (1L << (FAST - 316)) | (1L << (FAULTS - 316)) | (1L << (FIELDS - 316)) | (1L << (FILE_BLOCK_SIZE - 316)) | (1L << (FILTER - 316)) | (1L << (FIRST - 316)) | (1L << (FIXED - 316)) | (1L << (FLUSH - 316)) | (1L << (FOLLOWS - 316)) | (1L << (FOUND - 316)) | (1L << (FULL - 316)) | (1L << (FUNCTION - 316)) | (1L << (GENERAL - 316)) | (1L << (GLOBAL - 316)) | (1L << (GRANTS - 316)) | (1L << (GROUP_REPLICATION - 316)) | (1L << (HANDLER - 316)) | (1L << (HASH - 316)) | (1L << (HELP - 316)) | (1L << (HOST - 316)) | (1L << (HOSTS - 316)) | (1L << (IDENTIFIED - 316)) | (1L << (IGNORE_SERVER_IDS - 316)) | (1L << (IMPORT - 316)) | (1L << (INDEXES - 316)) | (1L << (INITIAL_SIZE - 316)) | (1L << (INPLACE - 316)) | (1L << (INSERT_METHOD - 316)) | (1L << (INSTALL - 316)) | (1L << (INSTANCE - 316)) | (1L << (INVOKER - 316)) | (1L << (IO - 316)) | (1L << (IO_THREAD - 316)) | (1L << (IPC - 316)) | (1L << (ISOLATION - 316)) | (1L << (ISSUER - 316)) | (1L << (JSON - 316)) | (1L << (KEY_BLOCK_SIZE - 316)) | (1L << (LANGUAGE - 316)) | (1L << (LAST - 316)) | (1L << (LEAVES - 316)) | (1L << (LESS - 316)) | (1L << (LEVEL - 316)) | (1L << (LIST - 316)) | (1L << (LOCAL - 316)) | (1L << (LOGFILE - 316)) | (1L << (LOGS - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER - 380)) | (1L << (MASTER_AUTO_POSITION - 380)) | (1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_HEARTBEAT_PERIOD - 380)) | (1L << (MASTER_HOST - 380)) | (1L << (MASTER_LOG_FILE - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PASSWORD - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)) | (1L << (MASTER_SSL - 380)) | (1L << (MASTER_SSL_CA - 380)) | (1L << (MASTER_SSL_CAPATH - 380)) | (1L << (MASTER_SSL_CERT - 380)) | (1L << (MASTER_SSL_CIPHER - 380)) | (1L << (MASTER_SSL_CRL - 380)) | (1L << (MASTER_SSL_CRLPATH - 380)) | (1L << (MASTER_SSL_KEY - 380)) | (1L << (MASTER_TLS_VERSION - 380)) | (1L << (MASTER_USER - 380)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 380)) | (1L << (MAX_QUERIES_PER_HOUR - 380)) | (1L << (MAX_ROWS - 380)) | (1L << (MAX_SIZE - 380)) | (1L << (MAX_UPDATES_PER_HOUR - 380)) | (1L << (MAX_USER_CONNECTIONS - 380)) | (1L << (MEDIUM - 380)) | (1L << (MERGE - 380)) | (1L << (MID - 380)) | (1L << (MIGRATE - 380)) | (1L << (MIN_ROWS - 380)) | (1L << (MODE - 380)) | (1L << (MODIFY - 380)) | (1L << (MUTEX - 380)) | (1L << (MYSQL - 380)) | (1L << (NAME - 380)) | (1L << (NAMES - 380)) | (1L << (NCHAR - 380)) | (1L << (NEVER - 380)) | (1L << (NEXT - 380)) | (1L << (NO - 380)) | (1L << (NODEGROUP - 380)) | (1L << (NONE - 380)) | (1L << (OFFLINE - 380)) | (1L << (OFFSET - 380)) | (1L << (OJ - 380)) | (1L << (OLD_PASSWORD - 380)) | (1L << (ONE - 380)) | (1L << (ONLINE - 380)) | (1L << (ONLY - 380)) | (1L << (OPEN - 380)) | (1L << (OPTIMIZER_COSTS - 380)) | (1L << (OPTIONS - 380)) | (1L << (OWNER - 380)) | (1L << (PACK_KEYS - 380)) | (1L << (PAGE - 380)) | (1L << (PARSER - 380)) | (1L << (PARTIAL - 380)) | (1L << (PARTITIONING - 380)) | (1L << (PARTITIONS - 380)) | (1L << (PASSWORD - 380)) | (1L << (PHASE - 380)) | (1L << (PLUGIN - 380)))) != 0) || ((((_la - 444)) & ~0x3f) == 0 && ((1L << (_la - 444)) & ((1L << (PLUGIN_DIR - 444)) | (1L << (PLUGINS - 444)) | (1L << (PORT - 444)) | (1L << (PRECEDES - 444)) | (1L << (PREPARE - 444)) | (1L << (PRESERVE - 444)) | (1L << (PREV - 444)) | (1L << (PROCESSLIST - 444)) | (1L << (PROFILE - 444)) | (1L << (PROFILES - 444)) | (1L << (PROXY - 444)) | (1L << (QUERY - 444)) | (1L << (QUICK - 444)) | (1L << (REBUILD - 444)) | (1L << (RECOVER - 444)) | (1L << (REDO_BUFFER_SIZE - 444)) | (1L << (REDUNDANT - 444)) | (1L << (RELAY - 444)) | (1L << (RELAY_LOG_FILE - 444)) | (1L << (RELAY_LOG_POS - 444)) | (1L << (RELAYLOG - 444)) | (1L << (REMOVE - 444)) | (1L << (REORGANIZE - 444)) | (1L << (REPAIR - 444)) | (1L << (REPLICATE_DO_DB - 444)) | (1L << (REPLICATE_DO_TABLE - 444)) | (1L << (REPLICATE_IGNORE_DB - 444)) | (1L << (REPLICATE_IGNORE_TABLE - 444)) | (1L << (REPLICATE_REWRITE_DB - 444)) | (1L << (REPLICATE_WILD_DO_TABLE - 444)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 444)) | (1L << (REPLICATION - 444)) | (1L << (RESET - 444)) | (1L << (RESUME - 444)) | (1L << (RETURNS - 444)) | (1L << (ROLLBACK - 444)) | (1L << (ROLLUP - 444)) | (1L << (ROTATE - 444)) | (1L << (ROW - 444)) | (1L << (ROWS - 444)) | (1L << (ROW_FORMAT - 444)) | (1L << (SAVEPOINT - 444)) | (1L << (SCHEDULE - 444)) | (1L << (SECURITY - 444)) | (1L << (SERVER - 444)) | (1L << (SESSION - 444)) | (1L << (SHARE - 444)) | (1L << (SHARED - 444)) | (1L << (SIGNED - 444)) | (1L << (SIMPLE - 444)) | (1L << (SLAVE - 444)) | (1L << (SLOW - 444)) | (1L << (SNAPSHOT - 444)) | (1L << (SOCKET - 444)) | (1L << (SOME - 444)) | (1L << (SONAME - 444)) | (1L << (SOUNDS - 444)) | (1L << (SOURCE - 444)) | (1L << (SQL_AFTER_GTIDS - 444)) | (1L << (SQL_AFTER_MTS_GAPS - 444)) | (1L << (SQL_BEFORE_GTIDS - 444)) | (1L << (SQL_BUFFER_RESULT - 444)) | (1L << (SQL_CACHE - 444)) | (1L << (SQL_NO_CACHE - 444)))) != 0) || ((((_la - 508)) & ~0x3f) == 0 && ((1L << (_la - 508)) & ((1L << (SQL_THREAD - 508)) | (1L << (START - 508)) | (1L << (STARTS - 508)) | (1L << (STATS_AUTO_RECALC - 508)) | (1L << (STATS_PERSISTENT - 508)) | (1L << (STATS_SAMPLE_PAGES - 508)) | (1L << (STATUS - 508)) | (1L << (STOP - 508)) | (1L << (STORAGE - 508)) | (1L << (STRING - 508)) | (1L << (SUBJECT - 508)) | (1L << (SUBPARTITION - 508)) | (1L << (SUBPARTITIONS - 508)) | (1L << (SUSPEND - 508)) | (1L << (SWAPS - 508)) | (1L << (SWITCHES - 508)) | (1L << (TABLESPACE - 508)) | (1L << (TEMPORARY - 508)) | (1L << (TEMPTABLE - 508)) | (1L << (THAN - 508)) | (1L << (TRADITIONAL - 508)) | (1L << (TRANSACTION - 508)) | (1L << (TRIGGERS - 508)) | (1L << (TRUNCATE - 508)) | (1L << (UNDEFINED - 508)) | (1L << (UNDOFILE - 508)) | (1L << (UNDO_BUFFER_SIZE - 508)) | (1L << (UNINSTALL - 508)) | (1L << (UNKNOWN - 508)) | (1L << (UNTIL - 508)) | (1L << (UPGRADE - 508)) | (1L << (USER - 508)) | (1L << (USE_FRM - 508)) | (1L << (USER_RESOURCES - 508)) | (1L << (VALIDATION - 508)) | (1L << (VALUE - 508)) | (1L << (VARIABLES - 508)) | (1L << (VIEW - 508)) | (1L << (WAIT - 508)) | (1L << (WARNINGS - 508)) | (1L << (WITHOUT - 508)) | (1L << (WORK - 508)) | (1L << (WRAPPER - 508)) | (1L << (X509 - 508)) | (1L << (XA - 508)) | (1L << (XML - 508)) | (1L << (INTERNAL - 508)) | (1L << (QUARTER - 508)) | (1L << (MONTH - 508)) | (1L << (DAY - 508)) | (1L << (HOUR - 508)) | (1L << (MINUTE - 508)) | (1L << (WEEK - 508)) | (1L << (SECOND - 508)) | (1L << (MICROSECOND - 508)) | (1L << (TABLES - 508)) | (1L << (ROUTINE - 508)) | (1L << (EXECUTE - 508)))) != 0) || ((((_la - 572)) & ~0x3f) == 0 && ((1L << (_la - 572)) & ((1L << (FILE - 572)) | (1L << (PROCESS - 572)) | (1L << (RELOAD - 572)) | (1L << (SHUTDOWN - 572)) | (1L << (SUPER - 572)) | (1L << (PRIVILEGES - 572)) | (1L << (ARMSCII8 - 572)) | (1L << (ASCII - 572)) | (1L << (BIG5 - 572)) | (1L << (CP1250 - 572)) | (1L << (CP1251 - 572)) | (1L << (CP1256 - 572)) | (1L << (CP1257 - 572)) | (1L << (CP850 - 572)) | (1L << (CP852 - 572)) | (1L << (CP866 - 572)) | (1L << (CP932 - 572)) | (1L << (DEC8 - 572)) | (1L << (EUCJPMS - 572)) | (1L << (EUCKR - 572)) | (1L << (GB2312 - 572)) | (1L << (GBK - 572)) | (1L << (GEOSTD8 - 572)) | (1L << (GREEK - 572)) | (1L << (HEBREW - 572)) | (1L << (HP8 - 572)) | (1L << (KEYBCS2 - 572)) | (1L << (KOI8R - 572)) | (1L << (KOI8U - 572)) | (1L << (LATIN1 - 572)) | (1L << (LATIN2 - 572)) | (1L << (LATIN5 - 572)) | (1L << (LATIN7 - 572)) | (1L << (MACCE - 572)) | (1L << (MACROMAN - 572)) | (1L << (SJIS - 572)) | (1L << (SWE7 - 572)) | (1L << (TIS620 - 572)) | (1L << (UCS2 - 572)) | (1L << (UJIS - 572)) | (1L << (UTF16 - 572)) | (1L << (UTF16LE - 572)) | (1L << (UTF32 - 572)) | (1L << (UTF8 - 572)) | (1L << (UTF8MB3 - 572)) | (1L << (UTF8MB4 - 572)) | (1L << (ARCHIVE - 572)) | (1L << (BLACKHOLE - 572)) | (1L << (CSV - 572)) | (1L << (FEDERATED - 572)) | (1L << (INNODB - 572)) | (1L << (MEMORY - 572)) | (1L << (MRG_MYISAM - 572)) | (1L << (MYISAM - 572)) | (1L << (NDB - 572)) | (1L << (NDBCLUSTER - 572)) | (1L << (PERFORMANCE_SCHEMA - 572)) | (1L << (TOKUDB - 572)) | (1L << (REPEATABLE - 572)) | (1L << (COMMITTED - 572)) | (1L << (UNCOMMITTED - 572)) | (1L << (SERIALIZABLE - 572)) | (1L << (GEOMETRYCOLLECTION - 572)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (LINESTRING - 637)) | (1L << (MULTILINESTRING - 637)) | (1L << (MULTIPOINT - 637)) | (1L << (MULTIPOLYGON - 637)) | (1L << (POINT - 637)) | (1L << (POLYGON - 637)) | (1L << (ABS - 637)) | (1L << (ACOS - 637)) | (1L << (ADDDATE - 637)) | (1L << (ADDTIME - 637)) | (1L << (AES_DECRYPT - 637)) | (1L << (AES_ENCRYPT - 637)) | (1L << (AREA - 637)) | (1L << (ASBINARY - 637)) | (1L << (ASIN - 637)) | (1L << (ASTEXT - 637)) | (1L << (ASWKB - 637)) | (1L << (ASWKT - 637)) | (1L << (ASYMMETRIC_DECRYPT - 637)) | (1L << (ASYMMETRIC_DERIVE - 637)) | (1L << (ASYMMETRIC_ENCRYPT - 637)) | (1L << (ASYMMETRIC_SIGN - 637)) | (1L << (ASYMMETRIC_VERIFY - 637)) | (1L << (ATAN - 637)) | (1L << (ATAN2 - 637)) | (1L << (BENCHMARK - 637)) | (1L << (BIN - 637)) | (1L << (BIT_COUNT - 637)) | (1L << (BIT_LENGTH - 637)) | (1L << (BUFFER - 637)) | (1L << (CEIL - 637)) | (1L << (CEILING - 637)) | (1L << (CENTROID - 637)) | (1L << (CHARACTER_LENGTH - 637)) | (1L << (CHARSET - 637)) | (1L << (CHAR_LENGTH - 637)) | (1L << (COERCIBILITY - 637)) | (1L << (COLLATION - 637)) | (1L << (COMPRESS - 637)) | (1L << (CONCAT - 637)) | (1L << (CONCAT_WS - 637)) | (1L << (CONNECTION_ID - 637)) | (1L << (CONV - 637)) | (1L << (CONVERT_TZ - 637)) | (1L << (COS - 637)) | (1L << (COT - 637)) | (1L << (CRC32 - 637)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 637)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 637)) | (1L << (CREATE_DH_PARAMETERS - 637)) | (1L << (CREATE_DIGEST - 637)) | (1L << (CROSSES - 637)) | (1L << (DATEDIFF - 637)) | (1L << (DATE_FORMAT - 637)) | (1L << (DAYNAME - 637)) | (1L << (DAYOFMONTH - 637)) | (1L << (DAYOFWEEK - 637)) | (1L << (DAYOFYEAR - 637)) | (1L << (DECODE - 637)) | (1L << (DEGREES - 637)) | (1L << (DES_DECRYPT - 637)) | (1L << (DES_ENCRYPT - 637)) | (1L << (DIMENSION - 637)) | (1L << (DISJOINT - 637)))) != 0) || ((((_la - 701)) & ~0x3f) == 0 && ((1L << (_la - 701)) & ((1L << (ELT - 701)) | (1L << (ENCODE - 701)) | (1L << (ENCRYPT - 701)) | (1L << (ENDPOINT - 701)) | (1L << (ENVELOPE - 701)) | (1L << (EQUALS - 701)) | (1L << (EXP - 701)) | (1L << (EXPORT_SET - 701)) | (1L << (EXTERIORRING - 701)) | (1L << (EXTRACTVALUE - 701)) | (1L << (FIELD - 701)) | (1L << (FIND_IN_SET - 701)) | (1L << (FLOOR - 701)) | (1L << (FORMAT - 701)) | (1L << (FOUND_ROWS - 701)) | (1L << (FROM_BASE64 - 701)) | (1L << (FROM_DAYS - 701)) | (1L << (FROM_UNIXTIME - 701)) | (1L << (GEOMCOLLFROMTEXT - 701)) | (1L << (GEOMCOLLFROMWKB - 701)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 701)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 701)) | (1L << (GEOMETRYFROMTEXT - 701)) | (1L << (GEOMETRYFROMWKB - 701)) | (1L << (GEOMETRYN - 701)) | (1L << (GEOMETRYTYPE - 701)) | (1L << (GEOMFROMTEXT - 701)) | (1L << (GEOMFROMWKB - 701)) | (1L << (GET_FORMAT - 701)) | (1L << (GET_LOCK - 701)) | (1L << (GLENGTH - 701)) | (1L << (GREATEST - 701)) | (1L << (GTID_SUBSET - 701)) | (1L << (GTID_SUBTRACT - 701)) | (1L << (HEX - 701)) | (1L << (IFNULL - 701)) | (1L << (INET6_ATON - 701)) | (1L << (INET6_NTOA - 701)) | (1L << (INET_ATON - 701)) | (1L << (INET_NTOA - 701)) | (1L << (INSTR - 701)) | (1L << (INTERIORRINGN - 701)) | (1L << (INTERSECTS - 701)) | (1L << (ISCLOSED - 701)) | (1L << (ISEMPTY - 701)) | (1L << (ISNULL - 701)) | (1L << (ISSIMPLE - 701)) | (1L << (IS_FREE_LOCK - 701)) | (1L << (IS_IPV4 - 701)) | (1L << (IS_IPV4_COMPAT - 701)) | (1L << (IS_IPV4_MAPPED - 701)) | (1L << (IS_IPV6 - 701)) | (1L << (IS_USED_LOCK - 701)) | (1L << (LAST_INSERT_ID - 701)) | (1L << (LCASE - 701)) | (1L << (LEAST - 701)) | (1L << (LENGTH - 701)) | (1L << (LINEFROMTEXT - 701)) | (1L << (LINEFROMWKB - 701)) | (1L << (LINESTRINGFROMTEXT - 701)) | (1L << (LINESTRINGFROMWKB - 701)) | (1L << (LN - 701)) | (1L << (LOAD_FILE - 701)) | (1L << (LOCATE - 701)))) != 0) || ((((_la - 765)) & ~0x3f) == 0 && ((1L << (_la - 765)) & ((1L << (LOG - 765)) | (1L << (LOG10 - 765)) | (1L << (LOG2 - 765)) | (1L << (LOWER - 765)) | (1L << (LPAD - 765)) | (1L << (LTRIM - 765)) | (1L << (MAKEDATE - 765)) | (1L << (MAKETIME - 765)) | (1L << (MAKE_SET - 765)) | (1L << (MASTER_POS_WAIT - 765)) | (1L << (MBRCONTAINS - 765)) | (1L << (MBRDISJOINT - 765)) | (1L << (MBREQUAL - 765)) | (1L << (MBRINTERSECTS - 765)) | (1L << (MBROVERLAPS - 765)) | (1L << (MBRTOUCHES - 765)) | (1L << (MBRWITHIN - 765)) | (1L << (MD5 - 765)) | (1L << (MLINEFROMTEXT - 765)) | (1L << (MLINEFROMWKB - 765)) | (1L << (MONTHNAME - 765)) | (1L << (MPOINTFROMTEXT - 765)) | (1L << (MPOINTFROMWKB - 765)) | (1L << (MPOLYFROMTEXT - 765)) | (1L << (MPOLYFROMWKB - 765)) | (1L << (MULTILINESTRINGFROMTEXT - 765)) | (1L << (MULTILINESTRINGFROMWKB - 765)) | (1L << (MULTIPOINTFROMTEXT - 765)) | (1L << (MULTIPOINTFROMWKB - 765)) | (1L << (MULTIPOLYGONFROMTEXT - 765)) | (1L << (MULTIPOLYGONFROMWKB - 765)) | (1L << (NAME_CONST - 765)) | (1L << (NULLIF - 765)) | (1L << (NUMGEOMETRIES - 765)) | (1L << (NUMINTERIORRINGS - 765)) | (1L << (NUMPOINTS - 765)) | (1L << (OCT - 765)) | (1L << (OCTET_LENGTH - 765)) | (1L << (ORD - 765)) | (1L << (OVERLAPS - 765)) | (1L << (PERIOD_ADD - 765)) | (1L << (PERIOD_DIFF - 765)) | (1L << (PI - 765)) | (1L << (POINTFROMTEXT - 765)) | (1L << (POINTFROMWKB - 765)) | (1L << (POINTN - 765)) | (1L << (POLYFROMTEXT - 765)) | (1L << (POLYFROMWKB - 765)) | (1L << (POLYGONFROMTEXT - 765)) | (1L << (POLYGONFROMWKB - 765)) | (1L << (POW - 765)) | (1L << (POWER - 765)) | (1L << (QUOTE - 765)) | (1L << (RADIANS - 765)) | (1L << (RAND - 765)) | (1L << (RANDOM_BYTES - 765)) | (1L << (RELEASE_LOCK - 765)) | (1L << (REVERSE - 765)) | (1L << (ROUND - 765)) | (1L << (ROW_COUNT - 765)) | (1L << (RPAD - 765)) | (1L << (RTRIM - 765)) | (1L << (SEC_TO_TIME - 765)) | (1L << (SESSION_USER - 765)))) != 0) || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & ((1L << (SHA - 829)) | (1L << (SHA1 - 829)) | (1L << (SHA2 - 829)) | (1L << (SIGN - 829)) | (1L << (SIN - 829)) | (1L << (SLEEP - 829)) | (1L << (SOUNDEX - 829)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 829)) | (1L << (SQRT - 829)) | (1L << (SRID - 829)) | (1L << (STARTPOINT - 829)) | (1L << (STRCMP - 829)) | (1L << (STR_TO_DATE - 829)) | (1L << (ST_AREA - 829)) | (1L << (ST_ASBINARY - 829)) | (1L << (ST_ASTEXT - 829)) | (1L << (ST_ASWKB - 829)) | (1L << (ST_ASWKT - 829)) | (1L << (ST_BUFFER - 829)) | (1L << (ST_CENTROID - 829)) | (1L << (ST_CONTAINS - 829)) | (1L << (ST_CROSSES - 829)) | (1L << (ST_DIFFERENCE - 829)) | (1L << (ST_DIMENSION - 829)) | (1L << (ST_DISJOINT - 829)) | (1L << (ST_DISTANCE - 829)) | (1L << (ST_ENDPOINT - 829)) | (1L << (ST_ENVELOPE - 829)) | (1L << (ST_EQUALS - 829)) | (1L << (ST_EXTERIORRING - 829)) | (1L << (ST_GEOMCOLLFROMTEXT - 829)) | (1L << (ST_GEOMCOLLFROMTXT - 829)) | (1L << (ST_GEOMCOLLFROMWKB - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 829)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 829)) | (1L << (ST_GEOMETRYFROMTEXT - 829)) | (1L << (ST_GEOMETRYFROMWKB - 829)) | (1L << (ST_GEOMETRYN - 829)) | (1L << (ST_GEOMETRYTYPE - 829)) | (1L << (ST_GEOMFROMTEXT - 829)) | (1L << (ST_GEOMFROMWKB - 829)) | (1L << (ST_INTERIORRINGN - 829)) | (1L << (ST_INTERSECTION - 829)) | (1L << (ST_INTERSECTS - 829)) | (1L << (ST_ISCLOSED - 829)) | (1L << (ST_ISEMPTY - 829)) | (1L << (ST_ISSIMPLE - 829)) | (1L << (ST_LINEFROMTEXT - 829)) | (1L << (ST_LINEFROMWKB - 829)) | (1L << (ST_LINESTRINGFROMTEXT - 829)) | (1L << (ST_LINESTRINGFROMWKB - 829)) | (1L << (ST_NUMGEOMETRIES - 829)) | (1L << (ST_NUMINTERIORRING - 829)) | (1L << (ST_NUMINTERIORRINGS - 829)) | (1L << (ST_NUMPOINTS - 829)) | (1L << (ST_OVERLAPS - 829)) | (1L << (ST_POINTFROMTEXT - 829)) | (1L << (ST_POINTFROMWKB - 829)) | (1L << (ST_POINTN - 829)) | (1L << (ST_POLYFROMTEXT - 829)) | (1L << (ST_POLYFROMWKB - 829)) | (1L << (ST_POLYGONFROMTEXT - 829)) | (1L << (ST_POLYGONFROMWKB - 829)) | (1L << (ST_SRID - 829)))) != 0) || ((((_la - 893)) & ~0x3f) == 0 && ((1L << (_la - 893)) & ((1L << (ST_STARTPOINT - 893)) | (1L << (ST_SYMDIFFERENCE - 893)) | (1L << (ST_TOUCHES - 893)) | (1L << (ST_UNION - 893)) | (1L << (ST_WITHIN - 893)) | (1L << (ST_X - 893)) | (1L << (ST_Y - 893)) | (1L << (SUBDATE - 893)) | (1L << (SUBSTRING_INDEX - 893)) | (1L << (SUBTIME - 893)) | (1L << (SYSTEM_USER - 893)) | (1L << (TAN - 893)) | (1L << (TIMEDIFF - 893)) | (1L << (TIMESTAMPADD - 893)) | (1L << (TIMESTAMPDIFF - 893)) | (1L << (TIME_FORMAT - 893)) | (1L << (TIME_TO_SEC - 893)) | (1L << (TOUCHES - 893)) | (1L << (TO_BASE64 - 893)) | (1L << (TO_DAYS - 893)) | (1L << (TO_SECONDS - 893)) | (1L << (UCASE - 893)) | (1L << (UNCOMPRESS - 893)) | (1L << (UNCOMPRESSED_LENGTH - 893)) | (1L << (UNHEX - 893)) | (1L << (UNIX_TIMESTAMP - 893)) | (1L << (UPDATEXML - 893)) | (1L << (UPPER - 893)) | (1L << (UUID - 893)) | (1L << (UUID_SHORT - 893)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 893)) | (1L << (VERSION - 893)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 893)) | (1L << (WEEKDAY - 893)) | (1L << (WEEKOFYEAR - 893)) | (1L << (WEIGHT_STRING - 893)) | (1L << (WITHIN - 893)) | (1L << (YEARWEEK - 893)) | (1L << (Y_FUNCTION - 893)) | (1L << (X_FUNCTION - 893)))) != 0) || ((((_la - 971)) & ~0x3f) == 0 && ((1L << (_la - 971)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 971)) | (1L << (STRING_LITERAL - 971)) | (1L << (ID - 971)) | (1L << (REVERSE_QUOTE_ID - 971)))) != 0)) {
				{
				setState(4201);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorStatementContext extends ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorStatement; }
	 
		public CursorStatementContext() { }
		public void copyFrom(CursorStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CloseCursorContext extends CursorStatementContext {
		public TerminalNode CLOSE() { return getToken(OpenDistroSqlParser.CLOSE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CloseCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCloseCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCloseCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCloseCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OpenCursorContext extends CursorStatementContext {
		public TerminalNode OPEN() { return getToken(OpenDistroSqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public OpenCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterOpenCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitOpenCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitOpenCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FetchCursorContext extends CursorStatementContext {
		public TerminalNode FETCH() { return getToken(OpenDistroSqlParser.FETCH, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INTO() { return getToken(OpenDistroSqlParser.INTO, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(OpenDistroSqlParser.FROM, 0); }
		public TerminalNode NEXT() { return getToken(OpenDistroSqlParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterFetchCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitFetchCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitFetchCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorStatementContext cursorStatement() throws RecognitionException {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_cursorStatement);
		int _la;
		try {
			setState(4219);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4204);
				match(CLOSE);
				setState(4205);
				uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4206);
				match(FETCH);
				setState(4211);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,604,_ctx) ) {
				case 1:
					{
					setState(4208);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEXT) {
						{
						setState(4207);
						match(NEXT);
						}
					}

					setState(4210);
					match(FROM);
					}
					break;
				}
				setState(4213);
				uid();
				setState(4214);
				match(INTO);
				setState(4215);
				uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4217);
				match(OPEN);
				setState(4218);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareVariableContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(OpenDistroSqlParser.DECLARE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDeclareVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDeclareVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDeclareVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareVariableContext declareVariable() throws RecognitionException {
		DeclareVariableContext _localctx = new DeclareVariableContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_declareVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4221);
			match(DECLARE);
			setState(4222);
			uidList();
			setState(4223);
			dataType();
			setState(4226);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4224);
				match(DEFAULT);
				setState(4225);
				defaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareConditionContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(OpenDistroSqlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONDITION() { return getToken(OpenDistroSqlParser.CONDITION, 0); }
		public TerminalNode FOR() { return getToken(OpenDistroSqlParser.FOR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(OpenDistroSqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(OpenDistroSqlParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDeclareCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDeclareCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDeclareCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareConditionContext declareCondition() throws RecognitionException {
		DeclareConditionContext _localctx = new DeclareConditionContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_declareCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4228);
			match(DECLARE);
			setState(4229);
			uid();
			setState(4230);
			match(CONDITION);
			setState(4231);
			match(FOR);
			setState(4238);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				{
				setState(4232);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				setState(4233);
				match(SQLSTATE);
				setState(4235);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4234);
					match(VALUE);
					}
				}

				setState(4237);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareCursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(OpenDistroSqlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(OpenDistroSqlParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(OpenDistroSqlParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDeclareCursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDeclareCursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDeclareCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorContext declareCursor() throws RecognitionException {
		DeclareCursorContext _localctx = new DeclareCursorContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_declareCursor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4240);
			match(DECLARE);
			setState(4241);
			uid();
			setState(4242);
			match(CURSOR);
			setState(4243);
			match(FOR);
			setState(4244);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareHandlerContext extends ParserRuleContext {
		public Token handlerAction;
		public TerminalNode DECLARE() { return getToken(OpenDistroSqlParser.DECLARE, 0); }
		public TerminalNode HANDLER() { return getToken(OpenDistroSqlParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(OpenDistroSqlParser.FOR, 0); }
		public List<HandlerConditionValueContext> handlerConditionValue() {
			return getRuleContexts(HandlerConditionValueContext.class);
		}
		public HandlerConditionValueContext handlerConditionValue(int i) {
			return getRuleContext(HandlerConditionValueContext.class,i);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(OpenDistroSqlParser.CONTINUE, 0); }
		public TerminalNode EXIT() { return getToken(OpenDistroSqlParser.EXIT, 0); }
		public TerminalNode UNDO() { return getToken(OpenDistroSqlParser.UNDO, 0); }
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareHandler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDeclareHandler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDeclareHandler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDeclareHandler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareHandlerContext declareHandler() throws RecognitionException {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_declareHandler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4246);
			match(DECLARE);
			setState(4247);
			((DeclareHandlerContext)_localctx).handlerAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				((DeclareHandlerContext)_localctx).handlerAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4248);
			match(HANDLER);
			setState(4249);
			match(FOR);
			setState(4250);
			handlerConditionValue();
			setState(4255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4251);
				match(COMMA);
				setState(4252);
				handlerConditionValue();
				}
				}
				setState(4257);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4258);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerConditionValueContext extends ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerConditionValue; }
	 
		public HandlerConditionValueContext() { }
		public void copyFrom(HandlerConditionValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class HandlerConditionWarningContext extends HandlerConditionValueContext {
		public TerminalNode SQLWARNING() { return getToken(OpenDistroSqlParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterHandlerConditionWarning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitHandlerConditionWarning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitHandlerConditionWarning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionCodeContext extends HandlerConditionValueContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterHandlerConditionCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitHandlerConditionCode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitHandlerConditionCode(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
		public TerminalNode NOT() { return getToken(OpenDistroSqlParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(OpenDistroSqlParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterHandlerConditionNotfound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitHandlerConditionNotfound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitHandlerConditionNotfound(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionStateContext extends HandlerConditionValueContext {
		public TerminalNode SQLSTATE() { return getToken(OpenDistroSqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(OpenDistroSqlParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterHandlerConditionState(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitHandlerConditionState(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitHandlerConditionState(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionExceptionContext extends HandlerConditionValueContext {
		public TerminalNode SQLEXCEPTION() { return getToken(OpenDistroSqlParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterHandlerConditionException(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitHandlerConditionException(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitHandlerConditionException(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNameContext extends HandlerConditionValueContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterHandlerConditionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitHandlerConditionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitHandlerConditionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerConditionValueContext handlerConditionValue() throws RecognitionException {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_handlerConditionValue);
		int _la;
		try {
			setState(4271);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4260);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4261);
				match(SQLSTATE);
				setState(4263);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4262);
					match(VALUE);
					}
				}

				setState(4265);
				match(STRING_LITERAL);
				}
				break;
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4266);
				uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4267);
				match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4268);
				match(NOT);
				setState(4269);
				match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4270);
				match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureSqlStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(OpenDistroSqlParser.SEMI, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureSqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterProcedureSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitProcedureSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitProcedureSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureSqlStatementContext procedureSqlStatement() throws RecognitionException {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_procedureSqlStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4275);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,612,_ctx) ) {
			case 1:
				{
				setState(4273);
				compoundStatement();
				}
				break;
			case 2:
				{
				setState(4274);
				sqlStatement();
				}
				break;
			}
			setState(4277);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseAlternativeContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(OpenDistroSqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(OpenDistroSqlParser.THEN, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCaseAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCaseAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCaseAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseAlternativeContext caseAlternative() throws RecognitionException {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_caseAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4279);
			match(WHEN);
			setState(4282);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
			case 1:
				{
				setState(4280);
				constant();
				}
				break;
			case 2:
				{
				setState(4281);
				expression(0);
				}
				break;
			}
			setState(4284);
			match(THEN);
			setState(4286); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4285);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4288); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,614,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElifAlternativeContext extends ParserRuleContext {
		public TerminalNode ELSEIF() { return getToken(OpenDistroSqlParser.ELSEIF, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(OpenDistroSqlParser.THEN, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elifAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterElifAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitElifAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitElifAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElifAlternativeContext elifAlternative() throws RecognitionException {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_elifAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4290);
			match(ELSEIF);
			setState(4291);
			expression(0);
			setState(4292);
			match(THEN);
			setState(4294); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4293);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4296); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,615,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserContext extends ParserRuleContext {
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
	 
		public AlterUserContext() { }
		public void copyFrom(AlterUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUserMysqlV56Context extends AlterUserContext {
		public TerminalNode ALTER() { return getToken(OpenDistroSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(OpenDistroSqlParser.USER, 0); }
		public List<UserSpecificationContext> userSpecification() {
			return getRuleContexts(UserSpecificationContext.class);
		}
		public UserSpecificationContext userSpecification(int i) {
			return getRuleContext(UserSpecificationContext.class,i);
		}
		public AlterUserMysqlV56Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterUserMysqlV56(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterUserMysqlV57Context extends AlterUserContext {
		public Token tlsNone;
		public TerminalNode ALTER() { return getToken(OpenDistroSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(OpenDistroSqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode REQUIRE() { return getToken(OpenDistroSqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(OpenDistroSqlParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(OpenDistroSqlParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(OpenDistroSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(OpenDistroSqlParser.AND, i);
		}
		public AlterUserMysqlV57Context(AlterUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAlterUserMysqlV57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAlterUserMysqlV57(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAlterUserMysqlV57(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_alterUser);
		int _la;
		try {
			setState(4352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,627,_ctx) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4298);
				match(ALTER);
				setState(4299);
				match(USER);
				setState(4300);
				userSpecification();
				setState(4305);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4301);
					match(COMMA);
					setState(4302);
					userSpecification();
					}
					}
					setState(4307);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4308);
				match(ALTER);
				setState(4309);
				match(USER);
				setState(4311);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4310);
					ifExists();
					}
				}

				setState(4313);
				userAuthOption();
				setState(4318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4314);
					match(COMMA);
					setState(4315);
					userAuthOption();
					}
					}
					setState(4320);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4321);
					match(REQUIRE);
					setState(4333);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4322);
						((AlterUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4323);
						tlsOption();
						setState(4330);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4325);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4324);
								match(AND);
								}
							}

							setState(4327);
							tlsOption();
							}
							}
							setState(4332);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4343);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4337);
					match(WITH);
					setState(4339); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4338);
						userResourceOption();
						}
						}
						setState(4341); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 401)) & ~0x3f) == 0 && ((1L << (_la - 401)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 401)) | (1L << (MAX_QUERIES_PER_HOUR - 401)) | (1L << (MAX_UPDATES_PER_HOUR - 401)) | (1L << (MAX_USER_CONNECTIONS - 401)))) != 0) );
					}
				}

				setState(4349);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4347);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4345);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4346);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4351);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserContext extends ParserRuleContext {
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
	 
		public CreateUserContext() { }
		public void copyFrom(CreateUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CreateUserMysqlV57Context extends CreateUserContext {
		public Token tlsNone;
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(OpenDistroSqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode REQUIRE() { return getToken(OpenDistroSqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(OpenDistroSqlParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(OpenDistroSqlParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(OpenDistroSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(OpenDistroSqlParser.AND, i);
		}
		public CreateUserMysqlV57Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCreateUserMysqlV57(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCreateUserMysqlV57(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCreateUserMysqlV57(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CreateUserMysqlV56Context extends CreateUserContext {
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(OpenDistroSqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public CreateUserMysqlV56Context(CreateUserContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCreateUserMysqlV56(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCreateUserMysqlV56(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCreateUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_createUser);
		int _la;
		try {
			setState(4408);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,639,_ctx) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4354);
				match(CREATE);
				setState(4355);
				match(USER);
				setState(4356);
				userAuthOption();
				setState(4361);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4357);
					match(COMMA);
					setState(4358);
					userAuthOption();
					}
					}
					setState(4363);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new CreateUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4364);
				match(CREATE);
				setState(4365);
				match(USER);
				setState(4367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4366);
					ifNotExists();
					}
				}

				setState(4369);
				userAuthOption();
				setState(4374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4370);
					match(COMMA);
					setState(4371);
					userAuthOption();
					}
					}
					setState(4376);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4377);
					match(REQUIRE);
					setState(4389);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4378);
						((CreateUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4379);
						tlsOption();
						setState(4386);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4381);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4380);
								match(AND);
								}
							}

							setState(4383);
							tlsOption();
							}
							}
							setState(4388);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4393);
					match(WITH);
					setState(4395); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4394);
						userResourceOption();
						}
						}
						setState(4397); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 401)) & ~0x3f) == 0 && ((1L << (_la - 401)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 401)) | (1L << (MAX_QUERIES_PER_HOUR - 401)) | (1L << (MAX_UPDATES_PER_HOUR - 401)) | (1L << (MAX_USER_CONNECTIONS - 401)))) != 0) );
					}
				}

				setState(4405);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==PASSWORD) {
					{
					setState(4403);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4401);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4402);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4407);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(OpenDistroSqlParser.USER, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDropUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDropUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDropUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_dropUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4410);
			match(DROP);
			setState(4411);
			match(USER);
			setState(4413);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4412);
				ifExists();
				}
			}

			setState(4415);
			userName();
			setState(4420);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4416);
				match(COMMA);
				setState(4417);
				userName();
				}
				}
				setState(4422);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantStatementContext extends ParserRuleContext {
		public Token privilegeObject;
		public Token tlsNone;
		public List<TerminalNode> GRANT() { return getTokens(OpenDistroSqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(OpenDistroSqlParser.GRANT, i);
		}
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(OpenDistroSqlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode TO() { return getToken(OpenDistroSqlParser.TO, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public TerminalNode REQUIRE() { return getToken(OpenDistroSqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(OpenDistroSqlParser.WITH, 0); }
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(OpenDistroSqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(OpenDistroSqlParser.PROCEDURE, 0); }
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(OpenDistroSqlParser.NONE, 0); }
		public List<TerminalNode> OPTION() { return getTokens(OpenDistroSqlParser.OPTION); }
		public TerminalNode OPTION(int i) {
			return getToken(OpenDistroSqlParser.OPTION, i);
		}
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(OpenDistroSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(OpenDistroSqlParser.AND, i);
		}
		public GrantStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterGrantStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitGrantStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitGrantStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantStatementContext grantStatement() throws RecognitionException {
		GrantStatementContext _localctx = new GrantStatementContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_grantStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4423);
			match(GRANT);
			setState(4424);
			privelegeClause();
			setState(4429);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4425);
				match(COMMA);
				setState(4426);
				privelegeClause();
				}
				}
				setState(4431);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4432);
			match(ON);
			setState(4434);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
			case 1:
				{
				setState(4433);
				((GrantStatementContext)_localctx).privilegeObject = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
					((GrantStatementContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4436);
			privilegeLevel();
			setState(4437);
			match(TO);
			setState(4438);
			userAuthOption();
			setState(4443);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4439);
				match(COMMA);
				setState(4440);
				userAuthOption();
				}
				}
				setState(4445);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REQUIRE) {
				{
				setState(4446);
				match(REQUIRE);
				setState(4458);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONE:
					{
					setState(4447);
					((GrantStatementContext)_localctx).tlsNone = match(NONE);
					}
					break;
				case SSL:
				case CIPHER:
				case ISSUER:
				case SUBJECT:
				case X509:
					{
					setState(4448);
					tlsOption();
					setState(4455);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
						{
						{
						setState(4450);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AND) {
							{
							setState(4449);
							match(AND);
							}
						}

						setState(4452);
						tlsOption();
						}
						}
						setState(4457);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(4471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4462);
				match(WITH);
				setState(4468);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,650,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(4466);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case GRANT:
							{
							setState(4463);
							match(GRANT);
							setState(4464);
							match(OPTION);
							}
							break;
						case MAX_CONNECTIONS_PER_HOUR:
						case MAX_QUERIES_PER_HOUR:
						case MAX_UPDATES_PER_HOUR:
						case MAX_USER_CONNECTIONS:
							{
							setState(4465);
							userResourceOption();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					setState(4470);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,650,_ctx);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantProxyContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public UserNameContext userName;
		public List<UserNameContext> toOther = new ArrayList<UserNameContext>();
		public List<TerminalNode> GRANT() { return getTokens(OpenDistroSqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(OpenDistroSqlParser.GRANT, i);
		}
		public TerminalNode PROXY() { return getToken(OpenDistroSqlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(OpenDistroSqlParser.ON, 0); }
		public TerminalNode TO() { return getToken(OpenDistroSqlParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode WITH() { return getToken(OpenDistroSqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(OpenDistroSqlParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterGrantProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitGrantProxy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitGrantProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantProxyContext grantProxy() throws RecognitionException {
		GrantProxyContext _localctx = new GrantProxyContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_grantProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4473);
			match(GRANT);
			setState(4474);
			match(PROXY);
			setState(4475);
			match(ON);
			setState(4476);
			((GrantProxyContext)_localctx).fromFirst = userName();
			setState(4477);
			match(TO);
			setState(4478);
			((GrantProxyContext)_localctx).toFirst = userName();
			setState(4483);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4479);
				match(COMMA);
				setState(4480);
				((GrantProxyContext)_localctx).userName = userName();
				((GrantProxyContext)_localctx).toOther.add(((GrantProxyContext)_localctx).userName);
				}
				}
				setState(4485);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4489);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4486);
				match(WITH);
				setState(4487);
				match(GRANT);
				setState(4488);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(OpenDistroSqlParser.RENAME, 0); }
		public TerminalNode USER() { return getToken(OpenDistroSqlParser.USER, 0); }
		public List<RenameUserClauseContext> renameUserClause() {
			return getRuleContexts(RenameUserClauseContext.class);
		}
		public RenameUserClauseContext renameUserClause(int i) {
			return getRuleContext(RenameUserClauseContext.class,i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRenameUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRenameUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRenameUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_renameUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4491);
			match(RENAME);
			setState(4492);
			match(USER);
			setState(4493);
			renameUserClause();
			setState(4498);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4494);
				match(COMMA);
				setState(4495);
				renameUserClause();
				}
				}
				setState(4500);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeStatementContext extends ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStatement; }
	 
		public RevokeStatementContext() { }
		public void copyFrom(RevokeStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DetailRevokeContext extends RevokeStatementContext {
		public Token privilegeObject;
		public TerminalNode REVOKE() { return getToken(OpenDistroSqlParser.REVOKE, 0); }
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(OpenDistroSqlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode FROM() { return getToken(OpenDistroSqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(OpenDistroSqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(OpenDistroSqlParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDetailRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDetailRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDetailRevoke(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShortRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(OpenDistroSqlParser.REVOKE, 0); }
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public TerminalNode GRANT() { return getToken(OpenDistroSqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(OpenDistroSqlParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(OpenDistroSqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode PRIVILEGES() { return getToken(OpenDistroSqlParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShortRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShortRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShortRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeStatementContext revokeStatement() throws RecognitionException {
		RevokeStatementContext _localctx = new RevokeStatementContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_revokeStatement);
		int _la;
		try {
			setState(4541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4501);
				match(REVOKE);
				setState(4502);
				privelegeClause();
				setState(4507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4503);
					match(COMMA);
					setState(4504);
					privelegeClause();
					}
					}
					setState(4509);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4510);
				match(ON);
				setState(4512);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
				case 1:
					{
					setState(4511);
					((DetailRevokeContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4514);
				privilegeLevel();
				setState(4515);
				match(FROM);
				setState(4516);
				userName();
				setState(4521);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4517);
					match(COMMA);
					setState(4518);
					userName();
					}
					}
					setState(4523);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4524);
				match(REVOKE);
				setState(4525);
				match(ALL);
				setState(4527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4526);
					match(PRIVILEGES);
					}
				}

				setState(4529);
				match(COMMA);
				setState(4530);
				match(GRANT);
				setState(4531);
				match(OPTION);
				setState(4532);
				match(FROM);
				setState(4533);
				userName();
				setState(4538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4534);
					match(COMMA);
					setState(4535);
					userName();
					}
					}
					setState(4540);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeProxyContext extends ParserRuleContext {
		public UserNameContext onUser;
		public UserNameContext fromFirst;
		public UserNameContext userName;
		public List<UserNameContext> fromOther = new ArrayList<UserNameContext>();
		public TerminalNode REVOKE() { return getToken(OpenDistroSqlParser.REVOKE, 0); }
		public TerminalNode PROXY() { return getToken(OpenDistroSqlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(OpenDistroSqlParser.ON, 0); }
		public TerminalNode FROM() { return getToken(OpenDistroSqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeProxy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRevokeProxy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRevokeProxy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRevokeProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeProxyContext revokeProxy() throws RecognitionException {
		RevokeProxyContext _localctx = new RevokeProxyContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_revokeProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4543);
			match(REVOKE);
			setState(4544);
			match(PROXY);
			setState(4545);
			match(ON);
			setState(4546);
			((RevokeProxyContext)_localctx).onUser = userName();
			setState(4547);
			match(FROM);
			setState(4548);
			((RevokeProxyContext)_localctx).fromFirst = userName();
			setState(4553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4549);
				match(COMMA);
				setState(4550);
				((RevokeProxyContext)_localctx).userName = userName();
				((RevokeProxyContext)_localctx).fromOther.add(((RevokeProxyContext)_localctx).userName);
				}
				}
				setState(4555);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetPasswordStatementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public TerminalNode PASSWORD() { return getToken(OpenDistroSqlParser.PASSWORD, 0); }
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode FOR() { return getToken(OpenDistroSqlParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SetPasswordStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setPasswordStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSetPasswordStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSetPasswordStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSetPasswordStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetPasswordStatementContext setPasswordStatement() throws RecognitionException {
		SetPasswordStatementContext _localctx = new SetPasswordStatementContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_setPasswordStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4556);
			match(SET);
			setState(4557);
			match(PASSWORD);
			setState(4560);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4558);
				match(FOR);
				setState(4559);
				userName();
				}
			}

			setState(4562);
			match(EQUAL_SYMBOL);
			setState(4565);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				{
				setState(4563);
				passwordFunctionClause();
				}
				break;
			case STRING_LITERAL:
				{
				setState(4564);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserSpecificationContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UserPasswordOptionContext userPasswordOption() {
			return getRuleContext(UserPasswordOptionContext.class,0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUserSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUserSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUserSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserSpecificationContext userSpecification() throws RecognitionException {
		UserSpecificationContext _localctx = new UserSpecificationContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_userSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4567);
			userName();
			setState(4568);
			userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserAuthOptionContext extends ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userAuthOption; }
	 
		public UserAuthOptionContext() { }
		public void copyFrom(UserAuthOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSimpleAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSimpleAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSimpleAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordAuthOptionContext extends UserAuthOptionContext {
		public Token hashed;
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(OpenDistroSqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(OpenDistroSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(OpenDistroSqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public PasswordAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPasswordAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPasswordAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPasswordAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(OpenDistroSqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(OpenDistroSqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode WITH() { return getToken(OpenDistroSqlParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public StringAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterStringAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitStringAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitStringAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HashAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(OpenDistroSqlParser.IDENTIFIED, 0); }
		public TerminalNode WITH() { return getToken(OpenDistroSqlParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode AS() { return getToken(OpenDistroSqlParser.AS, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public HashAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterHashAuthOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitHashAuthOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitHashAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserAuthOptionContext userAuthOption() throws RecognitionException {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_userAuthOption);
		int _la;
		try {
			setState(4594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
			case 1:
				_localctx = new PasswordAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4570);
				userName();
				setState(4571);
				match(IDENTIFIED);
				setState(4572);
				match(BY);
				setState(4573);
				match(PASSWORD);
				setState(4574);
				((PasswordAuthOptionContext)_localctx).hashed = match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4576);
				userName();
				setState(4577);
				match(IDENTIFIED);
				setState(4580);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4578);
					match(WITH);
					setState(4579);
					authPlugin();
					}
				}

				setState(4582);
				match(BY);
				setState(4583);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new HashAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4585);
				userName();
				setState(4586);
				match(IDENTIFIED);
				setState(4587);
				match(WITH);
				setState(4588);
				authPlugin();
				setState(4591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4589);
					match(AS);
					setState(4590);
					match(STRING_LITERAL);
					}
				}

				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4593);
				userName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TlsOptionContext extends ParserRuleContext {
		public TerminalNode SSL() { return getToken(OpenDistroSqlParser.SSL, 0); }
		public TerminalNode X509() { return getToken(OpenDistroSqlParser.X509, 0); }
		public TerminalNode CIPHER() { return getToken(OpenDistroSqlParser.CIPHER, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode ISSUER() { return getToken(OpenDistroSqlParser.ISSUER, 0); }
		public TerminalNode SUBJECT() { return getToken(OpenDistroSqlParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tlsOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTlsOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTlsOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTlsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TlsOptionContext tlsOption() throws RecognitionException {
		TlsOptionContext _localctx = new TlsOptionContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_tlsOption);
		try {
			setState(4604);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SSL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4596);
				match(SSL);
				}
				break;
			case X509:
				enterOuterAlt(_localctx, 2);
				{
				setState(4597);
				match(X509);
				}
				break;
			case CIPHER:
				enterOuterAlt(_localctx, 3);
				{
				setState(4598);
				match(CIPHER);
				setState(4599);
				match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				enterOuterAlt(_localctx, 4);
				{
				setState(4600);
				match(ISSUER);
				setState(4601);
				match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4602);
				match(SUBJECT);
				setState(4603);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserResourceOptionContext extends ParserRuleContext {
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(OpenDistroSqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(OpenDistroSqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(OpenDistroSqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(OpenDistroSqlParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userResourceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUserResourceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUserResourceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUserResourceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserResourceOptionContext userResourceOption() throws RecognitionException {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_userResourceOption);
		try {
			setState(4614);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4606);
				match(MAX_QUERIES_PER_HOUR);
				setState(4607);
				decimalLiteral();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4608);
				match(MAX_UPDATES_PER_HOUR);
				setState(4609);
				decimalLiteral();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				enterOuterAlt(_localctx, 3);
				{
				setState(4610);
				match(MAX_CONNECTIONS_PER_HOUR);
				setState(4611);
				decimalLiteral();
				}
				break;
			case MAX_USER_CONNECTIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4612);
				match(MAX_USER_CONNECTIONS);
				setState(4613);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserPasswordOptionContext extends ParserRuleContext {
		public Token expireType;
		public TerminalNode PASSWORD() { return getToken(OpenDistroSqlParser.PASSWORD, 0); }
		public TerminalNode EXPIRE() { return getToken(OpenDistroSqlParser.EXPIRE, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode DAY() { return getToken(OpenDistroSqlParser.DAY, 0); }
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public TerminalNode NEVER() { return getToken(OpenDistroSqlParser.NEVER, 0); }
		public TerminalNode INTERVAL() { return getToken(OpenDistroSqlParser.INTERVAL, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userPasswordOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUserPasswordOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUserPasswordOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUserPasswordOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserPasswordOptionContext userPasswordOption() throws RecognitionException {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_userPasswordOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4616);
			match(PASSWORD);
			setState(4617);
			match(EXPIRE);
			setState(4624);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				{
				setState(4618);
				((UserPasswordOptionContext)_localctx).expireType = match(DEFAULT);
				}
				break;
			case NEVER:
				{
				setState(4619);
				((UserPasswordOptionContext)_localctx).expireType = match(NEVER);
				}
				break;
			case INTERVAL:
				{
				setState(4620);
				((UserPasswordOptionContext)_localctx).expireType = match(INTERVAL);
				setState(4621);
				decimalLiteral();
				setState(4622);
				match(DAY);
				}
				break;
			case EOF:
			case ALTER:
			case ANALYZE:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GRANT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case UNLOCK:
			case USE:
			case ACCOUNT:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case FLUSH:
			case HELP:
			case INSTALL:
			case PASSWORD:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUSMINUS:
			case LR_BRACKET:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserLockOptionContext extends ParserRuleContext {
		public Token lockType;
		public TerminalNode ACCOUNT() { return getToken(OpenDistroSqlParser.ACCOUNT, 0); }
		public TerminalNode LOCK() { return getToken(OpenDistroSqlParser.LOCK, 0); }
		public TerminalNode UNLOCK() { return getToken(OpenDistroSqlParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userLockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUserLockOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUserLockOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUserLockOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserLockOptionContext userLockOption() throws RecognitionException {
		UserLockOptionContext _localctx = new UserLockOptionContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_userLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4626);
			match(ACCOUNT);
			setState(4627);
			((UserLockOptionContext)_localctx).lockType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				((UserLockOptionContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivelegeClauseContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privelegeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPrivelegeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPrivelegeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPrivelegeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivelegeClauseContext privelegeClause() throws RecognitionException {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_privelegeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4629);
			privilege();
			setState(4634);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(4630);
				match(LR_BRACKET);
				setState(4631);
				uidList();
				setState(4632);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(OpenDistroSqlParser.PRIVILEGES, 0); }
		public TerminalNode ALTER() { return getToken(OpenDistroSqlParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(OpenDistroSqlParser.ROUTINE, 0); }
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(OpenDistroSqlParser.TEMPORARY, 0); }
		public TerminalNode TABLES() { return getToken(OpenDistroSqlParser.TABLES, 0); }
		public TerminalNode VIEW() { return getToken(OpenDistroSqlParser.VIEW, 0); }
		public TerminalNode USER() { return getToken(OpenDistroSqlParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(OpenDistroSqlParser.TABLESPACE, 0); }
		public TerminalNode DELETE() { return getToken(OpenDistroSqlParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(OpenDistroSqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(OpenDistroSqlParser.EVENT, 0); }
		public TerminalNode EXECUTE() { return getToken(OpenDistroSqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(OpenDistroSqlParser.FILE, 0); }
		public TerminalNode GRANT() { return getToken(OpenDistroSqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(OpenDistroSqlParser.OPTION, 0); }
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public TerminalNode INSERT() { return getToken(OpenDistroSqlParser.INSERT, 0); }
		public TerminalNode LOCK() { return getToken(OpenDistroSqlParser.LOCK, 0); }
		public TerminalNode PROCESS() { return getToken(OpenDistroSqlParser.PROCESS, 0); }
		public TerminalNode PROXY() { return getToken(OpenDistroSqlParser.PROXY, 0); }
		public TerminalNode REFERENCES() { return getToken(OpenDistroSqlParser.REFERENCES, 0); }
		public TerminalNode RELOAD() { return getToken(OpenDistroSqlParser.RELOAD, 0); }
		public TerminalNode REPLICATION() { return getToken(OpenDistroSqlParser.REPLICATION, 0); }
		public TerminalNode CLIENT() { return getToken(OpenDistroSqlParser.CLIENT, 0); }
		public TerminalNode SLAVE() { return getToken(OpenDistroSqlParser.SLAVE, 0); }
		public TerminalNode SELECT() { return getToken(OpenDistroSqlParser.SELECT, 0); }
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(OpenDistroSqlParser.DATABASES, 0); }
		public TerminalNode SHUTDOWN() { return getToken(OpenDistroSqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(OpenDistroSqlParser.SUPER, 0); }
		public TerminalNode TRIGGER() { return getToken(OpenDistroSqlParser.TRIGGER, 0); }
		public TerminalNode UPDATE() { return getToken(OpenDistroSqlParser.UPDATE, 0); }
		public TerminalNode USAGE() { return getToken(OpenDistroSqlParser.USAGE, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_privilege);
		int _la;
		try {
			setState(4678);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4636);
				match(ALL);
				setState(4638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4637);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4640);
				match(ALTER);
				setState(4642);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUTINE) {
					{
					setState(4641);
					match(ROUTINE);
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4644);
				match(CREATE);
				setState(4651);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TEMPORARY:
					{
					setState(4645);
					match(TEMPORARY);
					setState(4646);
					match(TABLES);
					}
					break;
				case ROUTINE:
					{
					setState(4647);
					match(ROUTINE);
					}
					break;
				case VIEW:
					{
					setState(4648);
					match(VIEW);
					}
					break;
				case USER:
					{
					setState(4649);
					match(USER);
					}
					break;
				case TABLESPACE:
					{
					setState(4650);
					match(TABLESPACE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4653);
				match(DELETE);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 5);
				{
				setState(4654);
				match(DROP);
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 6);
				{
				setState(4655);
				match(EVENT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4656);
				match(EXECUTE);
				}
				break;
			case FILE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4657);
				match(FILE);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(4658);
				match(GRANT);
				setState(4659);
				match(OPTION);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 10);
				{
				setState(4660);
				match(INDEX);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(4661);
				match(INSERT);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 12);
				{
				setState(4662);
				match(LOCK);
				setState(4663);
				match(TABLES);
				}
				break;
			case PROCESS:
				enterOuterAlt(_localctx, 13);
				{
				setState(4664);
				match(PROCESS);
				}
				break;
			case PROXY:
				enterOuterAlt(_localctx, 14);
				{
				setState(4665);
				match(PROXY);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 15);
				{
				setState(4666);
				match(REFERENCES);
				}
				break;
			case RELOAD:
				enterOuterAlt(_localctx, 16);
				{
				setState(4667);
				match(RELOAD);
				}
				break;
			case REPLICATION:
				enterOuterAlt(_localctx, 17);
				{
				setState(4668);
				match(REPLICATION);
				setState(4669);
				_la = _input.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 18);
				{
				setState(4670);
				match(SELECT);
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 19);
				{
				setState(4671);
				match(SHOW);
				setState(4672);
				_la = _input.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 20);
				{
				setState(4673);
				match(SHUTDOWN);
				}
				break;
			case SUPER:
				enterOuterAlt(_localctx, 21);
				{
				setState(4674);
				match(SUPER);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 22);
				{
				setState(4675);
				match(TRIGGER);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 23);
				{
				setState(4676);
				match(UPDATE);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 24);
				{
				setState(4677);
				match(USAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeLevelContext extends ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeLevel; }
	 
		public PrivilegeLevelContext() { }
		public void copyFrom(PrivilegeLevelContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDefiniteSchemaPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDefiniteSchemaPrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDefiniteSchemaPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext dottedId() {
			return getRuleContext(DottedIdContext.class,0);
		}
		public DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDefiniteFullTablePrivLevel2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDefiniteFullTablePrivLevel2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel2(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDefiniteFullTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDefiniteFullTablePrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GlobalPrivLevelContext extends PrivilegeLevelContext {
		public GlobalPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterGlobalPrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitGlobalPrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitGlobalPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDefiniteTablePrivLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDefiniteTablePrivLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDefiniteTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCurrentSchemaPriviLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCurrentSchemaPriviLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCurrentSchemaPriviLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeLevelContext privilegeLevel() throws RecognitionException {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_privilegeLevel);
		try {
			setState(4696);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4680);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4681);
				match(STAR);
				setState(4682);
				match(DOT);
				setState(4683);
				match(STAR);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4684);
				uid();
				setState(4685);
				match(DOT);
				setState(4686);
				match(STAR);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4688);
				uid();
				setState(4689);
				match(DOT);
				setState(4690);
				uid();
				}
				break;
			case 5:
				_localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4692);
				uid();
				setState(4693);
				dottedId();
				}
				break;
			case 6:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4695);
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserClauseContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public TerminalNode TO() { return getToken(OpenDistroSqlParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUserClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRenameUserClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRenameUserClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRenameUserClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserClauseContext renameUserClause() throws RecognitionException {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_renameUserClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4698);
			((RenameUserClauseContext)_localctx).fromFirst = userName();
			setState(4699);
			match(TO);
			setState(4700);
			((RenameUserClauseContext)_localctx).toFirst = userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode ANALYZE() { return getToken(OpenDistroSqlParser.ANALYZE, 0); }
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(OpenDistroSqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(OpenDistroSqlParser.LOCAL, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAnalyzeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAnalyzeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAnalyzeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeTableContext analyzeTable() throws RecognitionException {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_analyzeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4702);
			match(ANALYZE);
			setState(4704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4703);
				((AnalyzeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((AnalyzeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4706);
			match(TABLE);
			setState(4707);
			tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(OpenDistroSqlParser.CHECK, 0); }
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public List<CheckTableOptionContext> checkTableOption() {
			return getRuleContexts(CheckTableOptionContext.class);
		}
		public CheckTableOptionContext checkTableOption(int i) {
			return getRuleContext(CheckTableOptionContext.class,i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCheckTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCheckTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCheckTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableContext checkTable() throws RecognitionException {
		CheckTableContext _localctx = new CheckTableContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_checkTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4709);
			match(CHECK);
			setState(4710);
			match(TABLE);
			setState(4711);
			tables();
			setState(4715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & ((1L << (CHANGED - 274)) | (1L << (EXTENDED - 274)) | (1L << (FAST - 274)))) != 0) || _la==MEDIUM || _la==QUICK) {
				{
				{
				setState(4712);
				checkTableOption();
				}
				}
				setState(4717);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChecksumTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode CHECKSUM() { return getToken(OpenDistroSqlParser.CHECKSUM, 0); }
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(OpenDistroSqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(OpenDistroSqlParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterChecksumTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitChecksumTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitChecksumTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChecksumTableContext checksumTable() throws RecognitionException {
		ChecksumTableContext _localctx = new ChecksumTableContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_checksumTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4718);
			match(CHECKSUM);
			setState(4719);
			match(TABLE);
			setState(4720);
			tables();
			setState(4722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				setState(4721);
				((ChecksumTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					((ChecksumTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode OPTIMIZE() { return getToken(OpenDistroSqlParser.OPTIMIZE, 0); }
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(OpenDistroSqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(OpenDistroSqlParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterOptimizeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitOptimizeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitOptimizeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptimizeTableContext optimizeTable() throws RecognitionException {
		OptimizeTableContext _localctx = new OptimizeTableContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_optimizeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4724);
			match(OPTIMIZE);
			setState(4726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4725);
				((OptimizeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((OptimizeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4728);
			match(TABLE);
			setState(4729);
			tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode REPAIR() { return getToken(OpenDistroSqlParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(OpenDistroSqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(OpenDistroSqlParser.EXTENDED, 0); }
		public TerminalNode USE_FRM() { return getToken(OpenDistroSqlParser.USE_FRM, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(OpenDistroSqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(OpenDistroSqlParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRepairTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRepairTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRepairTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepairTableContext repairTable() throws RecognitionException {
		RepairTableContext _localctx = new RepairTableContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_repairTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4731);
			match(REPAIR);
			setState(4733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4732);
				((RepairTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((RepairTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4735);
			match(TABLE);
			setState(4736);
			tables();
			setState(4738);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(4737);
				match(QUICK);
				}
			}

			setState(4741);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(4740);
				match(EXTENDED);
				}
			}

			setState(4744);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USE_FRM) {
				{
				setState(4743);
				match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(OpenDistroSqlParser.FOR, 0); }
		public TerminalNode UPGRADE() { return getToken(OpenDistroSqlParser.UPGRADE, 0); }
		public TerminalNode QUICK() { return getToken(OpenDistroSqlParser.QUICK, 0); }
		public TerminalNode FAST() { return getToken(OpenDistroSqlParser.FAST, 0); }
		public TerminalNode MEDIUM() { return getToken(OpenDistroSqlParser.MEDIUM, 0); }
		public TerminalNode EXTENDED() { return getToken(OpenDistroSqlParser.EXTENDED, 0); }
		public TerminalNode CHANGED() { return getToken(OpenDistroSqlParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCheckTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCheckTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCheckTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableOptionContext checkTableOption() throws RecognitionException {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_checkTableOption);
		try {
			setState(4753);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4746);
				match(FOR);
				setState(4747);
				match(UPGRADE);
				}
				break;
			case QUICK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4748);
				match(QUICK);
				}
				break;
			case FAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(4749);
				match(FAST);
				}
				break;
			case MEDIUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(4750);
				match(MEDIUM);
				}
				break;
			case EXTENDED:
				enterOuterAlt(_localctx, 5);
				{
				setState(4751);
				match(EXTENDED);
				}
				break;
			case CHANGED:
				enterOuterAlt(_localctx, 6);
				{
				setState(4752);
				match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfunctionContext extends ParserRuleContext {
		public Token returnType;
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(OpenDistroSqlParser.FUNCTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(OpenDistroSqlParser.RETURNS, 0); }
		public TerminalNode SONAME() { return getToken(OpenDistroSqlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode STRING() { return getToken(OpenDistroSqlParser.STRING, 0); }
		public TerminalNode INTEGER() { return getToken(OpenDistroSqlParser.INTEGER, 0); }
		public TerminalNode REAL() { return getToken(OpenDistroSqlParser.REAL, 0); }
		public TerminalNode DECIMAL() { return getToken(OpenDistroSqlParser.DECIMAL, 0); }
		public TerminalNode AGGREGATE() { return getToken(OpenDistroSqlParser.AGGREGATE, 0); }
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdfunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCreateUdfunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCreateUdfunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCreateUdfunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUdfunctionContext createUdfunction() throws RecognitionException {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_createUdfunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4755);
			match(CREATE);
			setState(4757);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(4756);
				match(AGGREGATE);
				}
			}

			setState(4759);
			match(FUNCTION);
			setState(4760);
			uid();
			setState(4761);
			match(RETURNS);
			setState(4762);
			((CreateUdfunctionContext)_localctx).returnType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 175)) & ~0x3f) == 0 && ((1L << (_la - 175)) & ((1L << (INTEGER - 175)) | (1L << (REAL - 175)) | (1L << (DECIMAL - 175)))) != 0) || _la==STRING) ) {
				((CreateUdfunctionContext)_localctx).returnType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4763);
			match(SONAME);
			setState(4764);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallPluginContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(OpenDistroSqlParser.INSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(OpenDistroSqlParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SONAME() { return getToken(OpenDistroSqlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public InstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterInstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitInstallPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitInstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstallPluginContext installPlugin() throws RecognitionException {
		InstallPluginContext _localctx = new InstallPluginContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_installPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4766);
			match(INSTALL);
			setState(4767);
			match(PLUGIN);
			setState(4768);
			uid();
			setState(4769);
			match(SONAME);
			setState(4770);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UninstallPluginContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(OpenDistroSqlParser.UNINSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(OpenDistroSqlParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUninstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUninstallPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUninstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UninstallPluginContext uninstallPlugin() throws RecognitionException {
		UninstallPluginContext _localctx = new UninstallPluginContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_uninstallPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4772);
			match(UNINSTALL);
			setState(4773);
			match(PLUGIN);
			setState(4774);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementContext extends ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
	 
		public SetStatementContext() { }
		public void copyFrom(SetStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SetTransactionContext extends SetStatementContext {
		public SetTransactionStatementContext setTransactionStatement() {
			return getRuleContext(SetTransactionStatementContext.class,0);
		}
		public SetTransactionContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSetTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSetTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSetTransaction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetCharsetContext extends SetStatementContext {
		public List<TerminalNode> SET() { return getTokens(OpenDistroSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(OpenDistroSqlParser.SET, i);
		}
		public TerminalNode CHARACTER() { return getToken(OpenDistroSqlParser.CHARACTER, 0); }
		public TerminalNode CHARSET() { return getToken(OpenDistroSqlParser.CHARSET, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public SetCharsetContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSetCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSetCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSetCharset(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNamesContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(OpenDistroSqlParser.NAMES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(OpenDistroSqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public SetNamesContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSetNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSetNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSetNames(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetPasswordContext extends SetStatementContext {
		public SetPasswordStatementContext setPasswordStatement() {
			return getRuleContext(SetPasswordStatementContext.class,0);
		}
		public SetPasswordContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSetPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSetPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSetPassword(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetAutocommitContext extends SetStatementContext {
		public SetAutocommitStatementContext setAutocommitStatement() {
			return getRuleContext(SetAutocommitStatementContext.class,0);
		}
		public SetAutocommitContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSetAutocommit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSetAutocommit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSetAutocommit(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNewValueInsideTriggerContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SetNewValueInsideTriggerContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSetNewValueInsideTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSetNewValueInsideTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSetNewValueInsideTrigger(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetVariableContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public SetVariableContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSetVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSetVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSetVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_setStatement);
		int _la;
		try {
			setState(4818);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,691,_ctx) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4776);
				match(SET);
				setState(4777);
				variableClause();
				setState(4778);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4779);
				expression(0);
				setState(4787);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4780);
					match(COMMA);
					setState(4781);
					variableClause();
					setState(4782);
					_la = _input.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4783);
					expression(0);
					}
					}
					setState(4789);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetCharsetContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4790);
				match(SET);
				setState(4794);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARACTER:
					{
					setState(4791);
					match(CHARACTER);
					setState(4792);
					match(SET);
					}
					break;
				case CHARSET:
					{
					setState(4793);
					match(CHARSET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4798);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(4796);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(4797);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new SetNamesContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4800);
				match(SET);
				setState(4801);
				match(NAMES);
				setState(4808);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(4802);
					charsetName();
					setState(4805);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COLLATE) {
						{
						setState(4803);
						match(COLLATE);
						setState(4804);
						collationName();
						}
					}

					}
					break;
				case DEFAULT:
					{
					setState(4807);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetPasswordContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4810);
				setPasswordStatement();
				}
				break;
			case 5:
				_localctx = new SetTransactionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4811);
				setTransactionStatement();
				}
				break;
			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4812);
				setAutocommitStatement();
				}
				break;
			case 7:
				_localctx = new SetNewValueInsideTriggerContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4813);
				match(SET);
				setState(4814);
				fullId();
				setState(4815);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4816);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
	 
		public ShowStatementContext() { }
		public void copyFrom(ShowStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ShowOpenTablesContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public TerminalNode OPEN() { return getToken(OpenDistroSqlParser.OPEN, 0); }
		public TerminalNode TABLES() { return getToken(OpenDistroSqlParser.TABLES, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(OpenDistroSqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(OpenDistroSqlParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowOpenTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowOpenTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowOpenTables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGlobalInfoContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return getRuleContext(ShowGlobalInfoClauseContext.class,0);
		}
		public ShowGlobalInfoContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowGlobalInfo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowGlobalInfo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowGlobalInfo(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateFullIdObjectContext extends ShowStatementContext {
		public Token namedEntity;
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode EVENT() { return getToken(OpenDistroSqlParser.EVENT, 0); }
		public TerminalNode FUNCTION() { return getToken(OpenDistroSqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(OpenDistroSqlParser.PROCEDURE, 0); }
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(OpenDistroSqlParser.TRIGGER, 0); }
		public TerminalNode VIEW() { return getToken(OpenDistroSqlParser.VIEW, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowCreateFullIdObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowCreateFullIdObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowCreateFullIdObject(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateUserContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(OpenDistroSqlParser.USER, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowCreateUserContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowCreateUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowCreateUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public TerminalNode ERRORS() { return getToken(OpenDistroSqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(OpenDistroSqlParser.WARNINGS, 0); }
		public TerminalNode LIMIT() { return getToken(OpenDistroSqlParser.LIMIT, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public ShowErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowErrors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCountErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public TerminalNode COUNT() { return getToken(OpenDistroSqlParser.COUNT, 0); }
		public TerminalNode ERRORS() { return getToken(OpenDistroSqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(OpenDistroSqlParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowCountErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowCountErrors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowCountErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowObjectFilterContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public ShowCommonEntityContext showCommonEntity() {
			return getRuleContext(ShowCommonEntityContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowObjectFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowObjectFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowObjectFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowObjectFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateDbContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(OpenDistroSqlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(OpenDistroSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(OpenDistroSqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public ShowCreateDbContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowCreateDb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowCreateDb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowCreateDb(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowEngineContext extends ShowStatementContext {
		public Token engineOption;
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public TerminalNode ENGINE() { return getToken(OpenDistroSqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(OpenDistroSqlParser.STATUS, 0); }
		public TerminalNode MUTEX() { return getToken(OpenDistroSqlParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSchemaFilterContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public ShowSchemaEntityContext showSchemaEntity() {
			return getRuleContext(ShowSchemaEntityContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(OpenDistroSqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(OpenDistroSqlParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowSchemaFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowSchemaFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowSchemaFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowIndexesContext extends ShowStatementContext {
		public Token indexFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(OpenDistroSqlParser.INDEXES, 0); }
		public TerminalNode KEYS() { return getToken(OpenDistroSqlParser.KEYS, 0); }
		public List<TerminalNode> FROM() { return getTokens(OpenDistroSqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(OpenDistroSqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(OpenDistroSqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(OpenDistroSqlParser.IN, i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(OpenDistroSqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowIndexesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowIndexes(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowLogEventsContext extends ShowStatementContext {
		public Token logFormat;
		public Token filename;
		public DecimalLiteralContext fromPosition;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public TerminalNode EVENTS() { return getToken(OpenDistroSqlParser.EVENTS, 0); }
		public TerminalNode BINLOG() { return getToken(OpenDistroSqlParser.BINLOG, 0); }
		public TerminalNode RELAYLOG() { return getToken(OpenDistroSqlParser.RELAYLOG, 0); }
		public TerminalNode IN() { return getToken(OpenDistroSqlParser.IN, 0); }
		public TerminalNode FROM() { return getToken(OpenDistroSqlParser.FROM, 0); }
		public TerminalNode LIMIT() { return getToken(OpenDistroSqlParser.LIMIT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public ShowLogEventsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowLogEvents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowLogEvents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowLogEvents(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowMasterLogsContext extends ShowStatementContext {
		public Token logFormat;
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public TerminalNode LOGS() { return getToken(OpenDistroSqlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(OpenDistroSqlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(OpenDistroSqlParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowMasterLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowMasterLogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowMasterLogs(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGrantsContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(OpenDistroSqlParser.GRANTS, 0); }
		public TerminalNode FOR() { return getToken(OpenDistroSqlParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowGrantsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowGrants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowGrants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowGrants(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSlaveStatusContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(OpenDistroSqlParser.SLAVE, 0); }
		public TerminalNode STATUS() { return getToken(OpenDistroSqlParser.STATUS, 0); }
		public TerminalNode FOR() { return getToken(OpenDistroSqlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(OpenDistroSqlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public ShowSlaveStatusContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowSlaveStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowSlaveStatus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowSlaveStatus(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowRoutineContext extends ShowStatementContext {
		public Token routine;
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public TerminalNode CODE() { return getToken(OpenDistroSqlParser.CODE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(OpenDistroSqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(OpenDistroSqlParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowRoutine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowRoutine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowProfileContext extends ShowStatementContext {
		public DecimalLiteralContext queryCount;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public TerminalNode PROFILE() { return getToken(OpenDistroSqlParser.PROFILE, 0); }
		public List<ShowProfileTypeContext> showProfileType() {
			return getRuleContexts(ShowProfileTypeContext.class);
		}
		public ShowProfileTypeContext showProfileType(int i) {
			return getRuleContext(ShowProfileTypeContext.class,i);
		}
		public TerminalNode LIMIT() { return getToken(OpenDistroSqlParser.LIMIT, 0); }
		public TerminalNode FOR() { return getToken(OpenDistroSqlParser.FOR, 0); }
		public TerminalNode QUERY() { return getToken(OpenDistroSqlParser.QUERY, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public ShowProfileContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowProfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowProfile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowProfile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowColumnsContext extends ShowStatementContext {
		public Token columnsFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(OpenDistroSqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(OpenDistroSqlParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(OpenDistroSqlParser.FIELDS, 0); }
		public List<TerminalNode> FROM() { return getTokens(OpenDistroSqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(OpenDistroSqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(OpenDistroSqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(OpenDistroSqlParser.IN, i);
		}
		public TerminalNode FULL() { return getToken(OpenDistroSqlParser.FULL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowColumnsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_showStatement);
		int _la;
		try {
			setState(4971);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4820);
				match(SHOW);
				setState(4821);
				((ShowMasterLogsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4822);
				match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4823);
				match(SHOW);
				setState(4824);
				((ShowLogEventsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4825);
				match(EVENTS);
				setState(4828);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(4826);
					match(IN);
					setState(4827);
					((ShowLogEventsContext)_localctx).filename = match(STRING_LITERAL);
					}
				}

				setState(4832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(4830);
					match(FROM);
					setState(4831);
					((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				setState(4841);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(4834);
					match(LIMIT);
					setState(4838);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,694,_ctx) ) {
					case 1:
						{
						setState(4835);
						((ShowLogEventsContext)_localctx).offset = decimalLiteral();
						setState(4836);
						match(COMMA);
						}
						break;
					}
					setState(4840);
					((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4843);
				match(SHOW);
				setState(4844);
				showCommonEntity();
				setState(4846);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4845);
					showFilter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4848);
				match(SHOW);
				setState(4850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(4849);
					match(FULL);
					}
				}

				setState(4852);
				((ShowColumnsContext)_localctx).columnsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4853);
				((ShowColumnsContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4854);
				tableName();
				setState(4857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4855);
					((ShowColumnsContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4856);
					uid();
					}
				}

				setState(4860);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4859);
					showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4862);
				match(SHOW);
				setState(4863);
				match(CREATE);
				setState(4864);
				((ShowCreateDbContext)_localctx).schemaFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4866);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4865);
					ifNotExists();
					}
				}

				setState(4868);
				uid();
				}
				break;
			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4869);
				match(SHOW);
				setState(4870);
				match(CREATE);
				setState(4871);
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (PROCEDURE - 113)) | (1L << (TABLE - 113)) | (1L << (TRIGGER - 113)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4872);
				fullId();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4873);
				match(SHOW);
				setState(4874);
				match(CREATE);
				setState(4875);
				match(USER);
				setState(4876);
				userName();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(4877);
				match(SHOW);
				setState(4878);
				match(ENGINE);
				setState(4879);
				engineName();
				setState(4880);
				((ShowEngineContext)_localctx).engineOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(4882);
				match(SHOW);
				setState(4883);
				showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(4884);
				match(SHOW);
				setState(4885);
				((ShowErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				{
				setState(4886);
				match(LIMIT);
				setState(4890);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,701,_ctx) ) {
				case 1:
					{
					setState(4887);
					((ShowErrorsContext)_localctx).offset = decimalLiteral();
					setState(4888);
					match(COMMA);
					}
					break;
				}
				setState(4892);
				((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(4893);
				match(SHOW);
				setState(4894);
				match(COUNT);
				setState(4895);
				match(LR_BRACKET);
				setState(4896);
				match(STAR);
				setState(4897);
				match(RR_BRACKET);
				setState(4898);
				((ShowCountErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(4899);
				match(SHOW);
				setState(4900);
				showSchemaEntity();
				setState(4903);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4901);
					((ShowSchemaFilterContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4902);
					uid();
					}
				}

				setState(4906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4905);
					showFilter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(4908);
				match(SHOW);
				setState(4909);
				((ShowRoutineContext)_localctx).routine = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4910);
				match(CODE);
				setState(4911);
				fullId();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(4912);
				match(SHOW);
				setState(4913);
				match(GRANTS);
				setState(4916);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4914);
					match(FOR);
					setState(4915);
					userName();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(4918);
				match(SHOW);
				setState(4919);
				((ShowIndexesContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4920);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4921);
				tableName();
				setState(4924);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4922);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4923);
					uid();
					}
				}

				setState(4928);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4926);
					match(WHERE);
					setState(4927);
					expression(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(4930);
				match(SHOW);
				setState(4931);
				match(OPEN);
				setState(4932);
				match(TABLES);
				setState(4935);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4933);
					((ShowOpenTablesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4934);
					uid();
					}
				}

				setState(4938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4937);
					showFilter();
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowProfileContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(4940);
				match(SHOW);
				setState(4941);
				match(PROFILE);
				setState(4942);
				showProfileType();
				setState(4947);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4943);
					match(COMMA);
					setState(4944);
					showProfileType();
					}
					}
					setState(4949);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4953);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4950);
					match(FOR);
					setState(4951);
					match(QUERY);
					setState(4952);
					((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				{
				setState(4955);
				match(LIMIT);
				setState(4959);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,711,_ctx) ) {
				case 1:
					{
					setState(4956);
					((ShowProfileContext)_localctx).offset = decimalLiteral();
					setState(4957);
					match(COMMA);
					}
					break;
				}
				setState(4961);
				((ShowProfileContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(4963);
				match(SHOW);
				setState(4964);
				match(SLAVE);
				setState(4965);
				match(STATUS);
				setState(4969);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4966);
					match(FOR);
					setState(4967);
					match(CHANNEL);
					setState(4968);
					match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableClauseContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(OpenDistroSqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(OpenDistroSqlParser.GLOBAL_ID, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(OpenDistroSqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(OpenDistroSqlParser.SESSION, 0); }
		public TerminalNode LOCAL() { return getToken(OpenDistroSqlParser.LOCAL, 0); }
		public VariableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterVariableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitVariableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitVariableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableClauseContext variableClause() throws RecognitionException {
		VariableClauseContext _localctx = new VariableClauseContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_variableClause);
		int _la;
		try {
			setState(4983);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4973);
				match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(4974);
				match(GLOBAL_ID);
				}
				break;
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SERIAL:
			case COUNT:
			case POSITION:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(4980);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
				case 1:
					{
					setState(4977);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AT_SIGN) {
						{
						setState(4975);
						match(AT_SIGN);
						setState(4976);
						match(AT_SIGN);
						}
					}

					setState(4979);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4982);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCommonEntityContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(OpenDistroSqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public TerminalNode COLLATION() { return getToken(OpenDistroSqlParser.COLLATION, 0); }
		public TerminalNode DATABASES() { return getToken(OpenDistroSqlParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(OpenDistroSqlParser.SCHEMAS, 0); }
		public TerminalNode FUNCTION() { return getToken(OpenDistroSqlParser.FUNCTION, 0); }
		public TerminalNode STATUS() { return getToken(OpenDistroSqlParser.STATUS, 0); }
		public TerminalNode PROCEDURE() { return getToken(OpenDistroSqlParser.PROCEDURE, 0); }
		public TerminalNode VARIABLES() { return getToken(OpenDistroSqlParser.VARIABLES, 0); }
		public TerminalNode GLOBAL() { return getToken(OpenDistroSqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(OpenDistroSqlParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommonEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowCommonEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowCommonEntity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowCommonEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCommonEntityContext showCommonEntity() throws RecognitionException {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_showCommonEntity);
		int _la;
		try {
			setState(4998);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4985);
				match(CHARACTER);
				setState(4986);
				match(SET);
				}
				break;
			case COLLATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4987);
				match(COLLATION);
				}
				break;
			case DATABASES:
				enterOuterAlt(_localctx, 3);
				{
				setState(4988);
				match(DATABASES);
				}
				break;
			case SCHEMAS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4989);
				match(SCHEMAS);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 5);
				{
				setState(4990);
				match(FUNCTION);
				setState(4991);
				match(STATUS);
				}
				break;
			case PROCEDURE:
				enterOuterAlt(_localctx, 6);
				{
				setState(4992);
				match(PROCEDURE);
				setState(4993);
				match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				enterOuterAlt(_localctx, 7);
				{
				setState(4995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					setState(4994);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4997);
				_la = _input.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFilterContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(OpenDistroSqlParser.LIKE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode WHERE() { return getToken(OpenDistroSqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFilterContext showFilter() throws RecognitionException {
		ShowFilterContext _localctx = new ShowFilterContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_showFilter);
		try {
			setState(5004);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5000);
				match(LIKE);
				setState(5001);
				match(STRING_LITERAL);
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5002);
				match(WHERE);
				setState(5003);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowGlobalInfoClauseContext extends ParserRuleContext {
		public TerminalNode ENGINES() { return getToken(OpenDistroSqlParser.ENGINES, 0); }
		public TerminalNode STORAGE() { return getToken(OpenDistroSqlParser.STORAGE, 0); }
		public TerminalNode MASTER() { return getToken(OpenDistroSqlParser.MASTER, 0); }
		public TerminalNode STATUS() { return getToken(OpenDistroSqlParser.STATUS, 0); }
		public TerminalNode PLUGINS() { return getToken(OpenDistroSqlParser.PLUGINS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(OpenDistroSqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCESSLIST() { return getToken(OpenDistroSqlParser.PROCESSLIST, 0); }
		public TerminalNode FULL() { return getToken(OpenDistroSqlParser.FULL, 0); }
		public TerminalNode PROFILES() { return getToken(OpenDistroSqlParser.PROFILES, 0); }
		public TerminalNode SLAVE() { return getToken(OpenDistroSqlParser.SLAVE, 0); }
		public TerminalNode HOSTS() { return getToken(OpenDistroSqlParser.HOSTS, 0); }
		public TerminalNode AUTHORS() { return getToken(OpenDistroSqlParser.AUTHORS, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(OpenDistroSqlParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGlobalInfoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowGlobalInfoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowGlobalInfoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowGlobalInfoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowGlobalInfoClauseContext showGlobalInfoClause() throws RecognitionException {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_showGlobalInfoClause);
		int _la;
		try {
			setState(5023);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINES:
			case STORAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5007);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(5006);
					match(STORAGE);
					}
				}

				setState(5009);
				match(ENGINES);
				}
				break;
			case MASTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5010);
				match(MASTER);
				setState(5011);
				match(STATUS);
				}
				break;
			case PLUGINS:
				enterOuterAlt(_localctx, 3);
				{
				setState(5012);
				match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				enterOuterAlt(_localctx, 4);
				{
				setState(5013);
				match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				enterOuterAlt(_localctx, 5);
				{
				setState(5015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5014);
					match(FULL);
					}
				}

				setState(5017);
				match(PROCESSLIST);
				}
				break;
			case PROFILES:
				enterOuterAlt(_localctx, 6);
				{
				setState(5018);
				match(PROFILES);
				}
				break;
			case SLAVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5019);
				match(SLAVE);
				setState(5020);
				match(HOSTS);
				}
				break;
			case AUTHORS:
				enterOuterAlt(_localctx, 8);
				{
				setState(5021);
				match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5022);
				match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSchemaEntityContext extends ParserRuleContext {
		public TerminalNode EVENTS() { return getToken(OpenDistroSqlParser.EVENTS, 0); }
		public TerminalNode TABLE() { return getToken(OpenDistroSqlParser.TABLE, 0); }
		public TerminalNode STATUS() { return getToken(OpenDistroSqlParser.STATUS, 0); }
		public TerminalNode TABLES() { return getToken(OpenDistroSqlParser.TABLES, 0); }
		public TerminalNode FULL() { return getToken(OpenDistroSqlParser.FULL, 0); }
		public TerminalNode TRIGGERS() { return getToken(OpenDistroSqlParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSchemaEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowSchemaEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowSchemaEntity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowSchemaEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowSchemaEntityContext showSchemaEntity() throws RecognitionException {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_showSchemaEntity);
		int _la;
		try {
			setState(5033);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EVENTS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5025);
				match(EVENTS);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5026);
				match(TABLE);
				setState(5027);
				match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5029);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5028);
					match(FULL);
					}
				}

				setState(5031);
				match(TABLES);
				}
				break;
			case TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5032);
				match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfileTypeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public TerminalNode BLOCK() { return getToken(OpenDistroSqlParser.BLOCK, 0); }
		public TerminalNode IO() { return getToken(OpenDistroSqlParser.IO, 0); }
		public TerminalNode CONTEXT() { return getToken(OpenDistroSqlParser.CONTEXT, 0); }
		public TerminalNode SWITCHES() { return getToken(OpenDistroSqlParser.SWITCHES, 0); }
		public TerminalNode CPU() { return getToken(OpenDistroSqlParser.CPU, 0); }
		public TerminalNode IPC() { return getToken(OpenDistroSqlParser.IPC, 0); }
		public TerminalNode MEMORY() { return getToken(OpenDistroSqlParser.MEMORY, 0); }
		public TerminalNode PAGE() { return getToken(OpenDistroSqlParser.PAGE, 0); }
		public TerminalNode FAULTS() { return getToken(OpenDistroSqlParser.FAULTS, 0); }
		public TerminalNode SOURCE() { return getToken(OpenDistroSqlParser.SOURCE, 0); }
		public TerminalNode SWAPS() { return getToken(OpenDistroSqlParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfileType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShowProfileType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShowProfileType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShowProfileType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProfileTypeContext showProfileType() throws RecognitionException {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_showProfileType);
		try {
			setState(5047);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5035);
				match(ALL);
				}
				break;
			case BLOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5036);
				match(BLOCK);
				setState(5037);
				match(IO);
				}
				break;
			case CONTEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5038);
				match(CONTEXT);
				setState(5039);
				match(SWITCHES);
				}
				break;
			case CPU:
				enterOuterAlt(_localctx, 4);
				{
				setState(5040);
				match(CPU);
				}
				break;
			case IPC:
				enterOuterAlt(_localctx, 5);
				{
				setState(5041);
				match(IPC);
				}
				break;
			case MEMORY:
				enterOuterAlt(_localctx, 6);
				{
				setState(5042);
				match(MEMORY);
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5043);
				match(PAGE);
				setState(5044);
				match(FAULTS);
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5045);
				match(SOURCE);
				}
				break;
			case SWAPS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5046);
				match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinlogStatementContext extends ParserRuleContext {
		public TerminalNode BINLOG() { return getToken(OpenDistroSqlParser.BINLOG, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public BinlogStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binlogStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterBinlogStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitBinlogStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitBinlogStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BinlogStatementContext binlogStatement() throws RecognitionException {
		BinlogStatementContext _localctx = new BinlogStatementContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_binlogStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5049);
			match(BINLOG);
			setState(5050);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheIndexStatementContext extends ParserRuleContext {
		public UidContext schema;
		public TerminalNode CACHE() { return getToken(OpenDistroSqlParser.CACHE, 0); }
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public List<TableIndexesContext> tableIndexes() {
			return getRuleContexts(TableIndexesContext.class);
		}
		public TableIndexesContext tableIndexes(int i) {
			return getRuleContext(TableIndexesContext.class,i);
		}
		public TerminalNode IN() { return getToken(OpenDistroSqlParser.IN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCacheIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCacheIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCacheIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CacheIndexStatementContext cacheIndexStatement() throws RecognitionException {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_cacheIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5052);
			match(CACHE);
			setState(5053);
			match(INDEX);
			setState(5054);
			tableIndexes();
			setState(5059);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5055);
				match(COMMA);
				setState(5056);
				tableIndexes();
				}
				}
				setState(5061);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5062);
				match(PARTITION);
				setState(5063);
				match(LR_BRACKET);
				setState(5066);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(5064);
					uidList();
					}
					break;
				case ALL:
					{
					setState(5065);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5068);
				match(RR_BRACKET);
				}
			}

			setState(5071);
			match(IN);
			setState(5072);
			((CacheIndexStatementContext)_localctx).schema = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushStatementContext extends ParserRuleContext {
		public Token flushFormat;
		public TerminalNode FLUSH() { return getToken(OpenDistroSqlParser.FLUSH, 0); }
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(OpenDistroSqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(OpenDistroSqlParser.LOCAL, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterFlushStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitFlushStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitFlushStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushStatementContext flushStatement() throws RecognitionException {
		FlushStatementContext _localctx = new FlushStatementContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_flushStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5074);
			match(FLUSH);
			setState(5076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5075);
				((FlushStatementContext)_localctx).flushFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((FlushStatementContext)_localctx).flushFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5078);
			flushOption();
			setState(5083);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5079);
				match(COMMA);
				setState(5080);
				flushOption();
				}
				}
				setState(5085);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KillStatementContext extends ParserRuleContext {
		public Token connectionFormat;
		public TerminalNode KILL() { return getToken(OpenDistroSqlParser.KILL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode CONNECTION() { return getToken(OpenDistroSqlParser.CONNECTION, 0); }
		public TerminalNode QUERY() { return getToken(OpenDistroSqlParser.QUERY, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_killStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterKillStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitKillStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitKillStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KillStatementContext killStatement() throws RecognitionException {
		KillStatementContext _localctx = new KillStatementContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_killStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5086);
			match(KILL);
			setState(5088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONNECTION || _la==QUERY) {
				{
				setState(5087);
				((KillStatementContext)_localctx).connectionFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					((KillStatementContext)_localctx).connectionFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5091); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5090);
				decimalLiteral();
				}
				}
				setState(5093); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 964)) & ~0x3f) == 0 && ((1L << (_la - 964)) & ((1L << (ZERO_DECIMAL - 964)) | (1L << (ONE_DECIMAL - 964)) | (1L << (TWO_DECIMAL - 964)) | (1L << (DECIMAL_LITERAL - 964)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadIndexIntoCacheContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(OpenDistroSqlParser.LOAD, 0); }
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public TerminalNode INTO() { return getToken(OpenDistroSqlParser.INTO, 0); }
		public TerminalNode CACHE() { return getToken(OpenDistroSqlParser.CACHE, 0); }
		public List<LoadedTableIndexesContext> loadedTableIndexes() {
			return getRuleContexts(LoadedTableIndexesContext.class);
		}
		public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return getRuleContext(LoadedTableIndexesContext.class,i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadIndexIntoCache; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLoadIndexIntoCache(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLoadIndexIntoCache(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLoadIndexIntoCache(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadIndexIntoCacheContext loadIndexIntoCache() throws RecognitionException {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_loadIndexIntoCache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5095);
			match(LOAD);
			setState(5096);
			match(INDEX);
			setState(5097);
			match(INTO);
			setState(5098);
			match(CACHE);
			setState(5099);
			loadedTableIndexes();
			setState(5104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5100);
				match(COMMA);
				setState(5101);
				loadedTableIndexes();
				}
				}
				setState(5106);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetStatementContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(OpenDistroSqlParser.RESET, 0); }
		public TerminalNode QUERY() { return getToken(OpenDistroSqlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(OpenDistroSqlParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterResetStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitResetStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitResetStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetStatementContext resetStatement() throws RecognitionException {
		ResetStatementContext _localctx = new ResetStatementContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_resetStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5107);
			match(RESET);
			setState(5108);
			match(QUERY);
			setState(5109);
			match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShutdownStatementContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(OpenDistroSqlParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdownStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterShutdownStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitShutdownStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitShutdownStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShutdownStatementContext shutdownStatement() throws RecognitionException {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_shutdownStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5111);
			match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableIndexesContext extends ParserRuleContext {
		public Token indexFormat;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public TableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableIndexesContext tableIndexes() throws RecognitionException {
		TableIndexesContext _localctx = new TableIndexesContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_tableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5113);
			tableName();
			setState(5121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				setState(5115);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5114);
					((TableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((TableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5117);
				match(LR_BRACKET);
				setState(5118);
				uidList();
				setState(5119);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOptionContext extends ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
	 
		public FlushOptionContext() { }
		public void copyFrom(FlushOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableFlushOptionContext extends FlushOptionContext {
		public TerminalNode TABLES() { return getToken(OpenDistroSqlParser.TABLES, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public FlushTableOptionContext flushTableOption() {
			return getRuleContext(FlushTableOptionContext.class,0);
		}
		public TableFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ChannelFlushOptionContext extends FlushOptionContext {
		public TerminalNode RELAY() { return getToken(OpenDistroSqlParser.RELAY, 0); }
		public TerminalNode LOGS() { return getToken(OpenDistroSqlParser.LOGS, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChannelFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterChannelFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitChannelFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitChannelFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFlushOptionContext extends FlushOptionContext {
		public TerminalNode DES_KEY_FILE() { return getToken(OpenDistroSqlParser.DES_KEY_FILE, 0); }
		public TerminalNode HOSTS() { return getToken(OpenDistroSqlParser.HOSTS, 0); }
		public TerminalNode LOGS() { return getToken(OpenDistroSqlParser.LOGS, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(OpenDistroSqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(OpenDistroSqlParser.PRIVILEGES, 0); }
		public TerminalNode QUERY() { return getToken(OpenDistroSqlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(OpenDistroSqlParser.CACHE, 0); }
		public TerminalNode STATUS() { return getToken(OpenDistroSqlParser.STATUS, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(OpenDistroSqlParser.USER_RESOURCES, 0); }
		public TerminalNode TABLES() { return getToken(OpenDistroSqlParser.TABLES, 0); }
		public TerminalNode WITH() { return getToken(OpenDistroSqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(OpenDistroSqlParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(OpenDistroSqlParser.LOCK, 0); }
		public TerminalNode BINARY() { return getToken(OpenDistroSqlParser.BINARY, 0); }
		public TerminalNode ENGINE() { return getToken(OpenDistroSqlParser.ENGINE, 0); }
		public TerminalNode ERROR() { return getToken(OpenDistroSqlParser.ERROR, 0); }
		public TerminalNode GENERAL() { return getToken(OpenDistroSqlParser.GENERAL, 0); }
		public TerminalNode RELAY() { return getToken(OpenDistroSqlParser.RELAY, 0); }
		public TerminalNode SLOW() { return getToken(OpenDistroSqlParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSimpleFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSimpleFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSimpleFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_flushOption);
		int _la;
		try {
			setState(5153);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,741,_ctx) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5141);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DES_KEY_FILE:
					{
					setState(5123);
					match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					setState(5124);
					match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					setState(5126);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BINARY || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (ENGINE - 318)) | (1L << (ERROR - 318)) | (1L << (GENERAL - 318)))) != 0) || _la==RELAY || _la==SLOW) {
						{
						setState(5125);
						_la = _input.LA(1);
						if ( !(_la==BINARY || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (ENGINE - 318)) | (1L << (ERROR - 318)) | (1L << (GENERAL - 318)))) != 0) || _la==RELAY || _la==SLOW) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(5128);
					match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					setState(5129);
					match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					setState(5130);
					match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					setState(5131);
					match(QUERY);
					setState(5132);
					match(CACHE);
					}
					break;
				case STATUS:
					{
					setState(5133);
					match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					setState(5134);
					match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					setState(5135);
					match(TABLES);
					setState(5139);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(5136);
						match(WITH);
						setState(5137);
						match(READ);
						setState(5138);
						match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5143);
				match(RELAY);
				setState(5144);
				match(LOGS);
				setState(5146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5145);
					channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5148);
				match(TABLES);
				setState(5149);
				tables();
				setState(5151);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					setState(5150);
					flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTableOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(OpenDistroSqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(OpenDistroSqlParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(OpenDistroSqlParser.LOCK, 0); }
		public TerminalNode FOR() { return getToken(OpenDistroSqlParser.FOR, 0); }
		public TerminalNode EXPORT() { return getToken(OpenDistroSqlParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterFlushTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitFlushTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitFlushTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushTableOptionContext flushTableOption() throws RecognitionException {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_flushTableOption);
		try {
			setState(5160);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5155);
				match(WITH);
				setState(5156);
				match(READ);
				setState(5157);
				match(LOCK);
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5158);
				match(FOR);
				setState(5159);
				match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadedTableIndexesContext extends ParserRuleContext {
		public UidListContext partitionList;
		public Token indexFormat;
		public UidListContext indexList;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(OpenDistroSqlParser.PARTITION, 0); }
		public TerminalNode IGNORE() { return getToken(OpenDistroSqlParser.IGNORE, 0); }
		public TerminalNode LEAVES() { return getToken(OpenDistroSqlParser.LEAVES, 0); }
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public TerminalNode INDEX() { return getToken(OpenDistroSqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(OpenDistroSqlParser.KEY, 0); }
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadedTableIndexes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLoadedTableIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLoadedTableIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLoadedTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadedTableIndexesContext loadedTableIndexes() throws RecognitionException {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_loadedTableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5162);
			tableName();
			setState(5170);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5163);
				match(PARTITION);
				setState(5164);
				match(LR_BRACKET);
				setState(5167);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
				case LEFT:
				case RIGHT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case TEXT:
				case ENUM:
				case SERIAL:
				case COUNT:
				case POSITION:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(5165);
					((LoadedTableIndexesContext)_localctx).partitionList = uidList();
					}
					break;
				case ALL:
					{
					setState(5166);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5169);
				match(RR_BRACKET);
				}
			}

			setState(5179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
			case 1:
				{
				setState(5173);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5172);
					((LoadedTableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((LoadedTableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5175);
				match(LR_BRACKET);
				setState(5176);
				((LoadedTableIndexesContext)_localctx).indexList = uidList();
				setState(5177);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5183);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(5181);
				match(IGNORE);
				setState(5182);
				match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public UidContext column;
		public Token pattern;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(OpenDistroSqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(OpenDistroSqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(OpenDistroSqlParser.DESC, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSimpleDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSimpleDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSimpleDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleDescribeStatementContext simpleDescribeStatement() throws RecognitionException {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_simpleDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5185);
			((SimpleDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((SimpleDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5186);
			tableName();
			setState(5189);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,748,_ctx) ) {
			case 1:
				{
				setState(5187);
				((SimpleDescribeStatementContext)_localctx).column = uid();
				}
				break;
			case 2:
				{
				setState(5188);
				((SimpleDescribeStatementContext)_localctx).pattern = match(STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public Token formatType;
		public Token formatValue;
		public DescribeObjectClauseContext describeObjectClause() {
			return getRuleContext(DescribeObjectClauseContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(OpenDistroSqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(OpenDistroSqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(OpenDistroSqlParser.DESC, 0); }
		public TerminalNode EXTENDED() { return getToken(OpenDistroSqlParser.EXTENDED, 0); }
		public TerminalNode PARTITIONS() { return getToken(OpenDistroSqlParser.PARTITIONS, 0); }
		public TerminalNode FORMAT() { return getToken(OpenDistroSqlParser.FORMAT, 0); }
		public TerminalNode TRADITIONAL() { return getToken(OpenDistroSqlParser.TRADITIONAL, 0); }
		public TerminalNode JSON() { return getToken(OpenDistroSqlParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterFullDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitFullDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitFullDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullDescribeStatementContext fullDescribeStatement() throws RecognitionException {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_fullDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5191);
			((FullDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((FullDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5195);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				setState(5192);
				((FullDescribeStatementContext)_localctx).formatType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					((FullDescribeStatementContext)_localctx).formatType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5193);
				match(EQUAL_SYMBOL);
				setState(5194);
				((FullDescribeStatementContext)_localctx).formatValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					((FullDescribeStatementContext)_localctx).formatValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5197);
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpStatementContext extends ParserRuleContext {
		public TerminalNode HELP() { return getToken(OpenDistroSqlParser.HELP, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterHelpStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitHelpStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitHelpStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HelpStatementContext helpStatement() throws RecognitionException {
		HelpStatementContext _localctx = new HelpStatementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_helpStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5199);
			match(HELP);
			setState(5200);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseStatementContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(OpenDistroSqlParser.USE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseStatementContext useStatement() throws RecognitionException {
		UseStatementContext _localctx = new UseStatementContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_useStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5202);
			match(USE);
			setState(5203);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeObjectClauseContext extends ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeObjectClause; }
	 
		public DescribeObjectClauseContext() { }
		public void copyFrom(DescribeObjectClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DescribeStatementsContext extends DescribeObjectClauseContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDescribeStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDescribeStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDescribeStatements(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeConnectionContext extends DescribeObjectClauseContext {
		public TerminalNode FOR() { return getToken(OpenDistroSqlParser.FOR, 0); }
		public TerminalNode CONNECTION() { return getToken(OpenDistroSqlParser.CONNECTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDescribeConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDescribeConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDescribeConnection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeObjectClauseContext describeObjectClause() throws RecognitionException {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_describeObjectClause);
		try {
			setState(5215);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5210);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					setState(5205);
					selectStatement();
					}
					break;
				case DELETE:
					{
					setState(5206);
					deleteStatement();
					}
					break;
				case INSERT:
					{
					setState(5207);
					insertStatement();
					}
					break;
				case REPLACE:
					{
					setState(5208);
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					setState(5209);
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5212);
				match(FOR);
				setState(5213);
				match(CONNECTION);
				setState(5214);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullIdContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT_ID() { return getToken(OpenDistroSqlParser.DOT_ID, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterFullId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitFullId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitFullId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullIdContext fullId() throws RecognitionException {
		FullIdContext _localctx = new FullIdContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_fullId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5217);
			uid();
			setState(5221);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,752,_ctx) ) {
			case 1:
				{
				setState(5218);
				match(DOT_ID);
				}
				break;
			case 2:
				{
				setState(5219);
				match(DOT);
				setState(5220);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5223);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<DottedIdContext> dottedId() {
			return getRuleContexts(DottedIdContext.class);
		}
		public DottedIdContext dottedId(int i) {
			return getRuleContext(DottedIdContext.class,i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterFullColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitFullColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitFullColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullColumnNameContext fullColumnName() throws RecognitionException {
		FullColumnNameContext _localctx = new FullColumnNameContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_fullColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5225);
			uid();
			setState(5230);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
			case 1:
				{
				setState(5226);
				dottedId();
				setState(5228);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,753,_ctx) ) {
				case 1:
					{
					setState(5227);
					dottedId();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNameContext extends ParserRuleContext {
		public Token sortType;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(OpenDistroSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(OpenDistroSqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIndexColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIndexColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIndexColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNameContext indexColumnName() throws RecognitionException {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_indexColumnName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,755,_ctx) ) {
			case 1:
				{
				setState(5232);
				uid();
				}
				break;
			case 2:
				{
				setState(5233);
				match(STRING_LITERAL);
				}
				break;
			}
			setState(5240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5236);
				match(LR_BRACKET);
				setState(5237);
				decimalLiteral();
				setState(5238);
				match(RR_BRACKET);
				}
			}

			setState(5243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(5242);
				((IndexColumnNameContext)_localctx).sortType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((IndexColumnNameContext)_localctx).sortType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserNameContext extends ParserRuleContext {
		public TerminalNode STRING_USER_NAME() { return getToken(OpenDistroSqlParser.STRING_USER_NAME, 0); }
		public TerminalNode ID() { return getToken(OpenDistroSqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public UserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUserName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUserName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUserName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserNameContext userName() throws RecognitionException {
		UserNameContext _localctx = new UserNameContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_userName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5245);
			_la = _input.LA(1);
			if ( !(((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (STRING_LITERAL - 974)) | (1L << (ID - 974)) | (1L << (STRING_USER_NAME - 974)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlVariableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(OpenDistroSqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(OpenDistroSqlParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterMysqlVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitMysqlVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitMysqlVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MysqlVariableContext mysqlVariable() throws RecognitionException {
		MysqlVariableContext _localctx = new MysqlVariableContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_mysqlVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5247);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(OpenDistroSqlParser.BINARY, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(OpenDistroSqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCharsetName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCharsetName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCharsetName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_charsetName);
		try {
			setState(5253);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(5249);
				match(BINARY);
				}
				break;
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
				enterOuterAlt(_localctx, 2);
				{
				setState(5250);
				charsetNameBase();
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5251);
				match(STRING_LITERAL);
				}
				break;
			case CHARSET_REVERSE_QOUTE_STRING:
				enterOuterAlt(_localctx, 4);
				{
				setState(5252);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_collationName);
		try {
			setState(5257);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,759,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5255);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5256);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(OpenDistroSqlParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(OpenDistroSqlParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(OpenDistroSqlParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(OpenDistroSqlParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(OpenDistroSqlParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(OpenDistroSqlParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(OpenDistroSqlParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(OpenDistroSqlParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(OpenDistroSqlParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(OpenDistroSqlParser.NDBCLUSTER, 0); }
		public TerminalNode PERFORMANCE_SCHEMA() { return getToken(OpenDistroSqlParser.PERFORMANCE_SCHEMA, 0); }
		public TerminalNode TOKUDB() { return getToken(OpenDistroSqlParser.TOKUDB, 0); }
		public TerminalNode ID() { return getToken(OpenDistroSqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(OpenDistroSqlParser.REVERSE_QUOTE_ID, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterEngineName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitEngineName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitEngineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5259);
			_la = _input.LA(1);
			if ( !(((((_la - 618)) & ~0x3f) == 0 && ((1L << (_la - 618)) & ((1L << (ARCHIVE - 618)) | (1L << (BLACKHOLE - 618)) | (1L << (CSV - 618)) | (1L << (FEDERATED - 618)) | (1L << (INNODB - 618)) | (1L << (MEMORY - 618)) | (1L << (MRG_MYISAM - 618)) | (1L << (MYISAM - 618)) | (1L << (NDB - 618)) | (1L << (NDBCLUSTER - 618)) | (1L << (PERFORMANCE_SCHEMA - 618)) | (1L << (TOKUDB - 618)))) != 0) || ((((_la - 974)) & ~0x3f) == 0 && ((1L << (_la - 974)) & ((1L << (STRING_LITERAL - 974)) | (1L << (ID - 974)) | (1L << (REVERSE_QUOTE_ID - 974)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UuidSetContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUuidSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UuidSetContext uuidSet() throws RecognitionException {
		UuidSetContext _localctx = new UuidSetContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_uuidSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5261);
			decimalLiteral();
			setState(5262);
			match(MINUS);
			setState(5263);
			decimalLiteral();
			setState(5264);
			match(MINUS);
			setState(5265);
			decimalLiteral();
			setState(5266);
			match(MINUS);
			setState(5267);
			decimalLiteral();
			setState(5268);
			match(MINUS);
			setState(5269);
			decimalLiteral();
			setState(5275); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5270);
				match(COLON_SYMB);
				setState(5271);
				decimalLiteral();
				setState(5272);
				match(MINUS);
				setState(5273);
				decimalLiteral();
				}
				}
				setState(5277); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		public List<XuidStringIdContext> xuidStringId() {
			return getRuleContexts(XuidStringIdContext.class);
		}
		public XuidStringIdContext xuidStringId(int i) {
			return getRuleContext(XuidStringIdContext.class,i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterXid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitXid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitXid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5279);
			((XidContext)_localctx).globalTableUid = xuidStringId();
			setState(5286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5280);
				match(COMMA);
				setState(5281);
				((XidContext)_localctx).qualifier = xuidStringId();
				setState(5284);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5282);
					match(COMMA);
					setState(5283);
					((XidContext)_localctx).idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XuidStringIdContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(OpenDistroSqlParser.BIT_STRING, 0); }
		public List<TerminalNode> HEXADECIMAL_LITERAL() { return getTokens(OpenDistroSqlParser.HEXADECIMAL_LITERAL); }
		public TerminalNode HEXADECIMAL_LITERAL(int i) {
			return getToken(OpenDistroSqlParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xuidStringId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterXuidStringId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitXuidStringId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitXuidStringId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XuidStringIdContext xuidStringId() throws RecognitionException {
		XuidStringIdContext _localctx = new XuidStringIdContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_xuidStringId);
		int _la;
		try {
			setState(5295);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5288);
				match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5289);
				match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5291); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5290);
					match(HEXADECIMAL_LITERAL);
					}
					}
					setState(5293); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthPluginContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAuthPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAuthPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAuthPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthPluginContext authPlugin() throws RecognitionException {
		AuthPluginContext _localctx = new AuthPluginContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_authPlugin);
		try {
			setState(5299);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,765,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5297);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5298);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidContext extends ParserRuleContext {
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(OpenDistroSqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(OpenDistroSqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidContext uid() throws RecognitionException {
		UidContext _localctx = new UidContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_uid);
		try {
			setState(5304);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,766,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5301);
				simpleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5302);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5303);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(OpenDistroSqlParser.ID, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TransactionLevelBaseContext transactionLevelBase() {
			return getRuleContext(TransactionLevelBaseContext.class,0);
		}
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return getRuleContext(PrivilegesBaseContext.class,0);
		}
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return getRuleContext(DataTypeBaseContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSimpleId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSimpleId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSimpleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleIdContext simpleId() throws RecognitionException {
		SimpleIdContext _localctx = new SimpleIdContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_simpleId);
		try {
			setState(5315);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5306);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5307);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5308);
				transactionLevelBase();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5309);
				engineName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5310);
				privilegesBase();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5311);
				intervalTypeBase();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5312);
				dataTypeBase();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5313);
				keywordsCanBeId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5314);
				functionNameBase();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DottedIdContext extends ParserRuleContext {
		public TerminalNode DOT_ID() { return getToken(OpenDistroSqlParser.DOT_ID, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dottedId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDottedId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDottedId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDottedId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DottedIdContext dottedId() throws RecognitionException {
		DottedIdContext _localctx = new DottedIdContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_dottedId);
		try {
			setState(5320);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5317);
				match(DOT_ID);
				}
				break;
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5318);
				match(DOT);
				setState(5319);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalLiteralContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(OpenDistroSqlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(OpenDistroSqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(OpenDistroSqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(OpenDistroSqlParser.TWO_DECIMAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5322);
			_la = _input.LA(1);
			if ( !(((((_la - 964)) & ~0x3f) == 0 && ((1L << (_la - 964)) & ((1L << (ZERO_DECIMAL - 964)) | (1L << (ONE_DECIMAL - 964)) | (1L << (TWO_DECIMAL - 964)) | (1L << (DECIMAL_LITERAL - 964)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileSizeLiteralContext extends ParserRuleContext {
		public TerminalNode FILESIZE_LITERAL() { return getToken(OpenDistroSqlParser.FILESIZE_LITERAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSizeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterFileSizeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitFileSizeLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitFileSizeLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileSizeLiteralContext fileSizeLiteral() throws RecognitionException {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_fileSizeLiteral);
		try {
			setState(5326);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5324);
				match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5325);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(OpenDistroSqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(OpenDistroSqlParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(OpenDistroSqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(OpenDistroSqlParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode COLLATE() { return getToken(OpenDistroSqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			setState(5351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,776,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5333);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(5329);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(5328);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(5331);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(5332);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5336); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5335);
						match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5338); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,772,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5345);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(5341);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(5340);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(5343);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(5344);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5349);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
				case 1:
					{
					setState(5347);
					match(COLLATE);
					setState(5348);
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(OpenDistroSqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(OpenDistroSqlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5353);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(OpenDistroSqlParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(OpenDistroSqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterHexadecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitHexadecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitHexadecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_hexadecimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5356);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(5355);
				match(STRING_CHARSET_NAME);
				}
			}

			setState(5358);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullNotnullContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(OpenDistroSqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(OpenDistroSqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(OpenDistroSqlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullNotnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterNullNotnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitNullNotnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitNullNotnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullNotnullContext nullNotnull() throws RecognitionException {
		NullNotnullContext _localctx = new NullNotnullContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_nullNotnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5361);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5360);
				match(NOT);
				}
			}

			setState(5363);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token nullLiteral;
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(OpenDistroSqlParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(OpenDistroSqlParser.BIT_STRING, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(OpenDistroSqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(OpenDistroSqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(OpenDistroSqlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_constant);
		int _la;
		try {
			setState(5376);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,780,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5365);
				stringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5366);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5367);
				match(MINUS);
				setState(5368);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5369);
				hexadecimalLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5370);
				match(REAL_LITERAL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5371);
				match(BIT_STRING);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5373);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5372);
					match(NOT);
					}
				}

				setState(5375);
				((ConstantContext)_localctx).nullLiteral = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					((ConstantContext)_localctx).nullLiteral = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpatialDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(OpenDistroSqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(OpenDistroSqlParser.GEOMCOLLECTION, 0); }
		public TerminalNode LINESTRING() { return getToken(OpenDistroSqlParser.LINESTRING, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(OpenDistroSqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(OpenDistroSqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(OpenDistroSqlParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(OpenDistroSqlParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(OpenDistroSqlParser.POLYGON, 0); }
		public TerminalNode JSON() { return getToken(OpenDistroSqlParser.JSON, 0); }
		public TerminalNode GEOMETRY() { return getToken(OpenDistroSqlParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSpatialDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSpatialDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSpatialDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollectionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public CollectionOptionsContext collectionOptions() {
			return getRuleContext(CollectionOptionsContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(OpenDistroSqlParser.ENUM, 0); }
		public List<TerminalNode> SET() { return getTokens(OpenDistroSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(OpenDistroSqlParser.SET, i);
		}
		public TerminalNode BINARY() { return getToken(OpenDistroSqlParser.BINARY, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(OpenDistroSqlParser.CHARACTER, 0); }
		public TerminalNode CHARSET() { return getToken(OpenDistroSqlParser.CHARSET, 0); }
		public CollectionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCollectionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCollectionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCollectionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalVaryingStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(OpenDistroSqlParser.NATIONAL, 0); }
		public TerminalNode VARYING() { return getToken(OpenDistroSqlParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(OpenDistroSqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(OpenDistroSqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(OpenDistroSqlParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterNationalVaryingStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitNationalVaryingStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitNationalVaryingStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DimensionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode TINYINT() { return getToken(OpenDistroSqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(OpenDistroSqlParser.SMALLINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(OpenDistroSqlParser.MEDIUMINT, 0); }
		public TerminalNode INT() { return getToken(OpenDistroSqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(OpenDistroSqlParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(OpenDistroSqlParser.BIGINT, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode ZEROFILL() { return getToken(OpenDistroSqlParser.ZEROFILL, 0); }
		public TerminalNode SIGNED() { return getToken(OpenDistroSqlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(OpenDistroSqlParser.UNSIGNED, 0); }
		public TerminalNode REAL() { return getToken(OpenDistroSqlParser.REAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(OpenDistroSqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(OpenDistroSqlParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(OpenDistroSqlParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(OpenDistroSqlParser.DEC, 0); }
		public TerminalNode FIXED() { return getToken(OpenDistroSqlParser.FIXED, 0); }
		public TerminalNode NUMERIC() { return getToken(OpenDistroSqlParser.NUMERIC, 0); }
		public TerminalNode FLOAT() { return getToken(OpenDistroSqlParser.FLOAT, 0); }
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public TerminalNode BIT() { return getToken(OpenDistroSqlParser.BIT, 0); }
		public TerminalNode TIME() { return getToken(OpenDistroSqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(OpenDistroSqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(OpenDistroSqlParser.DATETIME, 0); }
		public TerminalNode BINARY() { return getToken(OpenDistroSqlParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(OpenDistroSqlParser.VARBINARY, 0); }
		public TerminalNode YEAR() { return getToken(OpenDistroSqlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDimensionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDimensionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDimensionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(OpenDistroSqlParser.CHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(OpenDistroSqlParser.VARCHAR, 0); }
		public TerminalNode TINYTEXT() { return getToken(OpenDistroSqlParser.TINYTEXT, 0); }
		public TerminalNode TEXT() { return getToken(OpenDistroSqlParser.TEXT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(OpenDistroSqlParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGTEXT() { return getToken(OpenDistroSqlParser.LONGTEXT, 0); }
		public TerminalNode NCHAR() { return getToken(OpenDistroSqlParser.NCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(OpenDistroSqlParser.NVARCHAR, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(OpenDistroSqlParser.BINARY, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(OpenDistroSqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(OpenDistroSqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(OpenDistroSqlParser.CHARSET, 0); }
		public StringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(OpenDistroSqlParser.NATIONAL, 0); }
		public TerminalNode VARCHAR() { return getToken(OpenDistroSqlParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(OpenDistroSqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(OpenDistroSqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(OpenDistroSqlParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterNationalStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitNationalStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitNationalStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode DATE() { return getToken(OpenDistroSqlParser.DATE, 0); }
		public TerminalNode TINYBLOB() { return getToken(OpenDistroSqlParser.TINYBLOB, 0); }
		public TerminalNode BLOB() { return getToken(OpenDistroSqlParser.BLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(OpenDistroSqlParser.MEDIUMBLOB, 0); }
		public TerminalNode LONGBLOB() { return getToken(OpenDistroSqlParser.LONGBLOB, 0); }
		public TerminalNode BOOL() { return getToken(OpenDistroSqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(OpenDistroSqlParser.BOOLEAN, 0); }
		public TerminalNode SERIAL() { return getToken(OpenDistroSqlParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSimpleDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSimpleDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSimpleDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_dataType);
		int _la;
		try {
			setState(5484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,809,_ctx) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5378);
				((StringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 189)) & ~0x3f) == 0 && ((1L << (_la - 189)) & ((1L << (CHAR - 189)) | (1L << (VARCHAR - 189)) | (1L << (NVARCHAR - 189)) | (1L << (TINYTEXT - 189)) | (1L << (TEXT - 189)) | (1L << (MEDIUMTEXT - 189)) | (1L << (LONGTEXT - 189)))) != 0) || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5380);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
				case 1:
					{
					setState(5379);
					lengthOneDimension();
					}
					break;
				}
				setState(5383);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5382);
					match(BINARY);
					}
				}

				setState(5391);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,784,_ctx) ) {
				case 1:
					{
					setState(5388);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(5385);
						match(CHARACTER);
						setState(5386);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(5387);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5390);
					charsetName();
					}
					break;
				}
				setState(5395);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
				case 1:
					{
					setState(5393);
					match(COLLATE);
					setState(5394);
					collationName();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5397);
				match(NATIONAL);
				setState(5398);
				((NationalStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5400);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
				case 1:
					{
					setState(5399);
					lengthOneDimension();
					}
					break;
				}
				setState(5403);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5402);
					match(BINARY);
					}
				}

				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5405);
				match(NCHAR);
				setState(5406);
				((NationalStringDataTypeContext)_localctx).typeName = match(VARCHAR);
				setState(5408);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
				case 1:
					{
					setState(5407);
					lengthOneDimension();
					}
					break;
				}
				setState(5411);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5410);
					match(BINARY);
					}
				}

				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5413);
				match(NATIONAL);
				setState(5414);
				((NationalVaryingStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5415);
				match(VARYING);
				setState(5417);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,790,_ctx) ) {
				case 1:
					{
					setState(5416);
					lengthOneDimension();
					}
					break;
				}
				setState(5420);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5419);
					match(BINARY);
					}
				}

				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5422);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & ((1L << (TINYINT - 171)) | (1L << (SMALLINT - 171)) | (1L << (MEDIUMINT - 171)) | (1L << (INT - 171)) | (1L << (INTEGER - 171)) | (1L << (BIGINT - 171)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5424);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,792,_ctx) ) {
				case 1:
					{
					setState(5423);
					lengthOneDimension();
					}
					break;
				}
				setState(5427);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
				case 1:
					{
					setState(5426);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5430);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5429);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5432);
				((DimensionDataTypeContext)_localctx).typeName = match(REAL);
				setState(5434);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
				case 1:
					{
					setState(5433);
					lengthTwoDimension();
					}
					break;
				}
				setState(5437);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,796,_ctx) ) {
				case 1:
					{
					setState(5436);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5440);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5439);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5442);
				((DimensionDataTypeContext)_localctx).typeName = match(DOUBLE);
				setState(5444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5443);
					match(PRECISION);
					}
				}

				setState(5447);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,799,_ctx) ) {
				case 1:
					{
					setState(5446);
					lengthTwoDimension();
					}
					break;
				}
				setState(5450);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
				case 1:
					{
					setState(5449);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5453);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5452);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5455);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (FLOAT - 180)) | (1L << (DECIMAL - 180)) | (1L << (DEC - 180)) | (1L << (NUMERIC - 180)))) != 0) || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5457);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,802,_ctx) ) {
				case 1:
					{
					setState(5456);
					lengthTwoOptionalDimension();
					}
					break;
				}
				setState(5460);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,803,_ctx) ) {
				case 1:
					{
					setState(5459);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5462);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5465);
				((SimpleDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TINYBLOB - 184)) | (1L << (BLOB - 184)) | (1L << (MEDIUMBLOB - 184)) | (1L << (LONGBLOB - 184)) | (1L << (SERIAL - 184)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5466);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & ((1L << (TIME - 185)) | (1L << (TIMESTAMP - 185)) | (1L << (DATETIME - 185)) | (1L << (YEAR - 185)) | (1L << (BINARY - 185)) | (1L << (VARBINARY - 185)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5468);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
				case 1:
					{
					setState(5467);
					lengthOneDimension();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5470);
				((CollectionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5471);
				collectionOptions();
				setState(5473);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(5472);
					match(BINARY);
					}
				}

				setState(5481);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
				case 1:
					{
					setState(5478);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(5475);
						match(CHARACTER);
						setState(5476);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(5477);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5480);
					charsetName();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5483);
				((SpatialDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || ((((_la - 634)) & ~0x3f) == 0 && ((1L << (_la - 634)) & ((1L << (GEOMETRYCOLLECTION - 634)) | (1L << (GEOMCOLLECTION - 634)) | (1L << (GEOMETRY - 634)) | (1L << (LINESTRING - 634)) | (1L << (MULTILINESTRING - 634)) | (1L << (MULTIPOINT - 634)) | (1L << (MULTIPOLYGON - 634)) | (1L << (POINT - 634)) | (1L << (POLYGON - 634)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionOptionsContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(OpenDistroSqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(OpenDistroSqlParser.STRING_LITERAL, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCollectionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCollectionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCollectionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionOptionsContext collectionOptions() throws RecognitionException {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_collectionOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5486);
			match(LR_BRACKET);
			setState(5487);
			match(STRING_LITERAL);
			setState(5492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5488);
				match(COMMA);
				setState(5489);
				match(STRING_LITERAL);
				}
				}
				setState(5494);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5495);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertedDataTypeContext extends ParserRuleContext {
		public Token typeName;
		public TerminalNode BINARY() { return getToken(OpenDistroSqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(OpenDistroSqlParser.NCHAR, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(OpenDistroSqlParser.CHAR, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(OpenDistroSqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(OpenDistroSqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(OpenDistroSqlParser.CHARSET, 0); }
		public TerminalNode DATE() { return getToken(OpenDistroSqlParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(OpenDistroSqlParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(OpenDistroSqlParser.TIME, 0); }
		public TerminalNode DECIMAL() { return getToken(OpenDistroSqlParser.DECIMAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode SIGNED() { return getToken(OpenDistroSqlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(OpenDistroSqlParser.UNSIGNED, 0); }
		public TerminalNode INTEGER() { return getToken(OpenDistroSqlParser.INTEGER, 0); }
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertedDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterConvertedDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitConvertedDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitConvertedDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_convertedDataType);
		int _la;
		try {
			setState(5522);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
			case NCHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5497);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5499);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5498);
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5501);
				((ConvertedDataTypeContext)_localctx).typeName = match(CHAR);
				setState(5503);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5502);
					lengthOneDimension();
					}
				}

				setState(5511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHARSET) {
					{
					setState(5508);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHARACTER:
						{
						setState(5505);
						match(CHARACTER);
						setState(5506);
						match(SET);
						}
						break;
					case CHARSET:
						{
						setState(5507);
						match(CHARSET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5510);
					charsetName();
					}
				}

				}
				break;
			case DATE:
			case TIME:
			case DATETIME:
				enterOuterAlt(_localctx, 3);
				{
				setState(5513);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (DATETIME - 184)))) != 0)) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5514);
				((ConvertedDataTypeContext)_localctx).typeName = match(DECIMAL);
				setState(5516);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5515);
					lengthTwoDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				enterOuterAlt(_localctx, 5);
				{
				setState(5518);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(5519);
					match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthOneDimensionContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLengthOneDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLengthOneDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLengthOneDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5524);
			match(LR_BRACKET);
			setState(5525);
			decimalLiteral();
			setState(5526);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLengthTwoDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLengthTwoDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLengthTwoDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5528);
			match(LR_BRACKET);
			setState(5529);
			decimalLiteral();
			setState(5530);
			match(COMMA);
			setState(5531);
			decimalLiteral();
			setState(5532);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoOptionalDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLengthTwoOptionalDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLengthTwoOptionalDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLengthTwoOptionalDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5534);
			match(LR_BRACKET);
			setState(5535);
			decimalLiteral();
			setState(5538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5536);
				match(COMMA);
				setState(5537);
				decimalLiteral();
				}
			}

			setState(5540);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidListContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uidList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUidList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUidList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUidList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidListContext uidList() throws RecognitionException {
		UidListContext _localctx = new UidListContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_uidList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5542);
			uid();
			setState(5547);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,819,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5543);
					match(COMMA);
					setState(5544);
					uid();
					}
					} 
				}
				setState(5549);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,819,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesContext tables() throws RecognitionException {
		TablesContext _localctx = new TablesContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_tables);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5550);
			tableName();
			setState(5555);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,820,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5551);
					match(COMMA);
					setState(5552);
					tableName();
					}
					} 
				}
				setState(5557);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,820,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNamesContext extends ParserRuleContext {
		public List<IndexColumnNameContext> indexColumnName() {
			return getRuleContexts(IndexColumnNameContext.class);
		}
		public IndexColumnNameContext indexColumnName(int i) {
			return getRuleContext(IndexColumnNameContext.class,i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIndexColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIndexColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIndexColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNamesContext indexColumnNames() throws RecognitionException {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_indexColumnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5558);
			match(LR_BRACKET);
			setState(5559);
			indexColumnName();
			setState(5564);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5560);
				match(COMMA);
				setState(5561);
				indexColumnName();
				}
				}
				setState(5566);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5567);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5569);
			expression(0);
			setState(5574);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5570);
				match(COMMA);
				setState(5571);
				expression(0);
				}
				}
				setState(5576);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsWithDefaultsContext extends ParserRuleContext {
		public List<ExpressionOrDefaultContext> expressionOrDefault() {
			return getRuleContexts(ExpressionOrDefaultContext.class);
		}
		public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return getRuleContext(ExpressionOrDefaultContext.class,i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsWithDefaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterExpressionsWithDefaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitExpressionsWithDefaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitExpressionsWithDefaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsWithDefaultsContext expressionsWithDefaults() throws RecognitionException {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_expressionsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5577);
			expressionOrDefault();
			setState(5582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5578);
				match(COMMA);
				setState(5579);
				expressionOrDefault();
				}
				}
				setState(5584);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterConstants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitConstants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitConstants(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantsContext constants() throws RecognitionException {
		ConstantsContext _localctx = new ConstantsContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_constants);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5585);
			constant();
			setState(5590);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5586);
				match(COMMA);
				setState(5587);
				constant();
				}
				}
				setState(5592);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStringsContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(OpenDistroSqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(OpenDistroSqlParser.STRING_LITERAL, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStrings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSimpleStrings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSimpleStrings(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSimpleStrings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleStringsContext simpleStrings() throws RecognitionException {
		SimpleStringsContext _localctx = new SimpleStringsContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_simpleStrings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5593);
			match(STRING_LITERAL);
			setState(5598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5594);
				match(COMMA);
				setState(5595);
				match(STRING_LITERAL);
				}
				}
				setState(5600);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserVariablesContext extends ParserRuleContext {
		public List<TerminalNode> LOCAL_ID() { return getTokens(OpenDistroSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(OpenDistroSqlParser.LOCAL_ID, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUserVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUserVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUserVariables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserVariablesContext userVariables() throws RecognitionException {
		UserVariablesContext _localctx = new UserVariablesContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_userVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5601);
			match(LOCAL_ID);
			setState(5606);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5602);
				match(COMMA);
				setState(5603);
				match(LOCAL_ID);
				}
				}
				setState(5608);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(OpenDistroSqlParser.NULL_LITERAL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public List<CurrentTimestampContext> currentTimestamp() {
			return getRuleContexts(CurrentTimestampContext.class);
		}
		public CurrentTimestampContext currentTimestamp(int i) {
			return getRuleContext(CurrentTimestampContext.class,i);
		}
		public TerminalNode ON() { return getToken(OpenDistroSqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(OpenDistroSqlParser.UPDATE, 0); }
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDefaultValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDefaultValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDefaultValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_defaultValue);
		try {
			setState(5620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5609);
				match(NULL_LITERAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5611);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,827,_ctx) ) {
				case 1:
					{
					setState(5610);
					unaryOperator();
					}
					break;
				}
				setState(5613);
				constant();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5614);
				currentTimestamp();
				setState(5618);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,828,_ctx) ) {
				case 1:
					{
					setState(5615);
					match(ON);
					setState(5616);
					match(UPDATE);
					setState(5617);
					currentTimestamp();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentTimestampContext extends ParserRuleContext {
		public TerminalNode NOW() { return getToken(OpenDistroSqlParser.NOW, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(OpenDistroSqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(OpenDistroSqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(OpenDistroSqlParser.LOCALTIMESTAMP, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentTimestamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCurrentTimestamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCurrentTimestamp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCurrentTimestamp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentTimestampContext currentTimestamp() throws RecognitionException {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_currentTimestamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5636);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
				{
				setState(5622);
				_la = _input.LA(1);
				if ( !(((((_la - 235)) & ~0x3f) == 0 && ((1L << (_la - 235)) & ((1L << (CURRENT_TIMESTAMP - 235)) | (1L << (LOCALTIME - 235)) | (1L << (LOCALTIMESTAMP - 235)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5628);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,831,_ctx) ) {
				case 1:
					{
					setState(5623);
					match(LR_BRACKET);
					setState(5625);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 964)) & ~0x3f) == 0 && ((1L << (_la - 964)) & ((1L << (ZERO_DECIMAL - 964)) | (1L << (ONE_DECIMAL - 964)) | (1L << (TWO_DECIMAL - 964)) | (1L << (DECIMAL_LITERAL - 964)))) != 0)) {
						{
						setState(5624);
						decimalLiteral();
						}
					}

					setState(5627);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case NOW:
				{
				setState(5630);
				match(NOW);
				setState(5631);
				match(LR_BRACKET);
				setState(5633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 964)) & ~0x3f) == 0 && ((1L << (_la - 964)) & ((1L << (ZERO_DECIMAL - 964)) | (1L << (ONE_DECIMAL - 964)) | (1L << (TWO_DECIMAL - 964)) | (1L << (DECIMAL_LITERAL - 964)))) != 0)) {
					{
					setState(5632);
					decimalLiteral();
					}
				}

				setState(5635);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionOrDefaultContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(OpenDistroSqlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterExpressionOrDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitExpressionOrDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitExpressionOrDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionOrDefaultContext expressionOrDefault() throws RecognitionException {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_expressionOrDefault);
		try {
			setState(5640);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT_USER:
			case DATABASE:
			case EXISTS:
			case IF:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case NOT:
			case NULL_LITERAL:
			case REPLACE:
			case RIGHT:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case GROUP_CONCAT:
			case MAX:
			case MIN:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLIENT:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MERGE:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case PLUS:
			case MINUS:
			case EXCLAMATION_SYMBOL:
			case BIT_NOT_OP:
			case LR_BRACKET:
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case CHARSET_REVERSE_QOUTE_STRING:
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case DECIMAL_LITERAL:
			case HEXADECIMAL_LITERAL:
			case REAL_LITERAL:
			case NULL_SPEC_LITERAL:
			case BIT_STRING:
			case STRING_CHARSET_NAME:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5638);
				expression(0);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5639);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(OpenDistroSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(OpenDistroSqlParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIfExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5642);
			match(IF);
			setState(5643);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(OpenDistroSqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(OpenDistroSqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(OpenDistroSqlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIfNotExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5645);
			match(IF);
			setState(5646);
			match(NOT);
			setState(5647);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	 
		public FunctionCallContext() { }
		public void copyFrom(FunctionCallContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecificFunctionCallContext extends FunctionCallContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public SpecificFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSpecificFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSpecificFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSpecificFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordFunctionCallContext extends FunctionCallContext {
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public PasswordFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPasswordFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPasswordFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPasswordFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AggregateFunctionCallContext extends FunctionCallContext {
		public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return getRuleContext(AggregateWindowedFunctionContext.class,0);
		}
		public AggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstringFunctionCallContext extends FunctionCallContext {
		public TerminalNode SUBSTRING() { return getToken(OpenDistroSqlParser.SUBSTRING, 0); }
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public SubstringFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSubstringFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSubstringFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSubstringFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ScalarFunctionCallContext extends FunctionCallContext {
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public ScalarFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterScalarFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitScalarFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitScalarFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_functionCall);
		int _la;
		try {
			setState(5666);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,836,_ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5649);
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5650);
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new ScalarFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5651);
				scalarFunctionName();
				setState(5652);
				match(LR_BRACKET);
				setState(5654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << EXISTS))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (IF - 66)) | (1L << (INSERT - 66)) | (1L << (INTERVAL - 66)) | (1L << (LEFT - 66)) | (1L << (NOT - 66)) | (1L << (NULL_LITERAL - 66)) | (1L << (REPLACE - 66)) | (1L << (RIGHT - 66)))) != 0) || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (VALUES - 163)) | (1L << (DATE - 163)) | (1L << (TIME - 163)) | (1L << (TIMESTAMP - 163)) | (1L << (DATETIME - 163)) | (1L << (YEAR - 163)) | (1L << (CHAR - 163)) | (1L << (BINARY - 163)) | (1L << (TEXT - 163)) | (1L << (ENUM - 163)) | (1L << (SERIAL - 163)) | (1L << (AVG - 163)) | (1L << (BIT_AND - 163)) | (1L << (BIT_OR - 163)) | (1L << (BIT_XOR - 163)) | (1L << (COUNT - 163)) | (1L << (GROUP_CONCAT - 163)) | (1L << (MAX - 163)) | (1L << (MIN - 163)) | (1L << (STD - 163)) | (1L << (STDDEV - 163)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (STDDEV_POP - 227)) | (1L << (STDDEV_SAMP - 227)) | (1L << (SUM - 227)) | (1L << (VAR_POP - 227)) | (1L << (VAR_SAMP - 227)) | (1L << (VARIANCE - 227)) | (1L << (CURRENT_DATE - 227)) | (1L << (CURRENT_TIME - 227)) | (1L << (CURRENT_TIMESTAMP - 227)) | (1L << (LOCALTIME - 227)) | (1L << (CURDATE - 227)) | (1L << (CURTIME - 227)) | (1L << (DATE_ADD - 227)) | (1L << (DATE_SUB - 227)) | (1L << (EXTRACT - 227)) | (1L << (LOCALTIMESTAMP - 227)) | (1L << (NOW - 227)) | (1L << (POSITION - 227)) | (1L << (SUBSTR - 227)) | (1L << (SUBSTRING - 227)) | (1L << (SYSDATE - 227)) | (1L << (TRIM - 227)) | (1L << (UTC_DATE - 227)) | (1L << (UTC_TIME - 227)) | (1L << (UTC_TIMESTAMP - 227)) | (1L << (ACCOUNT - 227)) | (1L << (ACTION - 227)) | (1L << (AFTER - 227)) | (1L << (AGGREGATE - 227)) | (1L << (ALGORITHM - 227)) | (1L << (ANY - 227)) | (1L << (AT - 227)) | (1L << (AUTHORS - 227)) | (1L << (AUTOCOMMIT - 227)) | (1L << (AUTOEXTEND_SIZE - 227)) | (1L << (AUTO_INCREMENT - 227)) | (1L << (AVG_ROW_LENGTH - 227)) | (1L << (BEGIN - 227)) | (1L << (BINLOG - 227)) | (1L << (BIT - 227)) | (1L << (BLOCK - 227)) | (1L << (BOOL - 227)) | (1L << (BOOLEAN - 227)) | (1L << (BTREE - 227)) | (1L << (CACHE - 227)) | (1L << (CASCADED - 227)) | (1L << (CHAIN - 227)) | (1L << (CHANGED - 227)) | (1L << (CHANNEL - 227)) | (1L << (CHECKSUM - 227)) | (1L << (PAGE_CHECKSUM - 227)) | (1L << (CIPHER - 227)) | (1L << (CLIENT - 227)) | (1L << (CLOSE - 227)) | (1L << (COALESCE - 227)) | (1L << (CODE - 227)) | (1L << (COLUMNS - 227)) | (1L << (COLUMN_FORMAT - 227)) | (1L << (COMMENT - 227)) | (1L << (COMMIT - 227)) | (1L << (COMPACT - 227)) | (1L << (COMPLETION - 227)) | (1L << (COMPRESSED - 227)) | (1L << (COMPRESSION - 227)))) != 0) || ((((_la - 291)) & ~0x3f) == 0 && ((1L << (_la - 291)) & ((1L << (CONCURRENT - 291)) | (1L << (CONNECTION - 291)) | (1L << (CONSISTENT - 291)) | (1L << (CONTAINS - 291)) | (1L << (CONTEXT - 291)) | (1L << (CONTRIBUTORS - 291)) | (1L << (COPY - 291)) | (1L << (CPU - 291)) | (1L << (DATA - 291)) | (1L << (DATAFILE - 291)) | (1L << (DEALLOCATE - 291)) | (1L << (DEFAULT_AUTH - 291)) | (1L << (DEFINER - 291)) | (1L << (DELAY_KEY_WRITE - 291)) | (1L << (DES_KEY_FILE - 291)) | (1L << (DIRECTORY - 291)) | (1L << (DISABLE - 291)) | (1L << (DISCARD - 291)) | (1L << (DISK - 291)) | (1L << (DO - 291)) | (1L << (DUMPFILE - 291)) | (1L << (DUPLICATE - 291)) | (1L << (DYNAMIC - 291)) | (1L << (ENABLE - 291)) | (1L << (ENCRYPTION - 291)) | (1L << (END - 291)) | (1L << (ENDS - 291)) | (1L << (ENGINE - 291)) | (1L << (ENGINES - 291)) | (1L << (ERROR - 291)) | (1L << (ERRORS - 291)) | (1L << (ESCAPE - 291)) | (1L << (EVEN - 291)) | (1L << (EVENT - 291)) | (1L << (EVENTS - 291)) | (1L << (EVERY - 291)) | (1L << (EXCHANGE - 291)) | (1L << (EXCLUSIVE - 291)) | (1L << (EXPIRE - 291)) | (1L << (EXPORT - 291)) | (1L << (EXTENDED - 291)) | (1L << (EXTENT_SIZE - 291)) | (1L << (FAST - 291)) | (1L << (FAULTS - 291)) | (1L << (FIELDS - 291)) | (1L << (FILE_BLOCK_SIZE - 291)) | (1L << (FILTER - 291)) | (1L << (FIRST - 291)) | (1L << (FIXED - 291)) | (1L << (FLUSH - 291)) | (1L << (FOLLOWS - 291)) | (1L << (FOUND - 291)) | (1L << (FULL - 291)) | (1L << (FUNCTION - 291)) | (1L << (GENERAL - 291)) | (1L << (GLOBAL - 291)) | (1L << (GRANTS - 291)) | (1L << (GROUP_REPLICATION - 291)) | (1L << (HANDLER - 291)) | (1L << (HASH - 291)) | (1L << (HELP - 291)) | (1L << (HOST - 291)) | (1L << (HOSTS - 291)) | (1L << (IDENTIFIED - 291)))) != 0) || ((((_la - 355)) & ~0x3f) == 0 && ((1L << (_la - 355)) & ((1L << (IGNORE_SERVER_IDS - 355)) | (1L << (IMPORT - 355)) | (1L << (INDEXES - 355)) | (1L << (INITIAL_SIZE - 355)) | (1L << (INPLACE - 355)) | (1L << (INSERT_METHOD - 355)) | (1L << (INSTALL - 355)) | (1L << (INSTANCE - 355)) | (1L << (INVOKER - 355)) | (1L << (IO - 355)) | (1L << (IO_THREAD - 355)) | (1L << (IPC - 355)) | (1L << (ISOLATION - 355)) | (1L << (ISSUER - 355)) | (1L << (JSON - 355)) | (1L << (KEY_BLOCK_SIZE - 355)) | (1L << (LANGUAGE - 355)) | (1L << (LAST - 355)) | (1L << (LEAVES - 355)) | (1L << (LESS - 355)) | (1L << (LEVEL - 355)) | (1L << (LIST - 355)) | (1L << (LOCAL - 355)) | (1L << (LOGFILE - 355)) | (1L << (LOGS - 355)) | (1L << (MASTER - 355)) | (1L << (MASTER_AUTO_POSITION - 355)) | (1L << (MASTER_CONNECT_RETRY - 355)) | (1L << (MASTER_DELAY - 355)) | (1L << (MASTER_HEARTBEAT_PERIOD - 355)) | (1L << (MASTER_HOST - 355)) | (1L << (MASTER_LOG_FILE - 355)) | (1L << (MASTER_LOG_POS - 355)) | (1L << (MASTER_PASSWORD - 355)) | (1L << (MASTER_PORT - 355)) | (1L << (MASTER_RETRY_COUNT - 355)) | (1L << (MASTER_SSL - 355)) | (1L << (MASTER_SSL_CA - 355)) | (1L << (MASTER_SSL_CAPATH - 355)) | (1L << (MASTER_SSL_CERT - 355)) | (1L << (MASTER_SSL_CIPHER - 355)) | (1L << (MASTER_SSL_CRL - 355)) | (1L << (MASTER_SSL_CRLPATH - 355)) | (1L << (MASTER_SSL_KEY - 355)) | (1L << (MASTER_TLS_VERSION - 355)) | (1L << (MASTER_USER - 355)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 355)) | (1L << (MAX_QUERIES_PER_HOUR - 355)) | (1L << (MAX_ROWS - 355)) | (1L << (MAX_SIZE - 355)) | (1L << (MAX_UPDATES_PER_HOUR - 355)) | (1L << (MAX_USER_CONNECTIONS - 355)) | (1L << (MEDIUM - 355)) | (1L << (MERGE - 355)) | (1L << (MID - 355)) | (1L << (MIGRATE - 355)) | (1L << (MIN_ROWS - 355)) | (1L << (MODE - 355)) | (1L << (MODIFY - 355)) | (1L << (MUTEX - 355)) | (1L << (MYSQL - 355)) | (1L << (NAME - 355)) | (1L << (NAMES - 355)) | (1L << (NCHAR - 355)))) != 0) || ((((_la - 419)) & ~0x3f) == 0 && ((1L << (_la - 419)) & ((1L << (NEVER - 419)) | (1L << (NEXT - 419)) | (1L << (NO - 419)) | (1L << (NODEGROUP - 419)) | (1L << (NONE - 419)) | (1L << (OFFLINE - 419)) | (1L << (OFFSET - 419)) | (1L << (OJ - 419)) | (1L << (OLD_PASSWORD - 419)) | (1L << (ONE - 419)) | (1L << (ONLINE - 419)) | (1L << (ONLY - 419)) | (1L << (OPEN - 419)) | (1L << (OPTIMIZER_COSTS - 419)) | (1L << (OPTIONS - 419)) | (1L << (OWNER - 419)) | (1L << (PACK_KEYS - 419)) | (1L << (PAGE - 419)) | (1L << (PARSER - 419)) | (1L << (PARTIAL - 419)) | (1L << (PARTITIONING - 419)) | (1L << (PARTITIONS - 419)) | (1L << (PASSWORD - 419)) | (1L << (PHASE - 419)) | (1L << (PLUGIN - 419)) | (1L << (PLUGIN_DIR - 419)) | (1L << (PLUGINS - 419)) | (1L << (PORT - 419)) | (1L << (PRECEDES - 419)) | (1L << (PREPARE - 419)) | (1L << (PRESERVE - 419)) | (1L << (PREV - 419)) | (1L << (PROCESSLIST - 419)) | (1L << (PROFILE - 419)) | (1L << (PROFILES - 419)) | (1L << (PROXY - 419)) | (1L << (QUERY - 419)) | (1L << (QUICK - 419)) | (1L << (REBUILD - 419)) | (1L << (RECOVER - 419)) | (1L << (REDO_BUFFER_SIZE - 419)) | (1L << (REDUNDANT - 419)) | (1L << (RELAY - 419)) | (1L << (RELAY_LOG_FILE - 419)) | (1L << (RELAY_LOG_POS - 419)) | (1L << (RELAYLOG - 419)) | (1L << (REMOVE - 419)) | (1L << (REORGANIZE - 419)) | (1L << (REPAIR - 419)) | (1L << (REPLICATE_DO_DB - 419)) | (1L << (REPLICATE_DO_TABLE - 419)) | (1L << (REPLICATE_IGNORE_DB - 419)) | (1L << (REPLICATE_IGNORE_TABLE - 419)) | (1L << (REPLICATE_REWRITE_DB - 419)) | (1L << (REPLICATE_WILD_DO_TABLE - 419)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 419)) | (1L << (REPLICATION - 419)) | (1L << (RESET - 419)) | (1L << (RESUME - 419)) | (1L << (RETURNS - 419)) | (1L << (ROLLBACK - 419)) | (1L << (ROLLUP - 419)) | (1L << (ROTATE - 419)) | (1L << (ROW - 419)))) != 0) || ((((_la - 483)) & ~0x3f) == 0 && ((1L << (_la - 483)) & ((1L << (ROWS - 483)) | (1L << (ROW_FORMAT - 483)) | (1L << (SAVEPOINT - 483)) | (1L << (SCHEDULE - 483)) | (1L << (SECURITY - 483)) | (1L << (SERVER - 483)) | (1L << (SESSION - 483)) | (1L << (SHARE - 483)) | (1L << (SHARED - 483)) | (1L << (SIGNED - 483)) | (1L << (SIMPLE - 483)) | (1L << (SLAVE - 483)) | (1L << (SLOW - 483)) | (1L << (SNAPSHOT - 483)) | (1L << (SOCKET - 483)) | (1L << (SOME - 483)) | (1L << (SONAME - 483)) | (1L << (SOUNDS - 483)) | (1L << (SOURCE - 483)) | (1L << (SQL_AFTER_GTIDS - 483)) | (1L << (SQL_AFTER_MTS_GAPS - 483)) | (1L << (SQL_BEFORE_GTIDS - 483)) | (1L << (SQL_BUFFER_RESULT - 483)) | (1L << (SQL_CACHE - 483)) | (1L << (SQL_NO_CACHE - 483)) | (1L << (SQL_THREAD - 483)) | (1L << (START - 483)) | (1L << (STARTS - 483)) | (1L << (STATS_AUTO_RECALC - 483)) | (1L << (STATS_PERSISTENT - 483)) | (1L << (STATS_SAMPLE_PAGES - 483)) | (1L << (STATUS - 483)) | (1L << (STOP - 483)) | (1L << (STORAGE - 483)) | (1L << (STRING - 483)) | (1L << (SUBJECT - 483)) | (1L << (SUBPARTITION - 483)) | (1L << (SUBPARTITIONS - 483)) | (1L << (SUSPEND - 483)) | (1L << (SWAPS - 483)) | (1L << (SWITCHES - 483)) | (1L << (TABLESPACE - 483)) | (1L << (TEMPORARY - 483)) | (1L << (TEMPTABLE - 483)) | (1L << (THAN - 483)) | (1L << (TRADITIONAL - 483)) | (1L << (TRANSACTION - 483)) | (1L << (TRIGGERS - 483)) | (1L << (TRUNCATE - 483)) | (1L << (UNDEFINED - 483)) | (1L << (UNDOFILE - 483)) | (1L << (UNDO_BUFFER_SIZE - 483)) | (1L << (UNINSTALL - 483)) | (1L << (UNKNOWN - 483)) | (1L << (UNTIL - 483)) | (1L << (UPGRADE - 483)) | (1L << (USER - 483)) | (1L << (USE_FRM - 483)) | (1L << (USER_RESOURCES - 483)) | (1L << (VALIDATION - 483)) | (1L << (VALUE - 483)) | (1L << (VARIABLES - 483)) | (1L << (VIEW - 483)))) != 0) || ((((_la - 548)) & ~0x3f) == 0 && ((1L << (_la - 548)) & ((1L << (WAIT - 548)) | (1L << (WARNINGS - 548)) | (1L << (WITHOUT - 548)) | (1L << (WORK - 548)) | (1L << (WRAPPER - 548)) | (1L << (X509 - 548)) | (1L << (XA - 548)) | (1L << (XML - 548)) | (1L << (INTERNAL - 548)) | (1L << (QUARTER - 548)) | (1L << (MONTH - 548)) | (1L << (DAY - 548)) | (1L << (HOUR - 548)) | (1L << (MINUTE - 548)) | (1L << (WEEK - 548)) | (1L << (SECOND - 548)) | (1L << (MICROSECOND - 548)) | (1L << (TABLES - 548)) | (1L << (ROUTINE - 548)) | (1L << (EXECUTE - 548)) | (1L << (FILE - 548)) | (1L << (PROCESS - 548)) | (1L << (RELOAD - 548)) | (1L << (SHUTDOWN - 548)) | (1L << (SUPER - 548)) | (1L << (PRIVILEGES - 548)) | (1L << (ARMSCII8 - 548)) | (1L << (ASCII - 548)) | (1L << (BIG5 - 548)) | (1L << (CP1250 - 548)) | (1L << (CP1251 - 548)) | (1L << (CP1256 - 548)) | (1L << (CP1257 - 548)) | (1L << (CP850 - 548)) | (1L << (CP852 - 548)) | (1L << (CP866 - 548)) | (1L << (CP932 - 548)) | (1L << (DEC8 - 548)) | (1L << (EUCJPMS - 548)) | (1L << (EUCKR - 548)) | (1L << (GB2312 - 548)) | (1L << (GBK - 548)) | (1L << (GEOSTD8 - 548)) | (1L << (GREEK - 548)) | (1L << (HEBREW - 548)) | (1L << (HP8 - 548)) | (1L << (KEYBCS2 - 548)) | (1L << (KOI8R - 548)) | (1L << (KOI8U - 548)) | (1L << (LATIN1 - 548)) | (1L << (LATIN2 - 548)) | (1L << (LATIN5 - 548)) | (1L << (LATIN7 - 548)) | (1L << (MACCE - 548)) | (1L << (MACROMAN - 548)) | (1L << (SJIS - 548)) | (1L << (SWE7 - 548)) | (1L << (TIS620 - 548)) | (1L << (UCS2 - 548)) | (1L << (UJIS - 548)))) != 0) || ((((_la - 612)) & ~0x3f) == 0 && ((1L << (_la - 612)) & ((1L << (UTF16 - 612)) | (1L << (UTF16LE - 612)) | (1L << (UTF32 - 612)) | (1L << (UTF8 - 612)) | (1L << (UTF8MB3 - 612)) | (1L << (UTF8MB4 - 612)) | (1L << (ARCHIVE - 612)) | (1L << (BLACKHOLE - 612)) | (1L << (CSV - 612)) | (1L << (FEDERATED - 612)) | (1L << (INNODB - 612)) | (1L << (MEMORY - 612)) | (1L << (MRG_MYISAM - 612)) | (1L << (MYISAM - 612)) | (1L << (NDB - 612)) | (1L << (NDBCLUSTER - 612)) | (1L << (PERFORMANCE_SCHEMA - 612)) | (1L << (TOKUDB - 612)) | (1L << (REPEATABLE - 612)) | (1L << (COMMITTED - 612)) | (1L << (UNCOMMITTED - 612)) | (1L << (SERIALIZABLE - 612)) | (1L << (GEOMETRYCOLLECTION - 612)) | (1L << (LINESTRING - 612)) | (1L << (MULTILINESTRING - 612)) | (1L << (MULTIPOINT - 612)) | (1L << (MULTIPOLYGON - 612)) | (1L << (POINT - 612)) | (1L << (POLYGON - 612)) | (1L << (ABS - 612)) | (1L << (ACOS - 612)) | (1L << (ADDDATE - 612)) | (1L << (ADDTIME - 612)) | (1L << (AES_DECRYPT - 612)) | (1L << (AES_ENCRYPT - 612)) | (1L << (AREA - 612)) | (1L << (ASBINARY - 612)) | (1L << (ASIN - 612)) | (1L << (ASTEXT - 612)) | (1L << (ASWKB - 612)) | (1L << (ASWKT - 612)) | (1L << (ASYMMETRIC_DECRYPT - 612)) | (1L << (ASYMMETRIC_DERIVE - 612)) | (1L << (ASYMMETRIC_ENCRYPT - 612)) | (1L << (ASYMMETRIC_SIGN - 612)) | (1L << (ASYMMETRIC_VERIFY - 612)) | (1L << (ATAN - 612)) | (1L << (ATAN2 - 612)) | (1L << (BENCHMARK - 612)) | (1L << (BIN - 612)) | (1L << (BIT_COUNT - 612)) | (1L << (BIT_LENGTH - 612)) | (1L << (BUFFER - 612)) | (1L << (CEIL - 612)) | (1L << (CEILING - 612)) | (1L << (CENTROID - 612)) | (1L << (CHARACTER_LENGTH - 612)) | (1L << (CHARSET - 612)) | (1L << (CHAR_LENGTH - 612)) | (1L << (COERCIBILITY - 612)) | (1L << (COLLATION - 612)) | (1L << (COMPRESS - 612)))) != 0) || ((((_la - 676)) & ~0x3f) == 0 && ((1L << (_la - 676)) & ((1L << (CONCAT - 676)) | (1L << (CONCAT_WS - 676)) | (1L << (CONNECTION_ID - 676)) | (1L << (CONV - 676)) | (1L << (CONVERT_TZ - 676)) | (1L << (COS - 676)) | (1L << (COT - 676)) | (1L << (CRC32 - 676)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 676)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 676)) | (1L << (CREATE_DH_PARAMETERS - 676)) | (1L << (CREATE_DIGEST - 676)) | (1L << (CROSSES - 676)) | (1L << (DATEDIFF - 676)) | (1L << (DATE_FORMAT - 676)) | (1L << (DAYNAME - 676)) | (1L << (DAYOFMONTH - 676)) | (1L << (DAYOFWEEK - 676)) | (1L << (DAYOFYEAR - 676)) | (1L << (DECODE - 676)) | (1L << (DEGREES - 676)) | (1L << (DES_DECRYPT - 676)) | (1L << (DES_ENCRYPT - 676)) | (1L << (DIMENSION - 676)) | (1L << (DISJOINT - 676)) | (1L << (ELT - 676)) | (1L << (ENCODE - 676)) | (1L << (ENCRYPT - 676)) | (1L << (ENDPOINT - 676)) | (1L << (ENVELOPE - 676)) | (1L << (EQUALS - 676)) | (1L << (EXP - 676)) | (1L << (EXPORT_SET - 676)) | (1L << (EXTERIORRING - 676)) | (1L << (EXTRACTVALUE - 676)) | (1L << (FIELD - 676)) | (1L << (FIND_IN_SET - 676)) | (1L << (FLOOR - 676)) | (1L << (FORMAT - 676)) | (1L << (FOUND_ROWS - 676)) | (1L << (FROM_BASE64 - 676)) | (1L << (FROM_DAYS - 676)) | (1L << (FROM_UNIXTIME - 676)) | (1L << (GEOMCOLLFROMTEXT - 676)) | (1L << (GEOMCOLLFROMWKB - 676)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 676)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 676)) | (1L << (GEOMETRYFROMTEXT - 676)) | (1L << (GEOMETRYFROMWKB - 676)) | (1L << (GEOMETRYN - 676)) | (1L << (GEOMETRYTYPE - 676)) | (1L << (GEOMFROMTEXT - 676)) | (1L << (GEOMFROMWKB - 676)) | (1L << (GET_FORMAT - 676)) | (1L << (GET_LOCK - 676)) | (1L << (GLENGTH - 676)) | (1L << (GREATEST - 676)) | (1L << (GTID_SUBSET - 676)) | (1L << (GTID_SUBTRACT - 676)) | (1L << (HEX - 676)) | (1L << (IFNULL - 676)) | (1L << (INET6_ATON - 676)) | (1L << (INET6_NTOA - 676)) | (1L << (INET_ATON - 676)))) != 0) || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & ((1L << (INET_NTOA - 740)) | (1L << (INSTR - 740)) | (1L << (INTERIORRINGN - 740)) | (1L << (INTERSECTS - 740)) | (1L << (ISCLOSED - 740)) | (1L << (ISEMPTY - 740)) | (1L << (ISNULL - 740)) | (1L << (ISSIMPLE - 740)) | (1L << (IS_FREE_LOCK - 740)) | (1L << (IS_IPV4 - 740)) | (1L << (IS_IPV4_COMPAT - 740)) | (1L << (IS_IPV4_MAPPED - 740)) | (1L << (IS_IPV6 - 740)) | (1L << (IS_USED_LOCK - 740)) | (1L << (LAST_INSERT_ID - 740)) | (1L << (LCASE - 740)) | (1L << (LEAST - 740)) | (1L << (LENGTH - 740)) | (1L << (LINEFROMTEXT - 740)) | (1L << (LINEFROMWKB - 740)) | (1L << (LINESTRINGFROMTEXT - 740)) | (1L << (LINESTRINGFROMWKB - 740)) | (1L << (LN - 740)) | (1L << (LOAD_FILE - 740)) | (1L << (LOCATE - 740)) | (1L << (LOG - 740)) | (1L << (LOG10 - 740)) | (1L << (LOG2 - 740)) | (1L << (LOWER - 740)) | (1L << (LPAD - 740)) | (1L << (LTRIM - 740)) | (1L << (MAKEDATE - 740)) | (1L << (MAKETIME - 740)) | (1L << (MAKE_SET - 740)) | (1L << (MASTER_POS_WAIT - 740)) | (1L << (MBRCONTAINS - 740)) | (1L << (MBRDISJOINT - 740)) | (1L << (MBREQUAL - 740)) | (1L << (MBRINTERSECTS - 740)) | (1L << (MBROVERLAPS - 740)) | (1L << (MBRTOUCHES - 740)) | (1L << (MBRWITHIN - 740)) | (1L << (MD5 - 740)) | (1L << (MLINEFROMTEXT - 740)) | (1L << (MLINEFROMWKB - 740)) | (1L << (MONTHNAME - 740)) | (1L << (MPOINTFROMTEXT - 740)) | (1L << (MPOINTFROMWKB - 740)) | (1L << (MPOLYFROMTEXT - 740)) | (1L << (MPOLYFROMWKB - 740)) | (1L << (MULTILINESTRINGFROMTEXT - 740)) | (1L << (MULTILINESTRINGFROMWKB - 740)) | (1L << (MULTIPOINTFROMTEXT - 740)) | (1L << (MULTIPOINTFROMWKB - 740)) | (1L << (MULTIPOLYGONFROMTEXT - 740)) | (1L << (MULTIPOLYGONFROMWKB - 740)) | (1L << (NAME_CONST - 740)) | (1L << (NULLIF - 740)) | (1L << (NUMGEOMETRIES - 740)) | (1L << (NUMINTERIORRINGS - 740)) | (1L << (NUMPOINTS - 740)) | (1L << (OCT - 740)) | (1L << (OCTET_LENGTH - 740)) | (1L << (ORD - 740)))) != 0) || ((((_la - 804)) & ~0x3f) == 0 && ((1L << (_la - 804)) & ((1L << (OVERLAPS - 804)) | (1L << (PERIOD_ADD - 804)) | (1L << (PERIOD_DIFF - 804)) | (1L << (PI - 804)) | (1L << (POINTFROMTEXT - 804)) | (1L << (POINTFROMWKB - 804)) | (1L << (POINTN - 804)) | (1L << (POLYFROMTEXT - 804)) | (1L << (POLYFROMWKB - 804)) | (1L << (POLYGONFROMTEXT - 804)) | (1L << (POLYGONFROMWKB - 804)) | (1L << (POW - 804)) | (1L << (POWER - 804)) | (1L << (QUOTE - 804)) | (1L << (RADIANS - 804)) | (1L << (RAND - 804)) | (1L << (RANDOM_BYTES - 804)) | (1L << (RELEASE_LOCK - 804)) | (1L << (REVERSE - 804)) | (1L << (ROUND - 804)) | (1L << (ROW_COUNT - 804)) | (1L << (RPAD - 804)) | (1L << (RTRIM - 804)) | (1L << (SEC_TO_TIME - 804)) | (1L << (SESSION_USER - 804)) | (1L << (SHA - 804)) | (1L << (SHA1 - 804)) | (1L << (SHA2 - 804)) | (1L << (SIGN - 804)) | (1L << (SIN - 804)) | (1L << (SLEEP - 804)) | (1L << (SOUNDEX - 804)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 804)) | (1L << (SQRT - 804)) | (1L << (SRID - 804)) | (1L << (STARTPOINT - 804)) | (1L << (STRCMP - 804)) | (1L << (STR_TO_DATE - 804)) | (1L << (ST_AREA - 804)) | (1L << (ST_ASBINARY - 804)) | (1L << (ST_ASTEXT - 804)) | (1L << (ST_ASWKB - 804)) | (1L << (ST_ASWKT - 804)) | (1L << (ST_BUFFER - 804)) | (1L << (ST_CENTROID - 804)) | (1L << (ST_CONTAINS - 804)) | (1L << (ST_CROSSES - 804)) | (1L << (ST_DIFFERENCE - 804)) | (1L << (ST_DIMENSION - 804)) | (1L << (ST_DISJOINT - 804)) | (1L << (ST_DISTANCE - 804)) | (1L << (ST_ENDPOINT - 804)) | (1L << (ST_ENVELOPE - 804)) | (1L << (ST_EQUALS - 804)) | (1L << (ST_EXTERIORRING - 804)) | (1L << (ST_GEOMCOLLFROMTEXT - 804)) | (1L << (ST_GEOMCOLLFROMTXT - 804)) | (1L << (ST_GEOMCOLLFROMWKB - 804)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 804)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 804)) | (1L << (ST_GEOMETRYFROMTEXT - 804)) | (1L << (ST_GEOMETRYFROMWKB - 804)) | (1L << (ST_GEOMETRYN - 804)) | (1L << (ST_GEOMETRYTYPE - 804)))) != 0) || ((((_la - 868)) & ~0x3f) == 0 && ((1L << (_la - 868)) & ((1L << (ST_GEOMFROMTEXT - 868)) | (1L << (ST_GEOMFROMWKB - 868)) | (1L << (ST_INTERIORRINGN - 868)) | (1L << (ST_INTERSECTION - 868)) | (1L << (ST_INTERSECTS - 868)) | (1L << (ST_ISCLOSED - 868)) | (1L << (ST_ISEMPTY - 868)) | (1L << (ST_ISSIMPLE - 868)) | (1L << (ST_LINEFROMTEXT - 868)) | (1L << (ST_LINEFROMWKB - 868)) | (1L << (ST_LINESTRINGFROMTEXT - 868)) | (1L << (ST_LINESTRINGFROMWKB - 868)) | (1L << (ST_NUMGEOMETRIES - 868)) | (1L << (ST_NUMINTERIORRING - 868)) | (1L << (ST_NUMINTERIORRINGS - 868)) | (1L << (ST_NUMPOINTS - 868)) | (1L << (ST_OVERLAPS - 868)) | (1L << (ST_POINTFROMTEXT - 868)) | (1L << (ST_POINTFROMWKB - 868)) | (1L << (ST_POINTN - 868)) | (1L << (ST_POLYFROMTEXT - 868)) | (1L << (ST_POLYFROMWKB - 868)) | (1L << (ST_POLYGONFROMTEXT - 868)) | (1L << (ST_POLYGONFROMWKB - 868)) | (1L << (ST_SRID - 868)) | (1L << (ST_STARTPOINT - 868)) | (1L << (ST_SYMDIFFERENCE - 868)) | (1L << (ST_TOUCHES - 868)) | (1L << (ST_UNION - 868)) | (1L << (ST_WITHIN - 868)) | (1L << (ST_X - 868)) | (1L << (ST_Y - 868)) | (1L << (SUBDATE - 868)) | (1L << (SUBSTRING_INDEX - 868)) | (1L << (SUBTIME - 868)) | (1L << (SYSTEM_USER - 868)) | (1L << (TAN - 868)) | (1L << (TIMEDIFF - 868)) | (1L << (TIMESTAMPADD - 868)) | (1L << (TIMESTAMPDIFF - 868)) | (1L << (TIME_FORMAT - 868)) | (1L << (TIME_TO_SEC - 868)) | (1L << (TOUCHES - 868)) | (1L << (TO_BASE64 - 868)) | (1L << (TO_DAYS - 868)) | (1L << (TO_SECONDS - 868)) | (1L << (UCASE - 868)) | (1L << (UNCOMPRESS - 868)) | (1L << (UNCOMPRESSED_LENGTH - 868)) | (1L << (UNHEX - 868)) | (1L << (UNIX_TIMESTAMP - 868)) | (1L << (UPDATEXML - 868)) | (1L << (UPPER - 868)) | (1L << (UUID - 868)) | (1L << (UUID_SHORT - 868)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 868)) | (1L << (VERSION - 868)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 868)) | (1L << (WEEKDAY - 868)) | (1L << (WEEKOFYEAR - 868)) | (1L << (WEIGHT_STRING - 868)) | (1L << (WITHIN - 868)) | (1L << (YEARWEEK - 868)) | (1L << (Y_FUNCTION - 868)))) != 0) || ((((_la - 932)) & ~0x3f) == 0 && ((1L << (_la - 932)) & ((1L << (X_FUNCTION - 932)) | (1L << (PLUS - 932)) | (1L << (MINUS - 932)) | (1L << (EXCLAMATION_SYMBOL - 932)) | (1L << (BIT_NOT_OP - 932)) | (1L << (LR_BRACKET - 932)) | (1L << (ZERO_DECIMAL - 932)) | (1L << (ONE_DECIMAL - 932)) | (1L << (TWO_DECIMAL - 932)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 932)) | (1L << (START_NATIONAL_STRING_LITERAL - 932)) | (1L << (STRING_LITERAL - 932)) | (1L << (DECIMAL_LITERAL - 932)) | (1L << (HEXADECIMAL_LITERAL - 932)) | (1L << (REAL_LITERAL - 932)) | (1L << (NULL_SPEC_LITERAL - 932)) | (1L << (BIT_STRING - 932)) | (1L << (STRING_CHARSET_NAME - 932)) | (1L << (ID - 932)) | (1L << (REVERSE_QUOTE_ID - 932)) | (1L << (LOCAL_ID - 932)) | (1L << (GLOBAL_ID - 932)))) != 0)) {
					{
					setState(5653);
					functionArgs();
					}
				}

				setState(5656);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new PasswordFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5658);
				passwordFunctionClause();
				}
				break;
			case 5:
				_localctx = new SubstringFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5659);
				match(SUBSTRING);
				setState(5660);
				match(LR_BRACKET);
				setState(5661);
				fullColumnName();
				setState(5662);
				match(COMMA);
				setState(5663);
				functionArg();
				setState(5664);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificFunctionContext extends ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
	 
		public SpecificFunctionContext() { }
		public void copyFrom(SpecificFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PositionFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		public TerminalNode POSITION() { return getToken(OpenDistroSqlParser.POSITION, 0); }
		public TerminalNode IN() { return getToken(OpenDistroSqlParser.IN, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPositionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPositionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPositionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrimFunctionCallContext extends SpecificFunctionContext {
		public Token positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		public TerminalNode TRIM() { return getToken(OpenDistroSqlParser.TRIM, 0); }
		public TerminalNode FROM() { return getToken(OpenDistroSqlParser.FROM, 0); }
		public TerminalNode BOTH() { return getToken(OpenDistroSqlParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(OpenDistroSqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(OpenDistroSqlParser.TRAILING, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTrimFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTrimFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTrimFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CURRENT_DATE() { return getToken(OpenDistroSqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(OpenDistroSqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(OpenDistroSqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(OpenDistroSqlParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(OpenDistroSqlParser.LOCALTIME, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSimpleFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSimpleFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSimpleFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CHAR() { return getToken(OpenDistroSqlParser.CHAR, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode USING() { return getToken(OpenDistroSqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCharFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCharFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCharFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WeightFunctionCallContext extends SpecificFunctionContext {
		public Token stringFormat;
		public TerminalNode WEIGHT_STRING() { return getToken(OpenDistroSqlParser.WEIGHT_STRING, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(OpenDistroSqlParser.AS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public LevelsInWeightStringContext levelsInWeightString() {
			return getRuleContext(LevelsInWeightStringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(OpenDistroSqlParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(OpenDistroSqlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterWeightFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitWeightFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitWeightFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
		public Token datetimeFormat;
		public TerminalNode GET_FORMAT() { return getToken(OpenDistroSqlParser.GET_FORMAT, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode DATE() { return getToken(OpenDistroSqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(OpenDistroSqlParser.TIME, 0); }
		public TerminalNode DATETIME() { return getToken(OpenDistroSqlParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterGetFormatFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitGetFormatFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitGetFormatFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(OpenDistroSqlParser.CASE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(OpenDistroSqlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(OpenDistroSqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCaseFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCaseFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCaseFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExtractFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public TerminalNode EXTRACT() { return getToken(OpenDistroSqlParser.EXTRACT, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(OpenDistroSqlParser.FROM, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterExtractFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitExtractFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitExtractFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
		public Token separator;
		public TerminalNode CONVERT() { return getToken(OpenDistroSqlParser.CONVERT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode USING() { return getToken(OpenDistroSqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CAST() { return getToken(OpenDistroSqlParser.CAST, 0); }
		public TerminalNode AS() { return getToken(OpenDistroSqlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDataTypeFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDataTypeFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDataTypeFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ValuesFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode VALUES() { return getToken(OpenDistroSqlParser.VALUES, 0); }
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public ValuesFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterValuesFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitValuesFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitValuesFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstrFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		public TerminalNode FROM() { return getToken(OpenDistroSqlParser.FROM, 0); }
		public TerminalNode SUBSTR() { return getToken(OpenDistroSqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(OpenDistroSqlParser.SUBSTRING, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FOR() { return getToken(OpenDistroSqlParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSubstrFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSubstrFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSubstrFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_specificFunction);
		int _la;
		try {
			setState(5825);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,856,_ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5668);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (CURRENT_DATE - 233)) | (1L << (CURRENT_TIME - 233)) | (1L << (CURRENT_TIMESTAMP - 233)) | (1L << (LOCALTIME - 233)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5669);
				match(CONVERT);
				setState(5670);
				match(LR_BRACKET);
				setState(5671);
				expression(0);
				setState(5672);
				((DataTypeFunctionCallContext)_localctx).separator = match(COMMA);
				setState(5673);
				convertedDataType();
				setState(5674);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5676);
				match(CONVERT);
				setState(5677);
				match(LR_BRACKET);
				setState(5678);
				expression(0);
				setState(5679);
				match(USING);
				setState(5680);
				charsetName();
				setState(5681);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5683);
				match(CAST);
				setState(5684);
				match(LR_BRACKET);
				setState(5685);
				expression(0);
				setState(5686);
				match(AS);
				setState(5687);
				convertedDataType();
				setState(5688);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5690);
				match(VALUES);
				setState(5691);
				match(LR_BRACKET);
				setState(5692);
				fullColumnName();
				setState(5693);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5695);
				match(CASE);
				setState(5696);
				expression(0);
				setState(5698); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5697);
					caseFuncAlternative();
					}
					}
					setState(5700); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(5704);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(5702);
					match(ELSE);
					setState(5703);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(5706);
				match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5708);
				match(CASE);
				setState(5710); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5709);
					caseFuncAlternative();
					}
					}
					setState(5712); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(5716);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(5714);
					match(ELSE);
					setState(5715);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(5718);
				match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5720);
				match(CHAR);
				setState(5721);
				match(LR_BRACKET);
				setState(5722);
				functionArgs();
				setState(5725);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5723);
					match(USING);
					setState(5724);
					charsetName();
					}
				}

				setState(5727);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5729);
				match(POSITION);
				setState(5730);
				match(LR_BRACKET);
				setState(5733);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,842,_ctx) ) {
				case 1:
					{
					setState(5731);
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5732);
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				setState(5735);
				match(IN);
				setState(5738);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,843,_ctx) ) {
				case 1:
					{
					setState(5736);
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5737);
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				setState(5740);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5742);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5743);
				match(LR_BRACKET);
				setState(5746);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,844,_ctx) ) {
				case 1:
					{
					setState(5744);
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5745);
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5748);
				match(FROM);
				setState(5751);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,845,_ctx) ) {
				case 1:
					{
					setState(5749);
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					setState(5750);
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(5758);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5753);
					match(FOR);
					setState(5756);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,846,_ctx) ) {
					case 1:
						{
						setState(5754);
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						setState(5755);
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				setState(5760);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5762);
				match(TRIM);
				setState(5763);
				match(LR_BRACKET);
				setState(5764);
				((TrimFunctionCallContext)_localctx).positioinForm = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5767);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,848,_ctx) ) {
				case 1:
					{
					setState(5765);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5766);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5769);
				match(FROM);
				setState(5772);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,849,_ctx) ) {
				case 1:
					{
					setState(5770);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5771);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(5774);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5776);
				match(TRIM);
				setState(5777);
				match(LR_BRACKET);
				setState(5780);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,850,_ctx) ) {
				case 1:
					{
					setState(5778);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5779);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5782);
				match(FROM);
				setState(5785);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,851,_ctx) ) {
				case 1:
					{
					setState(5783);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5784);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(5787);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5789);
				match(WEIGHT_STRING);
				setState(5790);
				match(LR_BRACKET);
				setState(5793);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,852,_ctx) ) {
				case 1:
					{
					setState(5791);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(5792);
					expression(0);
					}
					break;
				}
				setState(5801);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5795);
					match(AS);
					setState(5796);
					((WeightFunctionCallContext)_localctx).stringFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5797);
					match(LR_BRACKET);
					setState(5798);
					decimalLiteral();
					setState(5799);
					match(RR_BRACKET);
					}
				}

				setState(5804);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(5803);
					levelsInWeightString();
					}
				}

				setState(5806);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5808);
				match(EXTRACT);
				setState(5809);
				match(LR_BRACKET);
				setState(5810);
				intervalType();
				setState(5811);
				match(FROM);
				setState(5814);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,855,_ctx) ) {
				case 1:
					{
					setState(5812);
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(5813);
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(5816);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(5818);
				match(GET_FORMAT);
				setState(5819);
				match(LR_BRACKET);
				setState(5820);
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (DATETIME - 184)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5821);
				match(COMMA);
				setState(5822);
				stringLiteral();
				setState(5823);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseFuncAlternativeContext extends ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		public TerminalNode WHEN() { return getToken(OpenDistroSqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(OpenDistroSqlParser.THEN, 0); }
		public List<FunctionArgContext> functionArg() {
			return getRuleContexts(FunctionArgContext.class);
		}
		public FunctionArgContext functionArg(int i) {
			return getRuleContext(FunctionArgContext.class,i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseFuncAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCaseFuncAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCaseFuncAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCaseFuncAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseFuncAlternativeContext caseFuncAlternative() throws RecognitionException {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_caseFuncAlternative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5827);
			match(WHEN);
			setState(5828);
			((CaseFuncAlternativeContext)_localctx).condition = functionArg();
			setState(5829);
			match(THEN);
			setState(5830);
			((CaseFuncAlternativeContext)_localctx).consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelsInWeightStringContext extends ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelsInWeightString; }
	 
		public LevelsInWeightStringContext() { }
		public void copyFrom(LevelsInWeightStringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		public TerminalNode LEVEL() { return getToken(OpenDistroSqlParser.LEVEL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLevelWeightRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLevelWeightRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLevelWeightRange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LevelWeightListContext extends LevelsInWeightStringContext {
		public TerminalNode LEVEL() { return getToken(OpenDistroSqlParser.LEVEL, 0); }
		public List<LevelInWeightListElementContext> levelInWeightListElement() {
			return getRuleContexts(LevelInWeightListElementContext.class);
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return getRuleContext(LevelInWeightListElementContext.class,i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLevelWeightList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLevelWeightList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLevelWeightList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_levelsInWeightString);
		int _la;
		try {
			setState(5846);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5832);
				match(LEVEL);
				setState(5833);
				levelInWeightListElement();
				setState(5838);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5834);
					match(COMMA);
					setState(5835);
					levelInWeightListElement();
					}
					}
					setState(5840);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5841);
				match(LEVEL);
				setState(5842);
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				setState(5843);
				match(MINUS);
				setState(5844);
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElementContext extends ParserRuleContext {
		public Token orderType;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(OpenDistroSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(OpenDistroSqlParser.DESC, 0); }
		public TerminalNode REVERSE() { return getToken(OpenDistroSqlParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLevelInWeightListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLevelInWeightListElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLevelInWeightListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_levelInWeightListElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5848);
			decimalLiteral();
			setState(5850);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				setState(5849);
				((LevelInWeightListElementContext)_localctx).orderType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					((LevelInWeightListElementContext)_localctx).orderType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public Token separator;
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode AVG() { return getToken(OpenDistroSqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(OpenDistroSqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(OpenDistroSqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(OpenDistroSqlParser.SUM, 0); }
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(OpenDistroSqlParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(OpenDistroSqlParser.COUNT, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode BIT_AND() { return getToken(OpenDistroSqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(OpenDistroSqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(OpenDistroSqlParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(OpenDistroSqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(OpenDistroSqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(OpenDistroSqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(OpenDistroSqlParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(OpenDistroSqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(OpenDistroSqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(OpenDistroSqlParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(OpenDistroSqlParser.GROUP_CONCAT, 0); }
		public TerminalNode ORDER() { return getToken(OpenDistroSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(OpenDistroSqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public TerminalNode SEPARATOR() { return getToken(OpenDistroSqlParser.SEPARATOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(5908);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,868,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5852);
				_la = _input.LA(1);
				if ( !(((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (AVG - 217)) | (1L << (MAX - 217)) | (1L << (MIN - 217)) | (1L << (SUM - 217)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5853);
				match(LR_BRACKET);
				setState(5855);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(5854);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5857);
				functionArg();
				setState(5858);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5860);
				match(COUNT);
				setState(5861);
				match(LR_BRACKET);
				setState(5867);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(5862);
					((AggregateWindowedFunctionContext)_localctx).starArg = match(STAR);
					}
					break;
				case ALL:
				case CASE:
				case CAST:
				case CONVERT:
				case CURRENT_USER:
				case DATABASE:
				case EXISTS:
				case IF:
				case INSERT:
				case INTERVAL:
				case LEFT:
				case NOT:
				case NULL_LITERAL:
				case REPLACE:
				case RIGHT:
				case VALUES:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case CHAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case GROUP_CONCAT:
				case MAX:
				case MIN:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case EXTRACT:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLIENT:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MERGE:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case OFFLINE:
				case OFFSET:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNS:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLESPACE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case PLUS:
				case MINUS:
				case EXCLAMATION_SYMBOL:
				case BIT_NOT_OP:
				case LR_BRACKET:
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case CHARSET_REVERSE_QOUTE_STRING:
				case START_NATIONAL_STRING_LITERAL:
				case STRING_LITERAL:
				case DECIMAL_LITERAL:
				case HEXADECIMAL_LITERAL:
				case REAL_LITERAL:
				case NULL_SPEC_LITERAL:
				case BIT_STRING:
				case STRING_CHARSET_NAME:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
					{
					setState(5864);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL) {
						{
						setState(5863);
						((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
						}
					}

					setState(5866);
					functionArg();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5869);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5870);
				match(COUNT);
				setState(5871);
				match(LR_BRACKET);
				setState(5872);
				((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
				setState(5873);
				functionArgs();
				setState(5874);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5876);
				_la = _input.LA(1);
				if ( !(((((_la - 218)) & ~0x3f) == 0 && ((1L << (_la - 218)) & ((1L << (BIT_AND - 218)) | (1L << (BIT_OR - 218)) | (1L << (BIT_XOR - 218)) | (1L << (STD - 218)) | (1L << (STDDEV - 218)) | (1L << (STDDEV_POP - 218)) | (1L << (STDDEV_SAMP - 218)) | (1L << (VAR_POP - 218)) | (1L << (VAR_SAMP - 218)) | (1L << (VARIANCE - 218)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5877);
				match(LR_BRACKET);
				setState(5879);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(5878);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
					}
				}

				setState(5881);
				functionArg();
				setState(5882);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5884);
				match(GROUP_CONCAT);
				setState(5885);
				match(LR_BRACKET);
				setState(5887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTINCT) {
					{
					setState(5886);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
				}

				setState(5889);
				functionArgs();
				setState(5900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(5890);
					match(ORDER);
					setState(5891);
					match(BY);
					setState(5892);
					orderByExpression();
					setState(5897);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5893);
						match(COMMA);
						setState(5894);
						orderByExpression();
						}
						}
						setState(5899);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(5904);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(5902);
					match(SEPARATOR);
					setState(5903);
					((AggregateWindowedFunctionContext)_localctx).separator = match(STRING_LITERAL);
					}
				}

				setState(5906);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionNameContext extends ParserRuleContext {
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public TerminalNode ASCII() { return getToken(OpenDistroSqlParser.ASCII, 0); }
		public TerminalNode CURDATE() { return getToken(OpenDistroSqlParser.CURDATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(OpenDistroSqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(OpenDistroSqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(OpenDistroSqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURTIME() { return getToken(OpenDistroSqlParser.CURTIME, 0); }
		public TerminalNode DATE_ADD() { return getToken(OpenDistroSqlParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(OpenDistroSqlParser.DATE_SUB, 0); }
		public TerminalNode IF() { return getToken(OpenDistroSqlParser.IF, 0); }
		public TerminalNode INSERT() { return getToken(OpenDistroSqlParser.INSERT, 0); }
		public TerminalNode LOCALTIME() { return getToken(OpenDistroSqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(OpenDistroSqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode MID() { return getToken(OpenDistroSqlParser.MID, 0); }
		public TerminalNode NOW() { return getToken(OpenDistroSqlParser.NOW, 0); }
		public TerminalNode REPLACE() { return getToken(OpenDistroSqlParser.REPLACE, 0); }
		public TerminalNode SUBSTR() { return getToken(OpenDistroSqlParser.SUBSTR, 0); }
		public TerminalNode SYSDATE() { return getToken(OpenDistroSqlParser.SYSDATE, 0); }
		public TerminalNode TRIM() { return getToken(OpenDistroSqlParser.TRIM, 0); }
		public TerminalNode UTC_DATE() { return getToken(OpenDistroSqlParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(OpenDistroSqlParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(OpenDistroSqlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterScalarFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitScalarFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitScalarFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionNameContext scalarFunctionName() throws RecognitionException {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_scalarFunctionName);
		try {
			setState(5932);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case COUNT:
			case POSITION:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(5910);
				functionNameBase();
				}
				break;
			case ASCII:
				enterOuterAlt(_localctx, 2);
				{
				setState(5911);
				match(ASCII);
				}
				break;
			case CURDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5912);
				match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5913);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(5914);
				match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(5915);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(5916);
				match(CURTIME);
				}
				break;
			case DATE_ADD:
				enterOuterAlt(_localctx, 8);
				{
				setState(5917);
				match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				enterOuterAlt(_localctx, 9);
				{
				setState(5918);
				match(DATE_SUB);
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 10);
				{
				setState(5919);
				match(IF);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(5920);
				match(INSERT);
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 12);
				{
				setState(5921);
				match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 13);
				{
				setState(5922);
				match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				enterOuterAlt(_localctx, 14);
				{
				setState(5923);
				match(MID);
				}
				break;
			case NOW:
				enterOuterAlt(_localctx, 15);
				{
				setState(5924);
				match(NOW);
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 16);
				{
				setState(5925);
				match(REPLACE);
				}
				break;
			case SUBSTR:
				enterOuterAlt(_localctx, 17);
				{
				setState(5926);
				match(SUBSTR);
				}
				break;
			case SYSDATE:
				enterOuterAlt(_localctx, 18);
				{
				setState(5927);
				match(SYSDATE);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 19);
				{
				setState(5928);
				match(TRIM);
				}
				break;
			case UTC_DATE:
				enterOuterAlt(_localctx, 20);
				{
				setState(5929);
				match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				enterOuterAlt(_localctx, 21);
				{
				setState(5930);
				match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				enterOuterAlt(_localctx, 22);
				{
				setState(5931);
				match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PasswordFunctionClauseContext extends ParserRuleContext {
		public Token functionName;
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode PASSWORD() { return getToken(OpenDistroSqlParser.PASSWORD, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(OpenDistroSqlParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordFunctionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPasswordFunctionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPasswordFunctionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPasswordFunctionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PasswordFunctionClauseContext passwordFunctionClause() throws RecognitionException {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_passwordFunctionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5934);
			((PasswordFunctionClauseContext)_localctx).functionName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				((PasswordFunctionClauseContext)_localctx).functionName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5935);
			match(LR_BRACKET);
			setState(5936);
			functionArg();
			setState(5937);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public List<FunctionCallContext> functionCall() {
			return getRuleContexts(FunctionCallContext.class);
		}
		public FunctionCallContext functionCall(int i) {
			return getRuleContext(FunctionCallContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterFunctionArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitFunctionArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitFunctionArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgsContext functionArgs() throws RecognitionException {
		FunctionArgsContext _localctx = new FunctionArgsContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_functionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5943);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,870,_ctx) ) {
			case 1:
				{
				setState(5939);
				constant();
				}
				break;
			case 2:
				{
				setState(5940);
				fullColumnName();
				}
				break;
			case 3:
				{
				setState(5941);
				functionCall();
				}
				break;
			case 4:
				{
				setState(5942);
				expression(0);
				}
				break;
			}
			setState(5954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5945);
				match(COMMA);
				setState(5950);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,871,_ctx) ) {
				case 1:
					{
					setState(5946);
					constant();
					}
					break;
				case 2:
					{
					setState(5947);
					fullColumnName();
					}
					break;
				case 3:
					{
					setState(5948);
					functionCall();
					}
					break;
				case 4:
					{
					setState(5949);
					expression(0);
					}
					break;
				}
				}
				}
				setState(5956);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterFunctionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitFunctionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitFunctionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgContext functionArg() throws RecognitionException {
		FunctionArgContext _localctx = new FunctionArgContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_functionArg);
		try {
			setState(5961);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,873,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5957);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5958);
				fullColumnName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5959);
				functionCall();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5960);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class NotExpressionContext extends ExpressionContext {
		public Token notOperator;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(OpenDistroSqlParser.NOT, 0); }
		public NotExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterNotExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitNotExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitNotExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LogicalExpressionContext extends ExpressionContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public LogicalExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLogicalExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLogicalExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLogicalExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExpressionContext extends ExpressionContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPredicateExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPredicateExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPredicateExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 590;
		enterRecursionRule(_localctx, 590, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5967);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,874,_ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(5964);
				((NotExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5965);
				expression(3);
				}
				break;
			case 2:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5966);
				predicate(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5975);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,875,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_expression);
					setState(5969);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5970);
					logicalOperator();
					setState(5971);
					expression(3);
					}
					} 
				}
				setState(5977);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,875,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	 
		public PredicateContext() { }
		public void copyFrom(PredicateContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SoundsLikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode SOUNDS() { return getToken(OpenDistroSqlParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(OpenDistroSqlParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSoundsLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSoundsLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSoundsLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExpressionAtomPredicateContext extends PredicateContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(OpenDistroSqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(OpenDistroSqlParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterExpressionAtomPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitExpressionAtomPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitExpressionAtomPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IN() { return getToken(OpenDistroSqlParser.IN, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(OpenDistroSqlParser.NOT, 0); }
		public InPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryComparasionPredicateContext extends PredicateContext {
		public Token quantifier;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode ALL() { return getToken(OpenDistroSqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(OpenDistroSqlParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(OpenDistroSqlParser.SOME, 0); }
		public SubqueryComparasionPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSubqueryComparasionPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSubqueryComparasionPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSubqueryComparasionPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BetweenPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(OpenDistroSqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(OpenDistroSqlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(OpenDistroSqlParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryComparasionPredicateContext extends PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public BinaryComparasionPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterBinaryComparasionPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitBinaryComparasionPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitBinaryComparasionPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsNullPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(OpenDistroSqlParser.IS, 0); }
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public IsNullPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIsNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIsNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIsNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(OpenDistroSqlParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(OpenDistroSqlParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(OpenDistroSqlParser.ESCAPE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(OpenDistroSqlParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RegexpPredicateContext extends PredicateContext {
		public Token regex;
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode REGEXP() { return getToken(OpenDistroSqlParser.REGEXP, 0); }
		public TerminalNode RLIKE() { return getToken(OpenDistroSqlParser.RLIKE, 0); }
		public TerminalNode NOT() { return getToken(OpenDistroSqlParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterRegexpPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitRegexpPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitRegexpPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 592;
		enterRecursionRule(_localctx, 592, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(5981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,876,_ctx) ) {
			case 1:
				{
				setState(5979);
				match(LOCAL_ID);
				setState(5980);
				match(VAR_ASSIGN);
				}
				break;
			}
			setState(5983);
			expressionAtom(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(6042);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,884,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6040);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,883,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparasionPredicateContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(5985);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(5986);
						comparisonOperator();
						setState(5987);
						((BinaryComparasionPredicateContext)_localctx).right = predicate(8);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(5989);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(5991);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5990);
							match(NOT);
							}
						}

						setState(5993);
						match(BETWEEN);
						setState(5994);
						predicate(0);
						setState(5995);
						match(AND);
						setState(5996);
						predicate(6);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(5998);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(5999);
						match(SOUNDS);
						setState(6000);
						match(LIKE);
						setState(6001);
						predicate(5);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6002);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6004);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6003);
							match(NOT);
							}
						}

						setState(6006);
						((RegexpPredicateContext)_localctx).regex = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6007);
						predicate(3);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6008);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(6010);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6009);
							match(NOT);
							}
						}

						setState(6012);
						match(IN);
						setState(6013);
						match(LR_BRACKET);
						setState(6016);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,880,_ctx) ) {
						case 1:
							{
							setState(6014);
							selectStatement();
							}
							break;
						case 2:
							{
							setState(6015);
							expressions();
							}
							break;
						}
						setState(6018);
						match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6020);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(6021);
						match(IS);
						setState(6022);
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6023);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(6024);
						comparisonOperator();
						setState(6025);
						((SubqueryComparasionPredicateContext)_localctx).quantifier = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparasionPredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6026);
						match(LR_BRACKET);
						setState(6027);
						selectStatement();
						setState(6028);
						match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(6030);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6032);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6031);
							match(NOT);
							}
						}

						setState(6034);
						match(LIKE);
						setState(6035);
						predicate(0);
						setState(6038);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,882,_ctx) ) {
						case 1:
							{
							setState(6036);
							match(ESCAPE);
							setState(6037);
							match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				setState(6044);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,884,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExpressionAtomContext extends ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionAtom; }
	 
		public ExpressionAtomContext() { }
		public void copyFrom(ExpressionAtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnaryExpressionAtomContext extends ExpressionAtomContext {
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUnaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUnaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUnaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(OpenDistroSqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCollateExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCollateExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCollateExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryExpessionAtomContext extends ExpressionAtomContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public SubqueryExpessionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterSubqueryExpessionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitSubqueryExpessionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitSubqueryExpessionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterMysqlVariableExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitMysqlVariableExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitMysqlVariableExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedExpressionAtomContext extends ExpressionAtomContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterNestedExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitNestedExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitNestedExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedRowExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode ROW() { return getToken(OpenDistroSqlParser.ROW, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterNestedRowExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitNestedRowExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitNestedRowExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode INTERVAL() { return getToken(OpenDistroSqlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIntervalExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIntervalExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIntervalExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExistsExpessionAtomContext extends ExpressionAtomContext {
		public TerminalNode EXISTS() { return getToken(OpenDistroSqlParser.EXISTS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ExistsExpessionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterExistsExpessionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitExistsExpessionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitExistsExpessionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstantExpressionAtomContext extends ExpressionAtomContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterConstantExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitConstantExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitConstantExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterFunctionCallExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitFunctionCallExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitFunctionCallExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode BINARY() { return getToken(OpenDistroSqlParser.BINARY, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterBinaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitBinaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitBinaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterFullColumnNameExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitFullColumnNameExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitFullColumnNameExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BitExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public BitOperatorContext bitOperator() {
			return getRuleContext(BitOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterBitExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitBitExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitBitExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionAtomContext expressionAtom() throws RecognitionException {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionAtomContext _localctx = new ExpressionAtomContext(_ctx, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 594;
		enterRecursionRule(_localctx, 594, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6090);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,887,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6046);
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6047);
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6048);
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6049);
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6050);
				unaryOperator();
				setState(6051);
				expressionAtom(8);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6053);
				match(BINARY);
				setState(6054);
				expressionAtom(7);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6055);
				match(LR_BRACKET);
				setState(6056);
				expression(0);
				setState(6061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6057);
					match(COMMA);
					setState(6058);
					expression(0);
					}
					}
					setState(6063);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6064);
				match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6066);
				match(ROW);
				setState(6067);
				match(LR_BRACKET);
				setState(6068);
				expression(0);
				setState(6071); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6069);
					match(COMMA);
					setState(6070);
					expression(0);
					}
					}
					setState(6073); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(6075);
				match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpessionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6077);
				match(EXISTS);
				setState(6078);
				match(LR_BRACKET);
				setState(6079);
				selectStatement();
				setState(6080);
				match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpessionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6082);
				match(LR_BRACKET);
				setState(6083);
				selectStatement();
				setState(6084);
				match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6086);
				match(INTERVAL);
				setState(6087);
				expression(0);
				setState(6088);
				intervalType();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6101);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,889,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6099);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,888,_ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6092);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6093);
						bitOperator();
						setState(6094);
						((BitExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 2:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(6096);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(6097);
						match(COLLATE);
						setState(6098);
						collationName();
						}
						break;
					}
					} 
				}
				setState(6103);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,889,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(OpenDistroSqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitUnaryOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6104);
			_la = _input.LA(1);
			if ( !(_la==NOT || ((((_la - 945)) & ~0x3f) == 0 && ((1L << (_la - 945)) & ((1L << (PLUS - 945)) | (1L << (MINUS - 945)) | (1L << (EXCLAMATION_SYMBOL - 945)) | (1L << (BIT_NOT_OP - 945)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_comparisonOperator);
		try {
			setState(6117);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,890,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6106);
				match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6107);
				match(GREATER_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6108);
				match(LESS_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6109);
				match(LESS_SYMBOL);
				setState(6110);
				match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6111);
				match(GREATER_SYMBOL);
				setState(6112);
				match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6113);
				match(LESS_SYMBOL);
				setState(6114);
				match(GREATER_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6115);
				match(EXCLAMATION_SYMBOL);
				setState(6116);
				match(EQUAL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(OpenDistroSqlParser.AND, 0); }
		public TerminalNode XOR() { return getToken(OpenDistroSqlParser.XOR, 0); }
		public TerminalNode OR() { return getToken(OpenDistroSqlParser.OR, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_logicalOperator);
		try {
			setState(6126);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(6119);
				match(AND);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(6120);
				match(BIT_AND_OP);
				setState(6121);
				match(BIT_AND_OP);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(6122);
				match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 4);
				{
				setState(6123);
				match(OR);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(6124);
				match(BIT_OR_OP);
				setState(6125);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitOperatorContext extends ParserRuleContext {
		public BitOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterBitOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitBitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitBitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitOperatorContext bitOperator() throws RecognitionException {
		BitOperatorContext _localctx = new BitOperatorContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_bitOperator);
		try {
			setState(6135);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6128);
				match(LESS_SYMBOL);
				setState(6129);
				match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6130);
				match(GREATER_SYMBOL);
				setState(6131);
				match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 3);
				{
				setState(6132);
				match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				enterOuterAlt(_localctx, 4);
				{
				setState(6133);
				match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(6134);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode DIV() { return getToken(OpenDistroSqlParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(OpenDistroSqlParser.MOD, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitMathOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6137);
			_la = _input.LA(1);
			if ( !(((((_la - 942)) & ~0x3f) == 0 && ((1L << (_la - 942)) & ((1L << (STAR - 942)) | (1L << (DIVIDE - 942)) | (1L << (MODULE - 942)) | (1L << (PLUS - 942)) | (1L << (MINUSMINUS - 942)) | (1L << (MINUS - 942)) | (1L << (DIV - 942)) | (1L << (MOD - 942)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameBaseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(OpenDistroSqlParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(OpenDistroSqlParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(OpenDistroSqlParser.BIG5, 0); }
		public TerminalNode CP1250() { return getToken(OpenDistroSqlParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(OpenDistroSqlParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(OpenDistroSqlParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(OpenDistroSqlParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(OpenDistroSqlParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(OpenDistroSqlParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(OpenDistroSqlParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(OpenDistroSqlParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(OpenDistroSqlParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(OpenDistroSqlParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(OpenDistroSqlParser.EUCKR, 0); }
		public TerminalNode GB2312() { return getToken(OpenDistroSqlParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(OpenDistroSqlParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(OpenDistroSqlParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(OpenDistroSqlParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(OpenDistroSqlParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(OpenDistroSqlParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(OpenDistroSqlParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(OpenDistroSqlParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(OpenDistroSqlParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(OpenDistroSqlParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(OpenDistroSqlParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(OpenDistroSqlParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(OpenDistroSqlParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(OpenDistroSqlParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(OpenDistroSqlParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(OpenDistroSqlParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(OpenDistroSqlParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(OpenDistroSqlParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(OpenDistroSqlParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(OpenDistroSqlParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(OpenDistroSqlParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(OpenDistroSqlParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(OpenDistroSqlParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(OpenDistroSqlParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(OpenDistroSqlParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(OpenDistroSqlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterCharsetNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitCharsetNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitCharsetNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6139);
			_la = _input.LA(1);
			if ( !(((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (ARMSCII8 - 578)) | (1L << (ASCII - 578)) | (1L << (BIG5 - 578)) | (1L << (CP1250 - 578)) | (1L << (CP1251 - 578)) | (1L << (CP1256 - 578)) | (1L << (CP1257 - 578)) | (1L << (CP850 - 578)) | (1L << (CP852 - 578)) | (1L << (CP866 - 578)) | (1L << (CP932 - 578)) | (1L << (DEC8 - 578)) | (1L << (EUCJPMS - 578)) | (1L << (EUCKR - 578)) | (1L << (GB2312 - 578)) | (1L << (GBK - 578)) | (1L << (GEOSTD8 - 578)) | (1L << (GREEK - 578)) | (1L << (HEBREW - 578)) | (1L << (HP8 - 578)) | (1L << (KEYBCS2 - 578)) | (1L << (KOI8R - 578)) | (1L << (KOI8U - 578)) | (1L << (LATIN1 - 578)) | (1L << (LATIN2 - 578)) | (1L << (LATIN5 - 578)) | (1L << (LATIN7 - 578)) | (1L << (MACCE - 578)) | (1L << (MACROMAN - 578)) | (1L << (SJIS - 578)) | (1L << (SWE7 - 578)) | (1L << (TIS620 - 578)) | (1L << (UCS2 - 578)) | (1L << (UJIS - 578)) | (1L << (UTF16 - 578)) | (1L << (UTF16LE - 578)) | (1L << (UTF32 - 578)) | (1L << (UTF8 - 578)) | (1L << (UTF8MB3 - 578)) | (1L << (UTF8MB4 - 578)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelBaseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(OpenDistroSqlParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(OpenDistroSqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(OpenDistroSqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(OpenDistroSqlParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevelBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterTransactionLevelBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitTransactionLevelBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitTransactionLevelBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_transactionLevelBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6141);
			_la = _input.LA(1);
			if ( !(((((_la - 630)) & ~0x3f) == 0 && ((1L << (_la - 630)) & ((1L << (REPEATABLE - 630)) | (1L << (COMMITTED - 630)) | (1L << (UNCOMMITTED - 630)) | (1L << (SERIALIZABLE - 630)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesBaseContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(OpenDistroSqlParser.TABLES, 0); }
		public TerminalNode ROUTINE() { return getToken(OpenDistroSqlParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(OpenDistroSqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(OpenDistroSqlParser.FILE, 0); }
		public TerminalNode PROCESS() { return getToken(OpenDistroSqlParser.PROCESS, 0); }
		public TerminalNode RELOAD() { return getToken(OpenDistroSqlParser.RELOAD, 0); }
		public TerminalNode SHUTDOWN() { return getToken(OpenDistroSqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(OpenDistroSqlParser.SUPER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(OpenDistroSqlParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegesBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterPrivilegesBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitPrivilegesBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitPrivilegesBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_privilegesBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6143);
			_la = _input.LA(1);
			if ( !(((((_la - 569)) & ~0x3f) == 0 && ((1L << (_la - 569)) & ((1L << (TABLES - 569)) | (1L << (ROUTINE - 569)) | (1L << (EXECUTE - 569)) | (1L << (FILE - 569)) | (1L << (PROCESS - 569)) | (1L << (RELOAD - 569)) | (1L << (SHUTDOWN - 569)) | (1L << (SUPER - 569)) | (1L << (PRIVILEGES - 569)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeBaseContext extends ParserRuleContext {
		public TerminalNode QUARTER() { return getToken(OpenDistroSqlParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(OpenDistroSqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(OpenDistroSqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(OpenDistroSqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(OpenDistroSqlParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(OpenDistroSqlParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(OpenDistroSqlParser.SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(OpenDistroSqlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterIntervalTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitIntervalTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitIntervalTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeBaseContext intervalTypeBase() throws RecognitionException {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_intervalTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6145);
			_la = _input.LA(1);
			if ( !(((((_la - 561)) & ~0x3f) == 0 && ((1L << (_la - 561)) & ((1L << (QUARTER - 561)) | (1L << (MONTH - 561)) | (1L << (DAY - 561)) | (1L << (HOUR - 561)) | (1L << (MINUTE - 561)) | (1L << (WEEK - 561)) | (1L << (SECOND - 561)) | (1L << (MICROSECOND - 561)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeBaseContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(OpenDistroSqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(OpenDistroSqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(OpenDistroSqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(OpenDistroSqlParser.DATETIME, 0); }
		public TerminalNode YEAR() { return getToken(OpenDistroSqlParser.YEAR, 0); }
		public TerminalNode ENUM() { return getToken(OpenDistroSqlParser.ENUM, 0); }
		public TerminalNode TEXT() { return getToken(OpenDistroSqlParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterDataTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitDataTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitDataTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_dataTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6147);
			_la = _input.LA(1);
			if ( !(((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (DATETIME - 184)) | (1L << (YEAR - 184)) | (1L << (TEXT - 184)) | (1L << (ENUM - 184)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(OpenDistroSqlParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(OpenDistroSqlParser.ACTION, 0); }
		public TerminalNode AFTER() { return getToken(OpenDistroSqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(OpenDistroSqlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(OpenDistroSqlParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(OpenDistroSqlParser.ANY, 0); }
		public TerminalNode AT() { return getToken(OpenDistroSqlParser.AT, 0); }
		public TerminalNode AUTHORS() { return getToken(OpenDistroSqlParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(OpenDistroSqlParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(OpenDistroSqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(OpenDistroSqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(OpenDistroSqlParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BEGIN() { return getToken(OpenDistroSqlParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(OpenDistroSqlParser.BINLOG, 0); }
		public TerminalNode BIT() { return getToken(OpenDistroSqlParser.BIT, 0); }
		public TerminalNode BLOCK() { return getToken(OpenDistroSqlParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(OpenDistroSqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(OpenDistroSqlParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(OpenDistroSqlParser.BTREE, 0); }
		public TerminalNode CACHE() { return getToken(OpenDistroSqlParser.CACHE, 0); }
		public TerminalNode CASCADED() { return getToken(OpenDistroSqlParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(OpenDistroSqlParser.CHAIN, 0); }
		public TerminalNode CHANGED() { return getToken(OpenDistroSqlParser.CHANGED, 0); }
		public TerminalNode CHANNEL() { return getToken(OpenDistroSqlParser.CHANNEL, 0); }
		public TerminalNode CHECKSUM() { return getToken(OpenDistroSqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(OpenDistroSqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode CIPHER() { return getToken(OpenDistroSqlParser.CIPHER, 0); }
		public TerminalNode CLIENT() { return getToken(OpenDistroSqlParser.CLIENT, 0); }
		public TerminalNode CLOSE() { return getToken(OpenDistroSqlParser.CLOSE, 0); }
		public TerminalNode COALESCE() { return getToken(OpenDistroSqlParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(OpenDistroSqlParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(OpenDistroSqlParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(OpenDistroSqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode COMMENT() { return getToken(OpenDistroSqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(OpenDistroSqlParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(OpenDistroSqlParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(OpenDistroSqlParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(OpenDistroSqlParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(OpenDistroSqlParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(OpenDistroSqlParser.CONCURRENT, 0); }
		public TerminalNode CONNECTION() { return getToken(OpenDistroSqlParser.CONNECTION, 0); }
		public TerminalNode CONSISTENT() { return getToken(OpenDistroSqlParser.CONSISTENT, 0); }
		public TerminalNode CONTAINS() { return getToken(OpenDistroSqlParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(OpenDistroSqlParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(OpenDistroSqlParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(OpenDistroSqlParser.COPY, 0); }
		public TerminalNode CPU() { return getToken(OpenDistroSqlParser.CPU, 0); }
		public TerminalNode DATA() { return getToken(OpenDistroSqlParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(OpenDistroSqlParser.DATAFILE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(OpenDistroSqlParser.DEALLOCATE, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(OpenDistroSqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(OpenDistroSqlParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(OpenDistroSqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(OpenDistroSqlParser.DES_KEY_FILE, 0); }
		public TerminalNode DIRECTORY() { return getToken(OpenDistroSqlParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(OpenDistroSqlParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(OpenDistroSqlParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(OpenDistroSqlParser.DISK, 0); }
		public TerminalNode DO() { return getToken(OpenDistroSqlParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(OpenDistroSqlParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(OpenDistroSqlParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(OpenDistroSqlParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(OpenDistroSqlParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(OpenDistroSqlParser.ENCRYPTION, 0); }
		public TerminalNode END() { return getToken(OpenDistroSqlParser.END, 0); }
		public TerminalNode ENDS() { return getToken(OpenDistroSqlParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(OpenDistroSqlParser.ENGINE, 0); }
		public TerminalNode ENGINES() { return getToken(OpenDistroSqlParser.ENGINES, 0); }
		public TerminalNode ERROR() { return getToken(OpenDistroSqlParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(OpenDistroSqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(OpenDistroSqlParser.ESCAPE, 0); }
		public TerminalNode EVEN() { return getToken(OpenDistroSqlParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(OpenDistroSqlParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(OpenDistroSqlParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(OpenDistroSqlParser.EVERY, 0); }
		public TerminalNode EXCHANGE() { return getToken(OpenDistroSqlParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(OpenDistroSqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(OpenDistroSqlParser.EXPIRE, 0); }
		public TerminalNode EXPORT() { return getToken(OpenDistroSqlParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(OpenDistroSqlParser.EXTENDED, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(OpenDistroSqlParser.EXTENT_SIZE, 0); }
		public TerminalNode FAST() { return getToken(OpenDistroSqlParser.FAST, 0); }
		public TerminalNode FAULTS() { return getToken(OpenDistroSqlParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(OpenDistroSqlParser.FIELDS, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(OpenDistroSqlParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(OpenDistroSqlParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(OpenDistroSqlParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(OpenDistroSqlParser.FIXED, 0); }
		public TerminalNode FLUSH() { return getToken(OpenDistroSqlParser.FLUSH, 0); }
		public TerminalNode FOLLOWS() { return getToken(OpenDistroSqlParser.FOLLOWS, 0); }
		public TerminalNode FOUND() { return getToken(OpenDistroSqlParser.FOUND, 0); }
		public TerminalNode FULL() { return getToken(OpenDistroSqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(OpenDistroSqlParser.FUNCTION, 0); }
		public TerminalNode GENERAL() { return getToken(OpenDistroSqlParser.GENERAL, 0); }
		public TerminalNode GLOBAL() { return getToken(OpenDistroSqlParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(OpenDistroSqlParser.GRANTS, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(OpenDistroSqlParser.GROUP_REPLICATION, 0); }
		public TerminalNode HANDLER() { return getToken(OpenDistroSqlParser.HANDLER, 0); }
		public TerminalNode HASH() { return getToken(OpenDistroSqlParser.HASH, 0); }
		public TerminalNode HELP() { return getToken(OpenDistroSqlParser.HELP, 0); }
		public TerminalNode HOST() { return getToken(OpenDistroSqlParser.HOST, 0); }
		public TerminalNode HOSTS() { return getToken(OpenDistroSqlParser.HOSTS, 0); }
		public TerminalNode IDENTIFIED() { return getToken(OpenDistroSqlParser.IDENTIFIED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(OpenDistroSqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(OpenDistroSqlParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(OpenDistroSqlParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(OpenDistroSqlParser.INITIAL_SIZE, 0); }
		public TerminalNode INPLACE() { return getToken(OpenDistroSqlParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(OpenDistroSqlParser.INSERT_METHOD, 0); }
		public TerminalNode INSTALL() { return getToken(OpenDistroSqlParser.INSTALL, 0); }
		public TerminalNode INSTANCE() { return getToken(OpenDistroSqlParser.INSTANCE, 0); }
		public TerminalNode INTERNAL() { return getToken(OpenDistroSqlParser.INTERNAL, 0); }
		public TerminalNode INVOKER() { return getToken(OpenDistroSqlParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(OpenDistroSqlParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(OpenDistroSqlParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(OpenDistroSqlParser.IPC, 0); }
		public TerminalNode ISOLATION() { return getToken(OpenDistroSqlParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(OpenDistroSqlParser.ISSUER, 0); }
		public TerminalNode JSON() { return getToken(OpenDistroSqlParser.JSON, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(OpenDistroSqlParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LANGUAGE() { return getToken(OpenDistroSqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(OpenDistroSqlParser.LAST, 0); }
		public TerminalNode LEAVES() { return getToken(OpenDistroSqlParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(OpenDistroSqlParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(OpenDistroSqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(OpenDistroSqlParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(OpenDistroSqlParser.LOCAL, 0); }
		public TerminalNode LOGFILE() { return getToken(OpenDistroSqlParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(OpenDistroSqlParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(OpenDistroSqlParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(OpenDistroSqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(OpenDistroSqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(OpenDistroSqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(OpenDistroSqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(OpenDistroSqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(OpenDistroSqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(OpenDistroSqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(OpenDistroSqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(OpenDistroSqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(OpenDistroSqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(OpenDistroSqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(OpenDistroSqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(OpenDistroSqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(OpenDistroSqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(OpenDistroSqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(OpenDistroSqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(OpenDistroSqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(OpenDistroSqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(OpenDistroSqlParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(OpenDistroSqlParser.MASTER_USER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(OpenDistroSqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(OpenDistroSqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX_ROWS() { return getToken(OpenDistroSqlParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(OpenDistroSqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(OpenDistroSqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(OpenDistroSqlParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEDIUM() { return getToken(OpenDistroSqlParser.MEDIUM, 0); }
		public TerminalNode MEMORY() { return getToken(OpenDistroSqlParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(OpenDistroSqlParser.MERGE, 0); }
		public TerminalNode MID() { return getToken(OpenDistroSqlParser.MID, 0); }
		public TerminalNode MIGRATE() { return getToken(OpenDistroSqlParser.MIGRATE, 0); }
		public TerminalNode MIN_ROWS() { return getToken(OpenDistroSqlParser.MIN_ROWS, 0); }
		public TerminalNode MODE() { return getToken(OpenDistroSqlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(OpenDistroSqlParser.MODIFY, 0); }
		public TerminalNode MUTEX() { return getToken(OpenDistroSqlParser.MUTEX, 0); }
		public TerminalNode MYSQL() { return getToken(OpenDistroSqlParser.MYSQL, 0); }
		public TerminalNode NAME() { return getToken(OpenDistroSqlParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(OpenDistroSqlParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(OpenDistroSqlParser.NCHAR, 0); }
		public TerminalNode NEVER() { return getToken(OpenDistroSqlParser.NEVER, 0); }
		public TerminalNode NEXT() { return getToken(OpenDistroSqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(OpenDistroSqlParser.NO, 0); }
		public TerminalNode NODEGROUP() { return getToken(OpenDistroSqlParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(OpenDistroSqlParser.NONE, 0); }
		public TerminalNode OFFLINE() { return getToken(OpenDistroSqlParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(OpenDistroSqlParser.OFFSET, 0); }
		public TerminalNode OJ() { return getToken(OpenDistroSqlParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(OpenDistroSqlParser.OLD_PASSWORD, 0); }
		public TerminalNode ONE() { return getToken(OpenDistroSqlParser.ONE, 0); }
		public TerminalNode ONLINE() { return getToken(OpenDistroSqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(OpenDistroSqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(OpenDistroSqlParser.OPEN, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(OpenDistroSqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode OPTIONS() { return getToken(OpenDistroSqlParser.OPTIONS, 0); }
		public TerminalNode OWNER() { return getToken(OpenDistroSqlParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(OpenDistroSqlParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(OpenDistroSqlParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(OpenDistroSqlParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(OpenDistroSqlParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(OpenDistroSqlParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(OpenDistroSqlParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(OpenDistroSqlParser.PASSWORD, 0); }
		public TerminalNode PHASE() { return getToken(OpenDistroSqlParser.PHASE, 0); }
		public TerminalNode PLUGINS() { return getToken(OpenDistroSqlParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(OpenDistroSqlParser.PLUGIN_DIR, 0); }
		public TerminalNode PLUGIN() { return getToken(OpenDistroSqlParser.PLUGIN, 0); }
		public TerminalNode PORT() { return getToken(OpenDistroSqlParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(OpenDistroSqlParser.PRECEDES, 0); }
		public TerminalNode PREPARE() { return getToken(OpenDistroSqlParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(OpenDistroSqlParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(OpenDistroSqlParser.PREV, 0); }
		public TerminalNode PROCESSLIST() { return getToken(OpenDistroSqlParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(OpenDistroSqlParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(OpenDistroSqlParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(OpenDistroSqlParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(OpenDistroSqlParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(OpenDistroSqlParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(OpenDistroSqlParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(OpenDistroSqlParser.RECOVER, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(OpenDistroSqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(OpenDistroSqlParser.REDUNDANT, 0); }
		public TerminalNode RELAY() { return getToken(OpenDistroSqlParser.RELAY, 0); }
		public TerminalNode RELAYLOG() { return getToken(OpenDistroSqlParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(OpenDistroSqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(OpenDistroSqlParser.RELAY_LOG_POS, 0); }
		public TerminalNode REMOVE() { return getToken(OpenDistroSqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(OpenDistroSqlParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(OpenDistroSqlParser.REPAIR, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(OpenDistroSqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(OpenDistroSqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(OpenDistroSqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(OpenDistroSqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(OpenDistroSqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(OpenDistroSqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(OpenDistroSqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(OpenDistroSqlParser.REPLICATION, 0); }
		public TerminalNode RESET() { return getToken(OpenDistroSqlParser.RESET, 0); }
		public TerminalNode RESUME() { return getToken(OpenDistroSqlParser.RESUME, 0); }
		public TerminalNode RETURNS() { return getToken(OpenDistroSqlParser.RETURNS, 0); }
		public TerminalNode ROLLBACK() { return getToken(OpenDistroSqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(OpenDistroSqlParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(OpenDistroSqlParser.ROTATE, 0); }
		public TerminalNode ROW() { return getToken(OpenDistroSqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(OpenDistroSqlParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(OpenDistroSqlParser.ROW_FORMAT, 0); }
		public TerminalNode SAVEPOINT() { return getToken(OpenDistroSqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(OpenDistroSqlParser.SCHEDULE, 0); }
		public TerminalNode SECURITY() { return getToken(OpenDistroSqlParser.SECURITY, 0); }
		public TerminalNode SERIAL() { return getToken(OpenDistroSqlParser.SERIAL, 0); }
		public TerminalNode SERVER() { return getToken(OpenDistroSqlParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(OpenDistroSqlParser.SESSION, 0); }
		public TerminalNode SHARE() { return getToken(OpenDistroSqlParser.SHARE, 0); }
		public TerminalNode SHARED() { return getToken(OpenDistroSqlParser.SHARED, 0); }
		public TerminalNode SIGNED() { return getToken(OpenDistroSqlParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(OpenDistroSqlParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(OpenDistroSqlParser.SLAVE, 0); }
		public TerminalNode SLOW() { return getToken(OpenDistroSqlParser.SLOW, 0); }
		public TerminalNode SNAPSHOT() { return getToken(OpenDistroSqlParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(OpenDistroSqlParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(OpenDistroSqlParser.SOME, 0); }
		public TerminalNode SONAME() { return getToken(OpenDistroSqlParser.SONAME, 0); }
		public TerminalNode SOUNDS() { return getToken(OpenDistroSqlParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(OpenDistroSqlParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(OpenDistroSqlParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(OpenDistroSqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(OpenDistroSqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(OpenDistroSqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(OpenDistroSqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(OpenDistroSqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(OpenDistroSqlParser.SQL_THREAD, 0); }
		public TerminalNode START() { return getToken(OpenDistroSqlParser.START, 0); }
		public TerminalNode STARTS() { return getToken(OpenDistroSqlParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(OpenDistroSqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(OpenDistroSqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(OpenDistroSqlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(OpenDistroSqlParser.STATUS, 0); }
		public TerminalNode STOP() { return getToken(OpenDistroSqlParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(OpenDistroSqlParser.STORAGE, 0); }
		public TerminalNode STRING() { return getToken(OpenDistroSqlParser.STRING, 0); }
		public TerminalNode SUBJECT() { return getToken(OpenDistroSqlParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(OpenDistroSqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(OpenDistroSqlParser.SUBPARTITIONS, 0); }
		public TerminalNode SUSPEND() { return getToken(OpenDistroSqlParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(OpenDistroSqlParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(OpenDistroSqlParser.SWITCHES, 0); }
		public TerminalNode TABLESPACE() { return getToken(OpenDistroSqlParser.TABLESPACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(OpenDistroSqlParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(OpenDistroSqlParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(OpenDistroSqlParser.THAN, 0); }
		public TerminalNode TRADITIONAL() { return getToken(OpenDistroSqlParser.TRADITIONAL, 0); }
		public TerminalNode TRANSACTION() { return getToken(OpenDistroSqlParser.TRANSACTION, 0); }
		public TerminalNode TRIGGERS() { return getToken(OpenDistroSqlParser.TRIGGERS, 0); }
		public TerminalNode TRUNCATE() { return getToken(OpenDistroSqlParser.TRUNCATE, 0); }
		public TerminalNode UNDEFINED() { return getToken(OpenDistroSqlParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(OpenDistroSqlParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(OpenDistroSqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNINSTALL() { return getToken(OpenDistroSqlParser.UNINSTALL, 0); }
		public TerminalNode UNKNOWN() { return getToken(OpenDistroSqlParser.UNKNOWN, 0); }
		public TerminalNode UNTIL() { return getToken(OpenDistroSqlParser.UNTIL, 0); }
		public TerminalNode UPGRADE() { return getToken(OpenDistroSqlParser.UPGRADE, 0); }
		public TerminalNode USER() { return getToken(OpenDistroSqlParser.USER, 0); }
		public TerminalNode USE_FRM() { return getToken(OpenDistroSqlParser.USE_FRM, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(OpenDistroSqlParser.USER_RESOURCES, 0); }
		public TerminalNode VALIDATION() { return getToken(OpenDistroSqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(OpenDistroSqlParser.VALUE, 0); }
		public TerminalNode VARIABLES() { return getToken(OpenDistroSqlParser.VARIABLES, 0); }
		public TerminalNode VIEW() { return getToken(OpenDistroSqlParser.VIEW, 0); }
		public TerminalNode WAIT() { return getToken(OpenDistroSqlParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(OpenDistroSqlParser.WARNINGS, 0); }
		public TerminalNode WITHOUT() { return getToken(OpenDistroSqlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(OpenDistroSqlParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(OpenDistroSqlParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(OpenDistroSqlParser.X509, 0); }
		public TerminalNode XA() { return getToken(OpenDistroSqlParser.XA, 0); }
		public TerminalNode XML() { return getToken(OpenDistroSqlParser.XML, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterKeywordsCanBeId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitKeywordsCanBeId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitKeywordsCanBeId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6149);
			_la = _input.LA(1);
			if ( !(((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & ((1L << (SERIAL - 205)) | (1L << (ACCOUNT - 205)) | (1L << (ACTION - 205)) | (1L << (AFTER - 205)) | (1L << (AGGREGATE - 205)) | (1L << (ALGORITHM - 205)) | (1L << (ANY - 205)) | (1L << (AT - 205)) | (1L << (AUTHORS - 205)) | (1L << (AUTOCOMMIT - 205)) | (1L << (AUTOEXTEND_SIZE - 205)) | (1L << (AUTO_INCREMENT - 205)) | (1L << (AVG_ROW_LENGTH - 205)) | (1L << (BEGIN - 205)) | (1L << (BINLOG - 205)) | (1L << (BIT - 205)) | (1L << (BLOCK - 205)) | (1L << (BOOL - 205)))) != 0) || ((((_la - 269)) & ~0x3f) == 0 && ((1L << (_la - 269)) & ((1L << (BOOLEAN - 269)) | (1L << (BTREE - 269)) | (1L << (CACHE - 269)) | (1L << (CASCADED - 269)) | (1L << (CHAIN - 269)) | (1L << (CHANGED - 269)) | (1L << (CHANNEL - 269)) | (1L << (CHECKSUM - 269)) | (1L << (PAGE_CHECKSUM - 269)) | (1L << (CIPHER - 269)) | (1L << (CLIENT - 269)) | (1L << (CLOSE - 269)) | (1L << (COALESCE - 269)) | (1L << (CODE - 269)) | (1L << (COLUMNS - 269)) | (1L << (COLUMN_FORMAT - 269)) | (1L << (COMMENT - 269)) | (1L << (COMMIT - 269)) | (1L << (COMPACT - 269)) | (1L << (COMPLETION - 269)) | (1L << (COMPRESSED - 269)) | (1L << (COMPRESSION - 269)) | (1L << (CONCURRENT - 269)) | (1L << (CONNECTION - 269)) | (1L << (CONSISTENT - 269)) | (1L << (CONTAINS - 269)) | (1L << (CONTEXT - 269)) | (1L << (CONTRIBUTORS - 269)) | (1L << (COPY - 269)) | (1L << (CPU - 269)) | (1L << (DATA - 269)) | (1L << (DATAFILE - 269)) | (1L << (DEALLOCATE - 269)) | (1L << (DEFAULT_AUTH - 269)) | (1L << (DEFINER - 269)) | (1L << (DELAY_KEY_WRITE - 269)) | (1L << (DES_KEY_FILE - 269)) | (1L << (DIRECTORY - 269)) | (1L << (DISABLE - 269)) | (1L << (DISCARD - 269)) | (1L << (DISK - 269)) | (1L << (DO - 269)) | (1L << (DUMPFILE - 269)) | (1L << (DUPLICATE - 269)) | (1L << (DYNAMIC - 269)) | (1L << (ENABLE - 269)) | (1L << (ENCRYPTION - 269)) | (1L << (END - 269)) | (1L << (ENDS - 269)) | (1L << (ENGINE - 269)) | (1L << (ENGINES - 269)) | (1L << (ERROR - 269)) | (1L << (ERRORS - 269)) | (1L << (ESCAPE - 269)) | (1L << (EVEN - 269)) | (1L << (EVENT - 269)) | (1L << (EVENTS - 269)) | (1L << (EVERY - 269)) | (1L << (EXCHANGE - 269)) | (1L << (EXCLUSIVE - 269)) | (1L << (EXPIRE - 269)) | (1L << (EXPORT - 269)) | (1L << (EXTENDED - 269)) | (1L << (EXTENT_SIZE - 269)))) != 0) || ((((_la - 333)) & ~0x3f) == 0 && ((1L << (_la - 333)) & ((1L << (FAST - 333)) | (1L << (FAULTS - 333)) | (1L << (FIELDS - 333)) | (1L << (FILE_BLOCK_SIZE - 333)) | (1L << (FILTER - 333)) | (1L << (FIRST - 333)) | (1L << (FIXED - 333)) | (1L << (FLUSH - 333)) | (1L << (FOLLOWS - 333)) | (1L << (FOUND - 333)) | (1L << (FULL - 333)) | (1L << (FUNCTION - 333)) | (1L << (GENERAL - 333)) | (1L << (GLOBAL - 333)) | (1L << (GRANTS - 333)) | (1L << (GROUP_REPLICATION - 333)) | (1L << (HANDLER - 333)) | (1L << (HASH - 333)) | (1L << (HELP - 333)) | (1L << (HOST - 333)) | (1L << (HOSTS - 333)) | (1L << (IDENTIFIED - 333)) | (1L << (IGNORE_SERVER_IDS - 333)) | (1L << (IMPORT - 333)) | (1L << (INDEXES - 333)) | (1L << (INITIAL_SIZE - 333)) | (1L << (INPLACE - 333)) | (1L << (INSERT_METHOD - 333)) | (1L << (INSTALL - 333)) | (1L << (INSTANCE - 333)) | (1L << (INVOKER - 333)) | (1L << (IO - 333)) | (1L << (IO_THREAD - 333)) | (1L << (IPC - 333)) | (1L << (ISOLATION - 333)) | (1L << (ISSUER - 333)) | (1L << (JSON - 333)) | (1L << (KEY_BLOCK_SIZE - 333)) | (1L << (LANGUAGE - 333)) | (1L << (LAST - 333)) | (1L << (LEAVES - 333)) | (1L << (LESS - 333)) | (1L << (LEVEL - 333)) | (1L << (LIST - 333)) | (1L << (LOCAL - 333)) | (1L << (LOGFILE - 333)) | (1L << (LOGS - 333)) | (1L << (MASTER - 333)) | (1L << (MASTER_AUTO_POSITION - 333)) | (1L << (MASTER_CONNECT_RETRY - 333)) | (1L << (MASTER_DELAY - 333)) | (1L << (MASTER_HEARTBEAT_PERIOD - 333)) | (1L << (MASTER_HOST - 333)) | (1L << (MASTER_LOG_FILE - 333)) | (1L << (MASTER_LOG_POS - 333)) | (1L << (MASTER_PASSWORD - 333)) | (1L << (MASTER_PORT - 333)) | (1L << (MASTER_RETRY_COUNT - 333)) | (1L << (MASTER_SSL - 333)) | (1L << (MASTER_SSL_CA - 333)) | (1L << (MASTER_SSL_CAPATH - 333)) | (1L << (MASTER_SSL_CERT - 333)) | (1L << (MASTER_SSL_CIPHER - 333)) | (1L << (MASTER_SSL_CRL - 333)))) != 0) || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (MASTER_SSL_CRLPATH - 397)) | (1L << (MASTER_SSL_KEY - 397)) | (1L << (MASTER_TLS_VERSION - 397)) | (1L << (MASTER_USER - 397)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 397)) | (1L << (MAX_QUERIES_PER_HOUR - 397)) | (1L << (MAX_ROWS - 397)) | (1L << (MAX_SIZE - 397)) | (1L << (MAX_UPDATES_PER_HOUR - 397)) | (1L << (MAX_USER_CONNECTIONS - 397)) | (1L << (MEDIUM - 397)) | (1L << (MERGE - 397)) | (1L << (MID - 397)) | (1L << (MIGRATE - 397)) | (1L << (MIN_ROWS - 397)) | (1L << (MODE - 397)) | (1L << (MODIFY - 397)) | (1L << (MUTEX - 397)) | (1L << (MYSQL - 397)) | (1L << (NAME - 397)) | (1L << (NAMES - 397)) | (1L << (NCHAR - 397)) | (1L << (NEVER - 397)) | (1L << (NEXT - 397)) | (1L << (NO - 397)) | (1L << (NODEGROUP - 397)) | (1L << (NONE - 397)) | (1L << (OFFLINE - 397)) | (1L << (OFFSET - 397)) | (1L << (OJ - 397)) | (1L << (OLD_PASSWORD - 397)) | (1L << (ONE - 397)) | (1L << (ONLINE - 397)) | (1L << (ONLY - 397)) | (1L << (OPEN - 397)) | (1L << (OPTIMIZER_COSTS - 397)) | (1L << (OPTIONS - 397)) | (1L << (OWNER - 397)) | (1L << (PACK_KEYS - 397)) | (1L << (PAGE - 397)) | (1L << (PARSER - 397)) | (1L << (PARTIAL - 397)) | (1L << (PARTITIONING - 397)) | (1L << (PARTITIONS - 397)) | (1L << (PASSWORD - 397)) | (1L << (PHASE - 397)) | (1L << (PLUGIN - 397)) | (1L << (PLUGIN_DIR - 397)) | (1L << (PLUGINS - 397)) | (1L << (PORT - 397)) | (1L << (PRECEDES - 397)) | (1L << (PREPARE - 397)) | (1L << (PRESERVE - 397)) | (1L << (PREV - 397)) | (1L << (PROCESSLIST - 397)) | (1L << (PROFILE - 397)) | (1L << (PROFILES - 397)) | (1L << (PROXY - 397)) | (1L << (QUERY - 397)) | (1L << (QUICK - 397)) | (1L << (REBUILD - 397)) | (1L << (RECOVER - 397)) | (1L << (REDO_BUFFER_SIZE - 397)) | (1L << (REDUNDANT - 397)))) != 0) || ((((_la - 461)) & ~0x3f) == 0 && ((1L << (_la - 461)) & ((1L << (RELAY - 461)) | (1L << (RELAY_LOG_FILE - 461)) | (1L << (RELAY_LOG_POS - 461)) | (1L << (RELAYLOG - 461)) | (1L << (REMOVE - 461)) | (1L << (REORGANIZE - 461)) | (1L << (REPAIR - 461)) | (1L << (REPLICATE_DO_DB - 461)) | (1L << (REPLICATE_DO_TABLE - 461)) | (1L << (REPLICATE_IGNORE_DB - 461)) | (1L << (REPLICATE_IGNORE_TABLE - 461)) | (1L << (REPLICATE_REWRITE_DB - 461)) | (1L << (REPLICATE_WILD_DO_TABLE - 461)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 461)) | (1L << (REPLICATION - 461)) | (1L << (RESET - 461)) | (1L << (RESUME - 461)) | (1L << (RETURNS - 461)) | (1L << (ROLLBACK - 461)) | (1L << (ROLLUP - 461)) | (1L << (ROTATE - 461)) | (1L << (ROW - 461)) | (1L << (ROWS - 461)) | (1L << (ROW_FORMAT - 461)) | (1L << (SAVEPOINT - 461)) | (1L << (SCHEDULE - 461)) | (1L << (SECURITY - 461)) | (1L << (SERVER - 461)) | (1L << (SESSION - 461)) | (1L << (SHARE - 461)) | (1L << (SHARED - 461)) | (1L << (SIGNED - 461)) | (1L << (SIMPLE - 461)) | (1L << (SLAVE - 461)) | (1L << (SLOW - 461)) | (1L << (SNAPSHOT - 461)) | (1L << (SOCKET - 461)) | (1L << (SOME - 461)) | (1L << (SONAME - 461)) | (1L << (SOUNDS - 461)) | (1L << (SOURCE - 461)) | (1L << (SQL_AFTER_GTIDS - 461)) | (1L << (SQL_AFTER_MTS_GAPS - 461)) | (1L << (SQL_BEFORE_GTIDS - 461)) | (1L << (SQL_BUFFER_RESULT - 461)) | (1L << (SQL_CACHE - 461)) | (1L << (SQL_NO_CACHE - 461)) | (1L << (SQL_THREAD - 461)) | (1L << (START - 461)) | (1L << (STARTS - 461)) | (1L << (STATS_AUTO_RECALC - 461)) | (1L << (STATS_PERSISTENT - 461)) | (1L << (STATS_SAMPLE_PAGES - 461)) | (1L << (STATUS - 461)) | (1L << (STOP - 461)) | (1L << (STORAGE - 461)) | (1L << (STRING - 461)) | (1L << (SUBJECT - 461)) | (1L << (SUBPARTITION - 461)) | (1L << (SUBPARTITIONS - 461)) | (1L << (SUSPEND - 461)) | (1L << (SWAPS - 461)) | (1L << (SWITCHES - 461)))) != 0) || ((((_la - 525)) & ~0x3f) == 0 && ((1L << (_la - 525)) & ((1L << (TABLESPACE - 525)) | (1L << (TEMPORARY - 525)) | (1L << (TEMPTABLE - 525)) | (1L << (THAN - 525)) | (1L << (TRADITIONAL - 525)) | (1L << (TRANSACTION - 525)) | (1L << (TRIGGERS - 525)) | (1L << (TRUNCATE - 525)) | (1L << (UNDEFINED - 525)) | (1L << (UNDOFILE - 525)) | (1L << (UNDO_BUFFER_SIZE - 525)) | (1L << (UNINSTALL - 525)) | (1L << (UNKNOWN - 525)) | (1L << (UNTIL - 525)) | (1L << (UPGRADE - 525)) | (1L << (USER - 525)) | (1L << (USE_FRM - 525)) | (1L << (USER_RESOURCES - 525)) | (1L << (VALIDATION - 525)) | (1L << (VALUE - 525)) | (1L << (VARIABLES - 525)) | (1L << (VIEW - 525)) | (1L << (WAIT - 525)) | (1L << (WARNINGS - 525)) | (1L << (WITHOUT - 525)) | (1L << (WORK - 525)) | (1L << (WRAPPER - 525)) | (1L << (X509 - 525)) | (1L << (XA - 525)) | (1L << (XML - 525)) | (1L << (INTERNAL - 525)))) != 0) || _la==MEMORY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameBaseContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(OpenDistroSqlParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(OpenDistroSqlParser.ACOS, 0); }
		public TerminalNode ADDDATE() { return getToken(OpenDistroSqlParser.ADDDATE, 0); }
		public TerminalNode ADDTIME() { return getToken(OpenDistroSqlParser.ADDTIME, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(OpenDistroSqlParser.AES_DECRYPT, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(OpenDistroSqlParser.AES_ENCRYPT, 0); }
		public TerminalNode AREA() { return getToken(OpenDistroSqlParser.AREA, 0); }
		public TerminalNode ASBINARY() { return getToken(OpenDistroSqlParser.ASBINARY, 0); }
		public TerminalNode ASIN() { return getToken(OpenDistroSqlParser.ASIN, 0); }
		public TerminalNode ASTEXT() { return getToken(OpenDistroSqlParser.ASTEXT, 0); }
		public TerminalNode ASWKB() { return getToken(OpenDistroSqlParser.ASWKB, 0); }
		public TerminalNode ASWKT() { return getToken(OpenDistroSqlParser.ASWKT, 0); }
		public TerminalNode ASYMMETRIC_DECRYPT() { return getToken(OpenDistroSqlParser.ASYMMETRIC_DECRYPT, 0); }
		public TerminalNode ASYMMETRIC_DERIVE() { return getToken(OpenDistroSqlParser.ASYMMETRIC_DERIVE, 0); }
		public TerminalNode ASYMMETRIC_ENCRYPT() { return getToken(OpenDistroSqlParser.ASYMMETRIC_ENCRYPT, 0); }
		public TerminalNode ASYMMETRIC_SIGN() { return getToken(OpenDistroSqlParser.ASYMMETRIC_SIGN, 0); }
		public TerminalNode ASYMMETRIC_VERIFY() { return getToken(OpenDistroSqlParser.ASYMMETRIC_VERIFY, 0); }
		public TerminalNode ATAN() { return getToken(OpenDistroSqlParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(OpenDistroSqlParser.ATAN2, 0); }
		public TerminalNode BENCHMARK() { return getToken(OpenDistroSqlParser.BENCHMARK, 0); }
		public TerminalNode BIN() { return getToken(OpenDistroSqlParser.BIN, 0); }
		public TerminalNode BIT_COUNT() { return getToken(OpenDistroSqlParser.BIT_COUNT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(OpenDistroSqlParser.BIT_LENGTH, 0); }
		public TerminalNode BUFFER() { return getToken(OpenDistroSqlParser.BUFFER, 0); }
		public TerminalNode CEIL() { return getToken(OpenDistroSqlParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(OpenDistroSqlParser.CEILING, 0); }
		public TerminalNode CENTROID() { return getToken(OpenDistroSqlParser.CENTROID, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(OpenDistroSqlParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARSET() { return getToken(OpenDistroSqlParser.CHARSET, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(OpenDistroSqlParser.CHAR_LENGTH, 0); }
		public TerminalNode COERCIBILITY() { return getToken(OpenDistroSqlParser.COERCIBILITY, 0); }
		public TerminalNode COLLATION() { return getToken(OpenDistroSqlParser.COLLATION, 0); }
		public TerminalNode COMPRESS() { return getToken(OpenDistroSqlParser.COMPRESS, 0); }
		public TerminalNode CONCAT() { return getToken(OpenDistroSqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(OpenDistroSqlParser.CONCAT_WS, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(OpenDistroSqlParser.CONNECTION_ID, 0); }
		public TerminalNode CONV() { return getToken(OpenDistroSqlParser.CONV, 0); }
		public TerminalNode CONVERT_TZ() { return getToken(OpenDistroSqlParser.CONVERT_TZ, 0); }
		public TerminalNode COS() { return getToken(OpenDistroSqlParser.COS, 0); }
		public TerminalNode COT() { return getToken(OpenDistroSqlParser.COT, 0); }
		public TerminalNode COUNT() { return getToken(OpenDistroSqlParser.COUNT, 0); }
		public TerminalNode CRC32() { return getToken(OpenDistroSqlParser.CRC32, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return getToken(OpenDistroSqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return getToken(OpenDistroSqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public TerminalNode CREATE_DH_PARAMETERS() { return getToken(OpenDistroSqlParser.CREATE_DH_PARAMETERS, 0); }
		public TerminalNode CREATE_DIGEST() { return getToken(OpenDistroSqlParser.CREATE_DIGEST, 0); }
		public TerminalNode CROSSES() { return getToken(OpenDistroSqlParser.CROSSES, 0); }
		public TerminalNode DATABASE() { return getToken(OpenDistroSqlParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(OpenDistroSqlParser.DATE, 0); }
		public TerminalNode DATEDIFF() { return getToken(OpenDistroSqlParser.DATEDIFF, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(OpenDistroSqlParser.DATE_FORMAT, 0); }
		public TerminalNode DAY() { return getToken(OpenDistroSqlParser.DAY, 0); }
		public TerminalNode DAYNAME() { return getToken(OpenDistroSqlParser.DAYNAME, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(OpenDistroSqlParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(OpenDistroSqlParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(OpenDistroSqlParser.DAYOFYEAR, 0); }
		public TerminalNode DECODE() { return getToken(OpenDistroSqlParser.DECODE, 0); }
		public TerminalNode DEGREES() { return getToken(OpenDistroSqlParser.DEGREES, 0); }
		public TerminalNode DES_DECRYPT() { return getToken(OpenDistroSqlParser.DES_DECRYPT, 0); }
		public TerminalNode DES_ENCRYPT() { return getToken(OpenDistroSqlParser.DES_ENCRYPT, 0); }
		public TerminalNode DIMENSION() { return getToken(OpenDistroSqlParser.DIMENSION, 0); }
		public TerminalNode DISJOINT() { return getToken(OpenDistroSqlParser.DISJOINT, 0); }
		public TerminalNode ELT() { return getToken(OpenDistroSqlParser.ELT, 0); }
		public TerminalNode ENCODE() { return getToken(OpenDistroSqlParser.ENCODE, 0); }
		public TerminalNode ENCRYPT() { return getToken(OpenDistroSqlParser.ENCRYPT, 0); }
		public TerminalNode ENDPOINT() { return getToken(OpenDistroSqlParser.ENDPOINT, 0); }
		public TerminalNode ENVELOPE() { return getToken(OpenDistroSqlParser.ENVELOPE, 0); }
		public TerminalNode EQUALS() { return getToken(OpenDistroSqlParser.EQUALS, 0); }
		public TerminalNode EXP() { return getToken(OpenDistroSqlParser.EXP, 0); }
		public TerminalNode EXPORT_SET() { return getToken(OpenDistroSqlParser.EXPORT_SET, 0); }
		public TerminalNode EXTERIORRING() { return getToken(OpenDistroSqlParser.EXTERIORRING, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(OpenDistroSqlParser.EXTRACTVALUE, 0); }
		public TerminalNode FIELD() { return getToken(OpenDistroSqlParser.FIELD, 0); }
		public TerminalNode FIND_IN_SET() { return getToken(OpenDistroSqlParser.FIND_IN_SET, 0); }
		public TerminalNode FLOOR() { return getToken(OpenDistroSqlParser.FLOOR, 0); }
		public TerminalNode FORMAT() { return getToken(OpenDistroSqlParser.FORMAT, 0); }
		public TerminalNode FOUND_ROWS() { return getToken(OpenDistroSqlParser.FOUND_ROWS, 0); }
		public TerminalNode FROM_BASE64() { return getToken(OpenDistroSqlParser.FROM_BASE64, 0); }
		public TerminalNode FROM_DAYS() { return getToken(OpenDistroSqlParser.FROM_DAYS, 0); }
		public TerminalNode FROM_UNIXTIME() { return getToken(OpenDistroSqlParser.FROM_UNIXTIME, 0); }
		public TerminalNode GEOMCOLLFROMTEXT() { return getToken(OpenDistroSqlParser.GEOMCOLLFROMTEXT, 0); }
		public TerminalNode GEOMCOLLFROMWKB() { return getToken(OpenDistroSqlParser.GEOMCOLLFROMWKB, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(OpenDistroSqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return getToken(OpenDistroSqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMWKB() { return getToken(OpenDistroSqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode GEOMETRYFROMTEXT() { return getToken(OpenDistroSqlParser.GEOMETRYFROMTEXT, 0); }
		public TerminalNode GEOMETRYFROMWKB() { return getToken(OpenDistroSqlParser.GEOMETRYFROMWKB, 0); }
		public TerminalNode GEOMETRYN() { return getToken(OpenDistroSqlParser.GEOMETRYN, 0); }
		public TerminalNode GEOMETRYTYPE() { return getToken(OpenDistroSqlParser.GEOMETRYTYPE, 0); }
		public TerminalNode GEOMFROMTEXT() { return getToken(OpenDistroSqlParser.GEOMFROMTEXT, 0); }
		public TerminalNode GEOMFROMWKB() { return getToken(OpenDistroSqlParser.GEOMFROMWKB, 0); }
		public TerminalNode GET_FORMAT() { return getToken(OpenDistroSqlParser.GET_FORMAT, 0); }
		public TerminalNode GET_LOCK() { return getToken(OpenDistroSqlParser.GET_LOCK, 0); }
		public TerminalNode GLENGTH() { return getToken(OpenDistroSqlParser.GLENGTH, 0); }
		public TerminalNode GREATEST() { return getToken(OpenDistroSqlParser.GREATEST, 0); }
		public TerminalNode GTID_SUBSET() { return getToken(OpenDistroSqlParser.GTID_SUBSET, 0); }
		public TerminalNode GTID_SUBTRACT() { return getToken(OpenDistroSqlParser.GTID_SUBTRACT, 0); }
		public TerminalNode HEX() { return getToken(OpenDistroSqlParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(OpenDistroSqlParser.HOUR, 0); }
		public TerminalNode IFNULL() { return getToken(OpenDistroSqlParser.IFNULL, 0); }
		public TerminalNode INET6_ATON() { return getToken(OpenDistroSqlParser.INET6_ATON, 0); }
		public TerminalNode INET6_NTOA() { return getToken(OpenDistroSqlParser.INET6_NTOA, 0); }
		public TerminalNode INET_ATON() { return getToken(OpenDistroSqlParser.INET_ATON, 0); }
		public TerminalNode INET_NTOA() { return getToken(OpenDistroSqlParser.INET_NTOA, 0); }
		public TerminalNode INSTR() { return getToken(OpenDistroSqlParser.INSTR, 0); }
		public TerminalNode INTERIORRINGN() { return getToken(OpenDistroSqlParser.INTERIORRINGN, 0); }
		public TerminalNode INTERSECTS() { return getToken(OpenDistroSqlParser.INTERSECTS, 0); }
		public TerminalNode ISCLOSED() { return getToken(OpenDistroSqlParser.ISCLOSED, 0); }
		public TerminalNode ISEMPTY() { return getToken(OpenDistroSqlParser.ISEMPTY, 0); }
		public TerminalNode ISNULL() { return getToken(OpenDistroSqlParser.ISNULL, 0); }
		public TerminalNode ISSIMPLE() { return getToken(OpenDistroSqlParser.ISSIMPLE, 0); }
		public TerminalNode IS_FREE_LOCK() { return getToken(OpenDistroSqlParser.IS_FREE_LOCK, 0); }
		public TerminalNode IS_IPV4() { return getToken(OpenDistroSqlParser.IS_IPV4, 0); }
		public TerminalNode IS_IPV4_COMPAT() { return getToken(OpenDistroSqlParser.IS_IPV4_COMPAT, 0); }
		public TerminalNode IS_IPV4_MAPPED() { return getToken(OpenDistroSqlParser.IS_IPV4_MAPPED, 0); }
		public TerminalNode IS_IPV6() { return getToken(OpenDistroSqlParser.IS_IPV6, 0); }
		public TerminalNode IS_USED_LOCK() { return getToken(OpenDistroSqlParser.IS_USED_LOCK, 0); }
		public TerminalNode LAST_INSERT_ID() { return getToken(OpenDistroSqlParser.LAST_INSERT_ID, 0); }
		public TerminalNode LCASE() { return getToken(OpenDistroSqlParser.LCASE, 0); }
		public TerminalNode LEAST() { return getToken(OpenDistroSqlParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(OpenDistroSqlParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(OpenDistroSqlParser.LENGTH, 0); }
		public TerminalNode LINEFROMTEXT() { return getToken(OpenDistroSqlParser.LINEFROMTEXT, 0); }
		public TerminalNode LINEFROMWKB() { return getToken(OpenDistroSqlParser.LINEFROMWKB, 0); }
		public TerminalNode LINESTRING() { return getToken(OpenDistroSqlParser.LINESTRING, 0); }
		public TerminalNode LINESTRINGFROMTEXT() { return getToken(OpenDistroSqlParser.LINESTRINGFROMTEXT, 0); }
		public TerminalNode LINESTRINGFROMWKB() { return getToken(OpenDistroSqlParser.LINESTRINGFROMWKB, 0); }
		public TerminalNode LN() { return getToken(OpenDistroSqlParser.LN, 0); }
		public TerminalNode LOAD_FILE() { return getToken(OpenDistroSqlParser.LOAD_FILE, 0); }
		public TerminalNode LOCATE() { return getToken(OpenDistroSqlParser.LOCATE, 0); }
		public TerminalNode LOG() { return getToken(OpenDistroSqlParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(OpenDistroSqlParser.LOG10, 0); }
		public TerminalNode LOG2() { return getToken(OpenDistroSqlParser.LOG2, 0); }
		public TerminalNode LOWER() { return getToken(OpenDistroSqlParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(OpenDistroSqlParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(OpenDistroSqlParser.LTRIM, 0); }
		public TerminalNode MAKEDATE() { return getToken(OpenDistroSqlParser.MAKEDATE, 0); }
		public TerminalNode MAKETIME() { return getToken(OpenDistroSqlParser.MAKETIME, 0); }
		public TerminalNode MAKE_SET() { return getToken(OpenDistroSqlParser.MAKE_SET, 0); }
		public TerminalNode MASTER_POS_WAIT() { return getToken(OpenDistroSqlParser.MASTER_POS_WAIT, 0); }
		public TerminalNode MBRCONTAINS() { return getToken(OpenDistroSqlParser.MBRCONTAINS, 0); }
		public TerminalNode MBRDISJOINT() { return getToken(OpenDistroSqlParser.MBRDISJOINT, 0); }
		public TerminalNode MBREQUAL() { return getToken(OpenDistroSqlParser.MBREQUAL, 0); }
		public TerminalNode MBRINTERSECTS() { return getToken(OpenDistroSqlParser.MBRINTERSECTS, 0); }
		public TerminalNode MBROVERLAPS() { return getToken(OpenDistroSqlParser.MBROVERLAPS, 0); }
		public TerminalNode MBRTOUCHES() { return getToken(OpenDistroSqlParser.MBRTOUCHES, 0); }
		public TerminalNode MBRWITHIN() { return getToken(OpenDistroSqlParser.MBRWITHIN, 0); }
		public TerminalNode MD5() { return getToken(OpenDistroSqlParser.MD5, 0); }
		public TerminalNode MICROSECOND() { return getToken(OpenDistroSqlParser.MICROSECOND, 0); }
		public TerminalNode MINUTE() { return getToken(OpenDistroSqlParser.MINUTE, 0); }
		public TerminalNode MLINEFROMTEXT() { return getToken(OpenDistroSqlParser.MLINEFROMTEXT, 0); }
		public TerminalNode MLINEFROMWKB() { return getToken(OpenDistroSqlParser.MLINEFROMWKB, 0); }
		public TerminalNode MONTH() { return getToken(OpenDistroSqlParser.MONTH, 0); }
		public TerminalNode MONTHNAME() { return getToken(OpenDistroSqlParser.MONTHNAME, 0); }
		public TerminalNode MPOINTFROMTEXT() { return getToken(OpenDistroSqlParser.MPOINTFROMTEXT, 0); }
		public TerminalNode MPOINTFROMWKB() { return getToken(OpenDistroSqlParser.MPOINTFROMWKB, 0); }
		public TerminalNode MPOLYFROMTEXT() { return getToken(OpenDistroSqlParser.MPOLYFROMTEXT, 0); }
		public TerminalNode MPOLYFROMWKB() { return getToken(OpenDistroSqlParser.MPOLYFROMWKB, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(OpenDistroSqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTILINESTRINGFROMTEXT() { return getToken(OpenDistroSqlParser.MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode MULTILINESTRINGFROMWKB() { return getToken(OpenDistroSqlParser.MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode MULTIPOINT() { return getToken(OpenDistroSqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOINTFROMTEXT() { return getToken(OpenDistroSqlParser.MULTIPOINTFROMTEXT, 0); }
		public TerminalNode MULTIPOINTFROMWKB() { return getToken(OpenDistroSqlParser.MULTIPOINTFROMWKB, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(OpenDistroSqlParser.MULTIPOLYGON, 0); }
		public TerminalNode MULTIPOLYGONFROMTEXT() { return getToken(OpenDistroSqlParser.MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode MULTIPOLYGONFROMWKB() { return getToken(OpenDistroSqlParser.MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode NAME_CONST() { return getToken(OpenDistroSqlParser.NAME_CONST, 0); }
		public TerminalNode NULLIF() { return getToken(OpenDistroSqlParser.NULLIF, 0); }
		public TerminalNode NUMGEOMETRIES() { return getToken(OpenDistroSqlParser.NUMGEOMETRIES, 0); }
		public TerminalNode NUMINTERIORRINGS() { return getToken(OpenDistroSqlParser.NUMINTERIORRINGS, 0); }
		public TerminalNode NUMPOINTS() { return getToken(OpenDistroSqlParser.NUMPOINTS, 0); }
		public TerminalNode OCT() { return getToken(OpenDistroSqlParser.OCT, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(OpenDistroSqlParser.OCTET_LENGTH, 0); }
		public TerminalNode ORD() { return getToken(OpenDistroSqlParser.ORD, 0); }
		public TerminalNode OVERLAPS() { return getToken(OpenDistroSqlParser.OVERLAPS, 0); }
		public TerminalNode PERIOD_ADD() { return getToken(OpenDistroSqlParser.PERIOD_ADD, 0); }
		public TerminalNode PERIOD_DIFF() { return getToken(OpenDistroSqlParser.PERIOD_DIFF, 0); }
		public TerminalNode PI() { return getToken(OpenDistroSqlParser.PI, 0); }
		public TerminalNode POINT() { return getToken(OpenDistroSqlParser.POINT, 0); }
		public TerminalNode POINTFROMTEXT() { return getToken(OpenDistroSqlParser.POINTFROMTEXT, 0); }
		public TerminalNode POINTFROMWKB() { return getToken(OpenDistroSqlParser.POINTFROMWKB, 0); }
		public TerminalNode POINTN() { return getToken(OpenDistroSqlParser.POINTN, 0); }
		public TerminalNode POLYFROMTEXT() { return getToken(OpenDistroSqlParser.POLYFROMTEXT, 0); }
		public TerminalNode POLYFROMWKB() { return getToken(OpenDistroSqlParser.POLYFROMWKB, 0); }
		public TerminalNode POLYGON() { return getToken(OpenDistroSqlParser.POLYGON, 0); }
		public TerminalNode POLYGONFROMTEXT() { return getToken(OpenDistroSqlParser.POLYGONFROMTEXT, 0); }
		public TerminalNode POLYGONFROMWKB() { return getToken(OpenDistroSqlParser.POLYGONFROMWKB, 0); }
		public TerminalNode POSITION() { return getToken(OpenDistroSqlParser.POSITION, 0); }
		public TerminalNode POW() { return getToken(OpenDistroSqlParser.POW, 0); }
		public TerminalNode POWER() { return getToken(OpenDistroSqlParser.POWER, 0); }
		public TerminalNode QUARTER() { return getToken(OpenDistroSqlParser.QUARTER, 0); }
		public TerminalNode QUOTE() { return getToken(OpenDistroSqlParser.QUOTE, 0); }
		public TerminalNode RADIANS() { return getToken(OpenDistroSqlParser.RADIANS, 0); }
		public TerminalNode RAND() { return getToken(OpenDistroSqlParser.RAND, 0); }
		public TerminalNode RANDOM_BYTES() { return getToken(OpenDistroSqlParser.RANDOM_BYTES, 0); }
		public TerminalNode RELEASE_LOCK() { return getToken(OpenDistroSqlParser.RELEASE_LOCK, 0); }
		public TerminalNode REVERSE() { return getToken(OpenDistroSqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(OpenDistroSqlParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(OpenDistroSqlParser.ROUND, 0); }
		public TerminalNode ROW_COUNT() { return getToken(OpenDistroSqlParser.ROW_COUNT, 0); }
		public TerminalNode RPAD() { return getToken(OpenDistroSqlParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(OpenDistroSqlParser.RTRIM, 0); }
		public TerminalNode SECOND() { return getToken(OpenDistroSqlParser.SECOND, 0); }
		public TerminalNode SEC_TO_TIME() { return getToken(OpenDistroSqlParser.SEC_TO_TIME, 0); }
		public TerminalNode SESSION_USER() { return getToken(OpenDistroSqlParser.SESSION_USER, 0); }
		public TerminalNode SHA() { return getToken(OpenDistroSqlParser.SHA, 0); }
		public TerminalNode SHA1() { return getToken(OpenDistroSqlParser.SHA1, 0); }
		public TerminalNode SHA2() { return getToken(OpenDistroSqlParser.SHA2, 0); }
		public TerminalNode SIGN() { return getToken(OpenDistroSqlParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(OpenDistroSqlParser.SIN, 0); }
		public TerminalNode SLEEP() { return getToken(OpenDistroSqlParser.SLEEP, 0); }
		public TerminalNode SOUNDEX() { return getToken(OpenDistroSqlParser.SOUNDEX, 0); }
		public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return getToken(OpenDistroSqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public TerminalNode SQRT() { return getToken(OpenDistroSqlParser.SQRT, 0); }
		public TerminalNode SRID() { return getToken(OpenDistroSqlParser.SRID, 0); }
		public TerminalNode STARTPOINT() { return getToken(OpenDistroSqlParser.STARTPOINT, 0); }
		public TerminalNode STRCMP() { return getToken(OpenDistroSqlParser.STRCMP, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(OpenDistroSqlParser.STR_TO_DATE, 0); }
		public TerminalNode ST_AREA() { return getToken(OpenDistroSqlParser.ST_AREA, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(OpenDistroSqlParser.ST_ASBINARY, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(OpenDistroSqlParser.ST_ASTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(OpenDistroSqlParser.ST_ASWKB, 0); }
		public TerminalNode ST_ASWKT() { return getToken(OpenDistroSqlParser.ST_ASWKT, 0); }
		public TerminalNode ST_BUFFER() { return getToken(OpenDistroSqlParser.ST_BUFFER, 0); }
		public TerminalNode ST_CENTROID() { return getToken(OpenDistroSqlParser.ST_CENTROID, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(OpenDistroSqlParser.ST_CONTAINS, 0); }
		public TerminalNode ST_CROSSES() { return getToken(OpenDistroSqlParser.ST_CROSSES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(OpenDistroSqlParser.ST_DIFFERENCE, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(OpenDistroSqlParser.ST_DIMENSION, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(OpenDistroSqlParser.ST_DISJOINT, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(OpenDistroSqlParser.ST_DISTANCE, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(OpenDistroSqlParser.ST_ENDPOINT, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(OpenDistroSqlParser.ST_ENVELOPE, 0); }
		public TerminalNode ST_EQUALS() { return getToken(OpenDistroSqlParser.ST_EQUALS, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(OpenDistroSqlParser.ST_EXTERIORRING, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(OpenDistroSqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(OpenDistroSqlParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(OpenDistroSqlParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(OpenDistroSqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(OpenDistroSqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(OpenDistroSqlParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(OpenDistroSqlParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(OpenDistroSqlParser.ST_GEOMETRYN, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(OpenDistroSqlParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(OpenDistroSqlParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(OpenDistroSqlParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(OpenDistroSqlParser.ST_INTERIORRINGN, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(OpenDistroSqlParser.ST_INTERSECTION, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(OpenDistroSqlParser.ST_INTERSECTS, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(OpenDistroSqlParser.ST_ISCLOSED, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(OpenDistroSqlParser.ST_ISEMPTY, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(OpenDistroSqlParser.ST_ISSIMPLE, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(OpenDistroSqlParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(OpenDistroSqlParser.ST_LINEFROMWKB, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(OpenDistroSqlParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(OpenDistroSqlParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(OpenDistroSqlParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(OpenDistroSqlParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(OpenDistroSqlParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(OpenDistroSqlParser.ST_NUMPOINTS, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(OpenDistroSqlParser.ST_OVERLAPS, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(OpenDistroSqlParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(OpenDistroSqlParser.ST_POINTFROMWKB, 0); }
		public TerminalNode ST_POINTN() { return getToken(OpenDistroSqlParser.ST_POINTN, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(OpenDistroSqlParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(OpenDistroSqlParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(OpenDistroSqlParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(OpenDistroSqlParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode ST_SRID() { return getToken(OpenDistroSqlParser.ST_SRID, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(OpenDistroSqlParser.ST_STARTPOINT, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(OpenDistroSqlParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(OpenDistroSqlParser.ST_TOUCHES, 0); }
		public TerminalNode ST_UNION() { return getToken(OpenDistroSqlParser.ST_UNION, 0); }
		public TerminalNode ST_WITHIN() { return getToken(OpenDistroSqlParser.ST_WITHIN, 0); }
		public TerminalNode ST_X() { return getToken(OpenDistroSqlParser.ST_X, 0); }
		public TerminalNode ST_Y() { return getToken(OpenDistroSqlParser.ST_Y, 0); }
		public TerminalNode SUBDATE() { return getToken(OpenDistroSqlParser.SUBDATE, 0); }
		public TerminalNode SUBSTRING_INDEX() { return getToken(OpenDistroSqlParser.SUBSTRING_INDEX, 0); }
		public TerminalNode SUBTIME() { return getToken(OpenDistroSqlParser.SUBTIME, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(OpenDistroSqlParser.SYSTEM_USER, 0); }
		public TerminalNode TAN() { return getToken(OpenDistroSqlParser.TAN, 0); }
		public TerminalNode TIME() { return getToken(OpenDistroSqlParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(OpenDistroSqlParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(OpenDistroSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(OpenDistroSqlParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(OpenDistroSqlParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(OpenDistroSqlParser.TIME_FORMAT, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(OpenDistroSqlParser.TIME_TO_SEC, 0); }
		public TerminalNode TOUCHES() { return getToken(OpenDistroSqlParser.TOUCHES, 0); }
		public TerminalNode TO_BASE64() { return getToken(OpenDistroSqlParser.TO_BASE64, 0); }
		public TerminalNode TO_DAYS() { return getToken(OpenDistroSqlParser.TO_DAYS, 0); }
		public TerminalNode TO_SECONDS() { return getToken(OpenDistroSqlParser.TO_SECONDS, 0); }
		public TerminalNode UCASE() { return getToken(OpenDistroSqlParser.UCASE, 0); }
		public TerminalNode UNCOMPRESS() { return getToken(OpenDistroSqlParser.UNCOMPRESS, 0); }
		public TerminalNode UNCOMPRESSED_LENGTH() { return getToken(OpenDistroSqlParser.UNCOMPRESSED_LENGTH, 0); }
		public TerminalNode UNHEX() { return getToken(OpenDistroSqlParser.UNHEX, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(OpenDistroSqlParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode UPDATEXML() { return getToken(OpenDistroSqlParser.UPDATEXML, 0); }
		public TerminalNode UPPER() { return getToken(OpenDistroSqlParser.UPPER, 0); }
		public TerminalNode UUID() { return getToken(OpenDistroSqlParser.UUID, 0); }
		public TerminalNode UUID_SHORT() { return getToken(OpenDistroSqlParser.UUID_SHORT, 0); }
		public TerminalNode VALIDATE_PASSWORD_STRENGTH() { return getToken(OpenDistroSqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public TerminalNode VERSION() { return getToken(OpenDistroSqlParser.VERSION, 0); }
		public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return getToken(OpenDistroSqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public TerminalNode WEEK() { return getToken(OpenDistroSqlParser.WEEK, 0); }
		public TerminalNode WEEKDAY() { return getToken(OpenDistroSqlParser.WEEKDAY, 0); }
		public TerminalNode WEEKOFYEAR() { return getToken(OpenDistroSqlParser.WEEKOFYEAR, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(OpenDistroSqlParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHIN() { return getToken(OpenDistroSqlParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(OpenDistroSqlParser.YEAR, 0); }
		public TerminalNode YEARWEEK() { return getToken(OpenDistroSqlParser.YEARWEEK, 0); }
		public TerminalNode Y_FUNCTION() { return getToken(OpenDistroSqlParser.Y_FUNCTION, 0); }
		public TerminalNode X_FUNCTION() { return getToken(OpenDistroSqlParser.X_FUNCTION, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).enterFunctionNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof OpenDistroSqlParserListener ) ((OpenDistroSqlParserListener)listener).exitFunctionNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof OpenDistroSqlParserVisitor ) return ((OpenDistroSqlParserVisitor<? extends T>)visitor).visitFunctionNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameBaseContext functionNameBase() throws RecognitionException {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_functionNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6151);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==LEFT || _la==RIGHT || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (DATE - 184)) | (1L << (TIME - 184)) | (1L << (TIMESTAMP - 184)) | (1L << (YEAR - 184)) | (1L << (COUNT - 184)) | (1L << (POSITION - 184)))) != 0) || ((((_la - 561)) & ~0x3f) == 0 && ((1L << (_la - 561)) & ((1L << (QUARTER - 561)) | (1L << (MONTH - 561)) | (1L << (DAY - 561)) | (1L << (HOUR - 561)) | (1L << (MINUTE - 561)) | (1L << (WEEK - 561)) | (1L << (SECOND - 561)) | (1L << (MICROSECOND - 561)))) != 0) || ((((_la - 634)) & ~0x3f) == 0 && ((1L << (_la - 634)) & ((1L << (GEOMETRYCOLLECTION - 634)) | (1L << (LINESTRING - 634)) | (1L << (MULTILINESTRING - 634)) | (1L << (MULTIPOINT - 634)) | (1L << (MULTIPOLYGON - 634)) | (1L << (POINT - 634)) | (1L << (POLYGON - 634)) | (1L << (ABS - 634)) | (1L << (ACOS - 634)) | (1L << (ADDDATE - 634)) | (1L << (ADDTIME - 634)) | (1L << (AES_DECRYPT - 634)) | (1L << (AES_ENCRYPT - 634)) | (1L << (AREA - 634)) | (1L << (ASBINARY - 634)) | (1L << (ASIN - 634)) | (1L << (ASTEXT - 634)) | (1L << (ASWKB - 634)) | (1L << (ASWKT - 634)) | (1L << (ASYMMETRIC_DECRYPT - 634)) | (1L << (ASYMMETRIC_DERIVE - 634)) | (1L << (ASYMMETRIC_ENCRYPT - 634)) | (1L << (ASYMMETRIC_SIGN - 634)) | (1L << (ASYMMETRIC_VERIFY - 634)) | (1L << (ATAN - 634)) | (1L << (ATAN2 - 634)) | (1L << (BENCHMARK - 634)) | (1L << (BIN - 634)) | (1L << (BIT_COUNT - 634)) | (1L << (BIT_LENGTH - 634)) | (1L << (BUFFER - 634)) | (1L << (CEIL - 634)) | (1L << (CEILING - 634)) | (1L << (CENTROID - 634)) | (1L << (CHARACTER_LENGTH - 634)) | (1L << (CHARSET - 634)) | (1L << (CHAR_LENGTH - 634)) | (1L << (COERCIBILITY - 634)) | (1L << (COLLATION - 634)) | (1L << (COMPRESS - 634)) | (1L << (CONCAT - 634)) | (1L << (CONCAT_WS - 634)) | (1L << (CONNECTION_ID - 634)) | (1L << (CONV - 634)) | (1L << (CONVERT_TZ - 634)) | (1L << (COS - 634)) | (1L << (COT - 634)) | (1L << (CRC32 - 634)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 634)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 634)) | (1L << (CREATE_DH_PARAMETERS - 634)) | (1L << (CREATE_DIGEST - 634)) | (1L << (CROSSES - 634)) | (1L << (DATEDIFF - 634)) | (1L << (DATE_FORMAT - 634)) | (1L << (DAYNAME - 634)) | (1L << (DAYOFMONTH - 634)) | (1L << (DAYOFWEEK - 634)) | (1L << (DAYOFYEAR - 634)) | (1L << (DECODE - 634)) | (1L << (DEGREES - 634)) | (1L << (DES_DECRYPT - 634)))) != 0) || ((((_la - 698)) & ~0x3f) == 0 && ((1L << (_la - 698)) & ((1L << (DES_ENCRYPT - 698)) | (1L << (DIMENSION - 698)) | (1L << (DISJOINT - 698)) | (1L << (ELT - 698)) | (1L << (ENCODE - 698)) | (1L << (ENCRYPT - 698)) | (1L << (ENDPOINT - 698)) | (1L << (ENVELOPE - 698)) | (1L << (EQUALS - 698)) | (1L << (EXP - 698)) | (1L << (EXPORT_SET - 698)) | (1L << (EXTERIORRING - 698)) | (1L << (EXTRACTVALUE - 698)) | (1L << (FIELD - 698)) | (1L << (FIND_IN_SET - 698)) | (1L << (FLOOR - 698)) | (1L << (FORMAT - 698)) | (1L << (FOUND_ROWS - 698)) | (1L << (FROM_BASE64 - 698)) | (1L << (FROM_DAYS - 698)) | (1L << (FROM_UNIXTIME - 698)) | (1L << (GEOMCOLLFROMTEXT - 698)) | (1L << (GEOMCOLLFROMWKB - 698)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 698)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 698)) | (1L << (GEOMETRYFROMTEXT - 698)) | (1L << (GEOMETRYFROMWKB - 698)) | (1L << (GEOMETRYN - 698)) | (1L << (GEOMETRYTYPE - 698)) | (1L << (GEOMFROMTEXT - 698)) | (1L << (GEOMFROMWKB - 698)) | (1L << (GET_FORMAT - 698)) | (1L << (GET_LOCK - 698)) | (1L << (GLENGTH - 698)) | (1L << (GREATEST - 698)) | (1L << (GTID_SUBSET - 698)) | (1L << (GTID_SUBTRACT - 698)) | (1L << (HEX - 698)) | (1L << (IFNULL - 698)) | (1L << (INET6_ATON - 698)) | (1L << (INET6_NTOA - 698)) | (1L << (INET_ATON - 698)) | (1L << (INET_NTOA - 698)) | (1L << (INSTR - 698)) | (1L << (INTERIORRINGN - 698)) | (1L << (INTERSECTS - 698)) | (1L << (ISCLOSED - 698)) | (1L << (ISEMPTY - 698)) | (1L << (ISNULL - 698)) | (1L << (ISSIMPLE - 698)) | (1L << (IS_FREE_LOCK - 698)) | (1L << (IS_IPV4 - 698)) | (1L << (IS_IPV4_COMPAT - 698)) | (1L << (IS_IPV4_MAPPED - 698)) | (1L << (IS_IPV6 - 698)) | (1L << (IS_USED_LOCK - 698)) | (1L << (LAST_INSERT_ID - 698)) | (1L << (LCASE - 698)) | (1L << (LEAST - 698)) | (1L << (LENGTH - 698)) | (1L << (LINEFROMTEXT - 698)) | (1L << (LINEFROMWKB - 698)) | (1L << (LINESTRINGFROMTEXT - 698)) | (1L << (LINESTRINGFROMWKB - 698)))) != 0) || ((((_la - 762)) & ~0x3f) == 0 && ((1L << (_la - 762)) & ((1L << (LN - 762)) | (1L << (LOAD_FILE - 762)) | (1L << (LOCATE - 762)) | (1L << (LOG - 762)) | (1L << (LOG10 - 762)) | (1L << (LOG2 - 762)) | (1L << (LOWER - 762)) | (1L << (LPAD - 762)) | (1L << (LTRIM - 762)) | (1L << (MAKEDATE - 762)) | (1L << (MAKETIME - 762)) | (1L << (MAKE_SET - 762)) | (1L << (MASTER_POS_WAIT - 762)) | (1L << (MBRCONTAINS - 762)) | (1L << (MBRDISJOINT - 762)) | (1L << (MBREQUAL - 762)) | (1L << (MBRINTERSECTS - 762)) | (1L << (MBROVERLAPS - 762)) | (1L << (MBRTOUCHES - 762)) | (1L << (MBRWITHIN - 762)) | (1L << (MD5 - 762)) | (1L << (MLINEFROMTEXT - 762)) | (1L << (MLINEFROMWKB - 762)) | (1L << (MONTHNAME - 762)) | (1L << (MPOINTFROMTEXT - 762)) | (1L << (MPOINTFROMWKB - 762)) | (1L << (MPOLYFROMTEXT - 762)) | (1L << (MPOLYFROMWKB - 762)) | (1L << (MULTILINESTRINGFROMTEXT - 762)) | (1L << (MULTILINESTRINGFROMWKB - 762)) | (1L << (MULTIPOINTFROMTEXT - 762)) | (1L << (MULTIPOINTFROMWKB - 762)) | (1L << (MULTIPOLYGONFROMTEXT - 762)) | (1L << (MULTIPOLYGONFROMWKB - 762)) | (1L << (NAME_CONST - 762)) | (1L << (NULLIF - 762)) | (1L << (NUMGEOMETRIES - 762)) | (1L << (NUMINTERIORRINGS - 762)) | (1L << (NUMPOINTS - 762)) | (1L << (OCT - 762)) | (1L << (OCTET_LENGTH - 762)) | (1L << (ORD - 762)) | (1L << (OVERLAPS - 762)) | (1L << (PERIOD_ADD - 762)) | (1L << (PERIOD_DIFF - 762)) | (1L << (PI - 762)) | (1L << (POINTFROMTEXT - 762)) | (1L << (POINTFROMWKB - 762)) | (1L << (POINTN - 762)) | (1L << (POLYFROMTEXT - 762)) | (1L << (POLYFROMWKB - 762)) | (1L << (POLYGONFROMTEXT - 762)) | (1L << (POLYGONFROMWKB - 762)) | (1L << (POW - 762)) | (1L << (POWER - 762)) | (1L << (QUOTE - 762)) | (1L << (RADIANS - 762)) | (1L << (RAND - 762)) | (1L << (RANDOM_BYTES - 762)) | (1L << (RELEASE_LOCK - 762)) | (1L << (REVERSE - 762)) | (1L << (ROUND - 762)) | (1L << (ROW_COUNT - 762)) | (1L << (RPAD - 762)))) != 0) || ((((_la - 826)) & ~0x3f) == 0 && ((1L << (_la - 826)) & ((1L << (RTRIM - 826)) | (1L << (SEC_TO_TIME - 826)) | (1L << (SESSION_USER - 826)) | (1L << (SHA - 826)) | (1L << (SHA1 - 826)) | (1L << (SHA2 - 826)) | (1L << (SIGN - 826)) | (1L << (SIN - 826)) | (1L << (SLEEP - 826)) | (1L << (SOUNDEX - 826)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 826)) | (1L << (SQRT - 826)) | (1L << (SRID - 826)) | (1L << (STARTPOINT - 826)) | (1L << (STRCMP - 826)) | (1L << (STR_TO_DATE - 826)) | (1L << (ST_AREA - 826)) | (1L << (ST_ASBINARY - 826)) | (1L << (ST_ASTEXT - 826)) | (1L << (ST_ASWKB - 826)) | (1L << (ST_ASWKT - 826)) | (1L << (ST_BUFFER - 826)) | (1L << (ST_CENTROID - 826)) | (1L << (ST_CONTAINS - 826)) | (1L << (ST_CROSSES - 826)) | (1L << (ST_DIFFERENCE - 826)) | (1L << (ST_DIMENSION - 826)) | (1L << (ST_DISJOINT - 826)) | (1L << (ST_DISTANCE - 826)) | (1L << (ST_ENDPOINT - 826)) | (1L << (ST_ENVELOPE - 826)) | (1L << (ST_EQUALS - 826)) | (1L << (ST_EXTERIORRING - 826)) | (1L << (ST_GEOMCOLLFROMTEXT - 826)) | (1L << (ST_GEOMCOLLFROMTXT - 826)) | (1L << (ST_GEOMCOLLFROMWKB - 826)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 826)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 826)) | (1L << (ST_GEOMETRYFROMTEXT - 826)) | (1L << (ST_GEOMETRYFROMWKB - 826)) | (1L << (ST_GEOMETRYN - 826)) | (1L << (ST_GEOMETRYTYPE - 826)) | (1L << (ST_GEOMFROMTEXT - 826)) | (1L << (ST_GEOMFROMWKB - 826)) | (1L << (ST_INTERIORRINGN - 826)) | (1L << (ST_INTERSECTION - 826)) | (1L << (ST_INTERSECTS - 826)) | (1L << (ST_ISCLOSED - 826)) | (1L << (ST_ISEMPTY - 826)) | (1L << (ST_ISSIMPLE - 826)) | (1L << (ST_LINEFROMTEXT - 826)) | (1L << (ST_LINEFROMWKB - 826)) | (1L << (ST_LINESTRINGFROMTEXT - 826)) | (1L << (ST_LINESTRINGFROMWKB - 826)) | (1L << (ST_NUMGEOMETRIES - 826)) | (1L << (ST_NUMINTERIORRING - 826)) | (1L << (ST_NUMINTERIORRINGS - 826)) | (1L << (ST_NUMPOINTS - 826)) | (1L << (ST_OVERLAPS - 826)) | (1L << (ST_POINTFROMTEXT - 826)) | (1L << (ST_POINTFROMWKB - 826)) | (1L << (ST_POINTN - 826)) | (1L << (ST_POLYFROMTEXT - 826)) | (1L << (ST_POLYFROMWKB - 826)))) != 0) || ((((_la - 890)) & ~0x3f) == 0 && ((1L << (_la - 890)) & ((1L << (ST_POLYGONFROMTEXT - 890)) | (1L << (ST_POLYGONFROMWKB - 890)) | (1L << (ST_SRID - 890)) | (1L << (ST_STARTPOINT - 890)) | (1L << (ST_SYMDIFFERENCE - 890)) | (1L << (ST_TOUCHES - 890)) | (1L << (ST_UNION - 890)) | (1L << (ST_WITHIN - 890)) | (1L << (ST_X - 890)) | (1L << (ST_Y - 890)) | (1L << (SUBDATE - 890)) | (1L << (SUBSTRING_INDEX - 890)) | (1L << (SUBTIME - 890)) | (1L << (SYSTEM_USER - 890)) | (1L << (TAN - 890)) | (1L << (TIMEDIFF - 890)) | (1L << (TIMESTAMPADD - 890)) | (1L << (TIMESTAMPDIFF - 890)) | (1L << (TIME_FORMAT - 890)) | (1L << (TIME_TO_SEC - 890)) | (1L << (TOUCHES - 890)) | (1L << (TO_BASE64 - 890)) | (1L << (TO_DAYS - 890)) | (1L << (TO_SECONDS - 890)) | (1L << (UCASE - 890)) | (1L << (UNCOMPRESS - 890)) | (1L << (UNCOMPRESSED_LENGTH - 890)) | (1L << (UNHEX - 890)) | (1L << (UNIX_TIMESTAMP - 890)) | (1L << (UPDATEXML - 890)) | (1L << (UPPER - 890)) | (1L << (UUID - 890)) | (1L << (UUID_SHORT - 890)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 890)) | (1L << (VERSION - 890)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 890)) | (1L << (WEEKDAY - 890)) | (1L << (WEEKOFYEAR - 890)) | (1L << (WEIGHT_STRING - 890)) | (1L << (WITHIN - 890)) | (1L << (YEARWEEK - 890)) | (1L << (Y_FUNCTION - 890)) | (1L << (X_FUNCTION - 890)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 295:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 296:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 297:
			return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 7);
		case 2:
			return precpred(_ctx, 5);
		case 3:
			return precpred(_ctx, 4);
		case 4:
			return precpred(_ctx, 2);
		case 5:
			return precpred(_ctx, 9);
		case 6:
			return precpred(_ctx, 8);
		case 7:
			return precpred(_ctx, 6);
		case 8:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 1);
		case 10:
			return precpred(_ctx, 10);
		}
		return true;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u03dd\u180c\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\3\2\5\2\u0270\n\2\3\2"+
		"\5\2\u0273\n\2\3\2\3\2\3\3\3\3\5\3\u0279\n\3\3\3\5\3\u027c\n\3\3\3\7\3"+
		"\u027f\n\3\f\3\16\3\u0282\13\3\3\3\3\3\5\3\u0286\n\3\3\3\5\3\u0289\n\3"+
		"\3\3\5\3\u028c\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u0295\n\4\3\5\3\5\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5"+
		"\6\u02bc\n\6\3\7\3\7\5\7\u02c0\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b"+
		"\5\b\u02cb\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t"+
		"\3\t\5\t\u02dc\n\t\3\n\3\n\3\n\5\n\u02e1\n\n\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\5\13\u02ed\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3"+
		"\f\5\f\u0308\n\f\3\r\3\r\3\r\3\r\5\r\u030e\n\r\3\16\3\16\3\16\5\16\u0313"+
		"\n\16\3\16\3\16\7\16\u0317\n\16\f\16\16\16\u031a\13\16\3\17\3\17\5\17"+
		"\u031e\n\17\3\17\3\17\5\17\u0322\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3"+
		"\17\5\17\u032b\n\17\3\17\5\17\u032e\n\17\3\17\5\17\u0331\n\17\3\17\3\17"+
		"\5\17\u0335\n\17\3\17\3\17\3\17\3\20\3\20\5\20\u033c\n\20\3\20\5\20\u033f"+
		"\n\20\3\20\3\20\3\20\5\20\u0344\n\20\3\20\3\20\3\20\3\20\7\20\u034a\n"+
		"\20\f\20\16\20\u034d\13\20\3\20\3\20\5\20\u0351\n\20\3\20\3\20\3\20\5"+
		"\20\u0356\n\20\3\20\7\20\u0359\n\20\f\20\16\20\u035c\13\20\3\21\3\21\3"+
		"\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0367\n\21\3\21\5\21\u036a\n\21"+
		"\3\21\3\21\5\21\u036e\n\21\3\21\5\21\u0371\n\21\3\21\3\21\5\21\u0375\n"+
		"\21\3\21\5\21\u0378\n\21\3\21\3\21\5\21\u037c\n\21\3\21\5\21\u037f\n\21"+
		"\3\21\5\21\u0382\n\21\3\21\3\21\5\21\u0386\n\21\3\21\5\21\u0389\n\21\3"+
		"\21\3\21\5\21\u038d\n\21\3\21\3\21\3\22\3\22\5\22\u0393\n\22\3\22\3\22"+
		"\3\22\3\22\5\22\u0399\n\22\3\22\3\22\7\22\u039d\n\22\f\22\16\22\u03a0"+
		"\13\22\3\22\3\22\7\22\u03a4\n\22\f\22\16\22\u03a7\13\22\3\22\3\22\3\23"+
		"\3\23\5\23\u03ad\n\23\3\23\3\23\3\23\3\23\5\23\u03b3\n\23\3\23\3\23\7"+
		"\23\u03b7\n\23\f\23\16\23\u03ba\13\23\3\23\3\23\3\23\3\23\7\23\u03c0\n"+
		"\23\f\23\16\23\u03c3\13\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24"+
		"\3\24\3\24\3\24\3\24\3\24\7\24\u03d3\n\24\f\24\16\24\u03d6\13\24\3\24"+
		"\3\24\3\25\3\25\5\25\u03dc\n\25\3\25\3\25\5\25\u03e0\n\25\3\25\3\25\3"+
		"\25\3\25\3\25\3\25\3\25\3\25\5\25\u03ea\n\25\3\25\3\25\5\25\u03ee\n\25"+
		"\3\25\3\25\5\25\u03f2\n\25\3\25\3\25\5\25\u03f6\n\25\3\25\3\25\5\25\u03fa"+
		"\n\25\3\25\7\25\u03fd\n\25\f\25\16\25\u0400\13\25\5\25\u0402\n\25\3\25"+
		"\5\25\u0405\n\25\3\25\5\25\u0408\n\25\3\25\5\25\u040b\n\25\3\25\3\25\3"+
		"\25\3\25\5\25\u0411\n\25\3\25\3\25\5\25\u0415\n\25\3\25\3\25\3\25\3\25"+
		"\5\25\u041b\n\25\3\25\7\25\u041e\n\25\f\25\16\25\u0421\13\25\5\25\u0423"+
		"\n\25\3\25\5\25\u0426\n\25\5\25\u0428\n\25\3\26\3\26\3\26\3\26\3\26\3"+
		"\26\3\26\3\26\3\26\5\26\u0433\n\26\3\26\3\26\5\26\u0437\n\26\3\26\5\26"+
		"\u043a\n\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27"+
		"\5\27\u0448\n\27\3\27\5\27\u044b\n\27\3\27\3\27\5\27\u044f\n\27\3\27\5"+
		"\27\u0452\n\27\3\27\3\27\5\27\u0456\n\27\3\27\5\27\u0459\n\27\3\27\3\27"+
		"\5\27\u045d\n\27\3\27\5\27\u0460\n\27\3\27\3\27\5\27\u0464\n\27\3\27\5"+
		"\27\u0467\n\27\3\27\5\27\u046a\n\27\3\27\3\27\5\27\u046e\n\27\3\27\5\27"+
		"\u0471\n\27\3\27\3\27\5\27\u0475\n\27\3\27\3\27\3\30\3\30\5\30\u047b\n"+
		"\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u0488"+
		"\n\30\3\30\3\30\3\31\3\31\3\31\5\31\u048f\n\31\3\31\3\31\3\31\5\31\u0494"+
		"\n\31\3\31\5\31\u0497\n\31\3\31\3\31\3\31\5\31\u049c\n\31\3\31\3\31\3"+
		"\31\3\31\3\31\3\31\5\31\u04a4\n\31\3\31\3\31\3\31\3\31\5\31\u04aa\n\31"+
		"\3\31\3\31\5\31\u04ae\n\31\3\32\5\32\u04b1\n\32\3\32\3\32\3\32\5\32\u04b6"+
		"\n\32\3\32\5\32\u04b9\n\32\3\32\3\32\5\32\u04bd\n\32\3\32\3\32\5\32\u04c1"+
		"\n\32\3\32\5\32\u04c4\n\32\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u04cc\n"+
		"\33\5\33\u04ce\n\33\3\34\3\34\3\34\7\34\u04d3\n\34\f\34\16\34\u04d6\13"+
		"\34\3\34\3\34\3\34\5\34\u04db\n\34\3\34\3\34\3\34\3\34\7\34\u04e1\n\34"+
		"\f\34\16\34\u04e4\13\34\5\34\u04e6\n\34\3\34\3\34\3\34\7\34\u04eb\n\34"+
		"\f\34\16\34\u04ee\13\34\5\34\u04f0\n\34\5\34\u04f2\n\34\3\35\3\35\3\35"+
		"\3\35\5\35\u04f8\n\35\3\36\3\36\3\36\3\36\5\36\u04fe\n\36\3\36\3\36\3"+
		"\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u050f"+
		"\n\37\3 \3 \3 \3 \3 \5 \u0516\n \3!\3!\3!\3\"\3\"\5\"\u051d\n\"\3\"\3"+
		"\"\3\"\3\"\3\"\3\"\3\"\5\"\u0526\n\"\3#\5#\u0529\n#\3#\3#\3#\3$\3$\3$"+
		"\3%\3%\3%\3%\3%\5%\u0536\n%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0543"+
		"\n%\3%\3%\3%\5%\u0548\n%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&"+
		"\u0558\n&\3\'\3\'\3\'\3\'\7\'\u055e\n\'\f\'\16\'\u0561\13\'\3\'\3\'\3"+
		"(\3(\3(\3(\3(\5(\u056a\n(\3)\3)\7)\u056e\n)\f)\16)\u0571\13)\3*\3*\3*"+
		"\3*\3*\3*\3*\5*\u057a\n*\3*\5*\u057d\n*\3*\3*\3*\5*\u0582\n*\3*\3*\3*"+
		"\3*\3*\3*\3*\3*\3*\3*\3*\5*\u058f\n*\3*\3*\3*\3*\3*\5*\u0596\n*\3*\3*"+
		"\3*\5*\u059b\n*\3+\3+\5+\u059f\n+\5+\u05a1\n+\3+\3+\3+\5+\u05a6\n+\3+"+
		"\5+\u05a9\n+\3+\3+\7+\u05ad\n+\f+\16+\u05b0\13+\3+\3+\5+\u05b4\n+\5+\u05b6"+
		"\n+\3+\3+\5+\u05ba\n+\3+\5+\u05bd\n+\3+\5+\u05c0\n+\3+\3+\7+\u05c4\n+"+
		"\f+\16+\u05c7\13+\3+\3+\5+\u05cb\n+\5+\u05cd\n+\3+\3+\3+\5+\u05d2\n+\3"+
		"+\3+\3+\3+\3+\5+\u05d9\n+\5+\u05db\n+\3+\3+\3+\3+\3+\5+\u05e2\n+\3,\3"+
		",\3,\5,\u05e7\n,\3,\3,\5,\u05eb\n,\3,\5,\u05ee\n,\3-\3-\3-\3-\3-\3-\5"+
		"-\u05f6\n-\3-\3-\3-\3-\3-\3-\5-\u05fe\n-\5-\u0600\n-\3.\3.\3.\3.\3.\3"+
		".\5.\u0608\n.\3/\3/\5/\u060c\n/\3/\5/\u060f\n/\3/\3/\7/\u0613\n/\f/\16"+
		"/\u0616\13/\3/\3/\5/\u061a\n/\3/\5/\u061d\n/\3/\3/\7/\u0621\n/\f/\16/"+
		"\u0624\13/\5/\u0626\n/\3\60\3\60\5\60\u062a\n\60\3\60\3\60\3\60\5\60\u062f"+
		"\n\60\3\60\3\60\3\60\5\60\u0634\n\60\3\60\3\60\5\60\u0638\n\60\3\60\3"+
		"\60\3\60\5\60\u063d\n\60\3\60\5\60\u0640\n\60\3\60\3\60\3\60\5\60\u0645"+
		"\n\60\3\60\3\60\5\60\u0649\n\60\3\60\3\60\5\60\u064d\n\60\3\60\3\60\3"+
		"\60\5\60\u0652\n\60\3\60\3\60\3\60\5\60\u0657\n\60\3\60\3\60\3\60\5\60"+
		"\u065c\n\60\3\60\3\60\3\60\3\60\5\60\u0662\n\60\3\60\3\60\3\60\5\60\u0667"+
		"\n\60\3\60\3\60\3\60\5\60\u066c\n\60\3\60\3\60\3\60\3\60\5\60\u0672\n"+
		"\60\3\60\3\60\3\60\5\60\u0677\n\60\3\60\3\60\3\60\5\60\u067c\n\60\3\60"+
		"\3\60\3\60\5\60\u0681\n\60\3\60\3\60\3\60\5\60\u0686\n\60\3\60\3\60\3"+
		"\60\5\60\u068b\n\60\3\60\3\60\3\60\5\60\u0690\n\60\3\60\3\60\3\60\5\60"+
		"\u0695\n\60\3\60\3\60\3\60\5\60\u069a\n\60\3\60\3\60\3\60\5\60\u069f\n"+
		"\60\3\60\3\60\3\60\5\60\u06a4\n\60\3\60\3\60\3\60\3\60\5\60\u06aa\n\60"+
		"\3\60\3\60\3\60\5\60\u06af\n\60\3\60\3\60\3\60\3\60\5\60\u06b5\n\60\3"+
		"\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62\5\62\u06bf\n\62\3\62\3\62\3\62"+
		"\3\62\3\62\5\62\u06c6\n\62\5\62\u06c8\n\62\3\62\3\62\3\62\3\62\7\62\u06ce"+
		"\n\62\f\62\16\62\u06d1\13\62\3\62\3\62\5\62\u06d5\n\62\3\63\5\63\u06d8"+
		"\n\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u06e0\n\63\3\63\3\63\3\63\3\63"+
		"\5\63\u06e6\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63"+
		"\3\63\3\63\3\63\5\63\u06f6\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63"+
		"\3\63\3\63\5\63\u0702\n\63\5\63\u0704\n\63\3\64\5\64\u0707\n\64\3\64\3"+
		"\64\3\64\3\64\3\64\3\64\5\64\u070f\n\64\3\64\3\64\3\64\3\64\5\64\u0715"+
		"\n\64\3\64\3\64\3\64\3\64\5\64\u071b\n\64\3\65\3\65\3\65\3\65\3\65\3\65"+
		"\3\65\3\65\3\65\7\65\u0726\n\65\f\65\16\65\u0729\13\65\3\65\3\65\7\65"+
		"\u072d\n\65\f\65\16\65\u0730\13\65\3\65\3\65\3\65\7\65\u0735\n\65\f\65"+
		"\16\65\u0738\13\65\5\65\u073a\n\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65"+
		"\7\65\u0743\n\65\f\65\16\65\u0746\13\65\3\65\3\65\3\65\7\65\u074b\n\65"+
		"\f\65\16\65\u074e\13\65\5\65\u0750\n\65\3\65\3\65\3\65\3\65\3\65\3\65"+
		"\3\65\3\65\7\65\u075a\n\65\f\65\16\65\u075d\13\65\3\65\3\65\7\65\u0761"+
		"\n\65\f\65\16\65\u0764\13\65\3\65\3\65\3\65\7\65\u0769\n\65\f\65\16\65"+
		"\u076c\13\65\5\65\u076e\n\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\7"+
		"\65\u0778\n\65\f\65\16\65\u077b\13\65\3\65\3\65\7\65\u077f\n\65\f\65\16"+
		"\65\u0782\13\65\3\65\3\65\3\65\7\65\u0787\n\65\f\65\16\65\u078a\13\65"+
		"\5\65\u078c\n\65\3\65\3\65\3\65\7\65\u0791\n\65\f\65\16\65\u0794\13\65"+
		"\3\65\3\65\3\65\7\65\u0799\n\65\f\65\16\65\u079c\13\65\5\65\u079e\n\65"+
		"\5\65\u07a0\n\65\3\66\3\66\3\66\5\66\u07a5\n\66\3\67\3\67\3\67\3\67\6"+
		"\67\u07ab\n\67\r\67\16\67\u07ac\3\67\3\67\38\38\38\78\u07b4\n8\f8\168"+
		"\u07b7\138\39\59\u07ba\n9\39\39\59\u07be\n9\39\39\39\59\u07c3\n9\39\3"+
		"9\39\39\59\u07c9\n9\39\39\39\39\59\u07cf\n9\39\39\39\59\u07d4\n9\39\3"+
		"9\39\59\u07d9\n9\39\39\39\59\u07de\n9\39\39\39\59\u07e3\n9\39\59\u07e6"+
		"\n9\3:\3:\3:\5:\u07eb\n:\3:\6:\u07ee\n:\r:\16:\u07ef\3:\3:\3:\3:\3:\3"+
		":\3:\3:\5:\u07fa\n:\3;\3;\5;\u07fe\n;\3;\3;\3;\3;\3;\5;\u0805\n;\3;\3"+
		";\3;\5;\u080a\n;\3;\5;\u080d\n;\3;\3;\3;\5;\u0812\n;\3;\5;\u0815\n;\3"+
		";\3;\5;\u0819\n;\3;\3;\5;\u081d\n;\3<\3<\3<\3<\7<\u0823\n<\f<\16<\u0826"+
		"\13<\3=\3=\3=\3=\3=\3=\3=\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u0838\n>\3>\5"+
		">\u083b\n>\3>\5>\u083e\n>\3>\3>\5>\u0842\n>\3>\3>\3?\3?\3?\3?\7?\u084a"+
		"\n?\f?\16?\u084d\13?\3@\3@\3@\3@\3@\3@\3@\3@\7@\u0857\n@\f@\16@\u085a"+
		"\13@\3@\3@\3A\3A\5A\u0860\nA\3A\5A\u0863\nA\3A\3A\3A\3A\3A\7A\u086a\n"+
		"A\fA\16A\u086d\13A\5A\u086f\nA\3A\5A\u0872\nA\3B\3B\3B\3B\3B\3B\3B\3B"+
		"\3B\5B\u087d\nB\3B\5B\u0880\nB\3B\3B\5B\u0884\nB\3B\3B\3C\3C\3C\3C\5C"+
		"\u088c\nC\3C\5C\u088f\nC\3C\3C\3C\5C\u0894\nC\3C\3C\3C\3C\3C\3C\5C\u089c"+
		"\nC\3C\3C\3C\3C\5C\u08a2\nC\3C\3C\5C\u08a6\nC\3D\3D\5D\u08aa\nD\3D\7D"+
		"\u08ad\nD\fD\16D\u08b0\13D\3D\3D\5D\u08b4\nD\3D\3D\3D\3D\3D\5D\u08bb\n"+
		"D\3D\3D\5D\u08bf\nD\3D\3D\3D\3D\3D\3D\3D\7D\u08c8\nD\fD\16D\u08cb\13D"+
		"\3D\3D\3D\3D\3D\5D\u08d2\nD\3D\5D\u08d5\nD\3D\3D\7D\u08d9\nD\fD\16D\u08dc"+
		"\13D\3D\3D\3D\5D\u08e1\nD\5D\u08e3\nD\3D\3D\3D\5D\u08e8\nD\3D\3D\7D\u08ec"+
		"\nD\fD\16D\u08ef\13D\3D\3D\3D\5D\u08f4\nD\5D\u08f6\nD\3D\3D\5D\u08fa\n"+
		"D\3D\5D\u08fd\nD\3D\5D\u0900\nD\3D\3D\7D\u0904\nD\fD\16D\u0907\13D\3D"+
		"\3D\3D\5D\u090c\nD\3D\5D\u090f\nD\3D\3D\7D\u0913\nD\fD\16D\u0916\13D\3"+
		"D\3D\3D\5D\u091b\nD\5D\u091d\nD\3D\3D\3D\5D\u0922\nD\3D\3D\3D\3D\3D\3"+
		"D\5D\u092a\nD\5D\u092c\nD\3D\3D\3D\3D\3D\3D\3D\5D\u0935\nD\3D\3D\3D\5"+
		"D\u093a\nD\3D\3D\3D\3D\3D\3D\5D\u0942\nD\3D\3D\5D\u0946\nD\3D\3D\3D\3"+
		"D\3D\3D\5D\u094e\nD\3D\3D\3D\3D\3D\3D\3D\3D\5D\u0958\nD\3D\3D\3D\5D\u095d"+
		"\nD\3D\3D\3D\3D\3D\5D\u0964\nD\3D\3D\5D\u0968\nD\3D\3D\5D\u096c\nD\3D"+
		"\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u0984"+
		"\nD\3D\3D\5D\u0988\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u0994\nD\3D\5D"+
		"\u0997\nD\3D\3D\3D\3D\3D\3D\3D\5D\u09a0\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D"+
		"\3D\3D\3D\3D\7D\u09af\nD\fD\16D\u09b2\13D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5"+
		"D\u09bd\nD\3D\3D\3D\3D\3D\5D\u09c4\nD\3D\3D\3D\3D\3D\5D\u09cb\nD\3D\3"+
		"D\3D\3D\3D\3D\3D\3D\3D\3D\3D\7D\u09d8\nD\fD\16D\u09db\13D\3D\3D\3D\3D"+
		"\3D\3D\3D\3D\3D\3D\5D\u09e7\nD\3D\3D\3D\3D\5D\u09ed\nD\3D\3D\3D\3D\5D"+
		"\u09f3\nD\3D\3D\3D\3D\5D\u09f9\nD\3D\3D\3D\3D\5D\u09ff\nD\3D\3D\3D\3D"+
		"\5D\u0a05\nD\3D\3D\3D\3D\5D\u0a0b\nD\3E\3E\3E\5E\u0a10\nE\3E\3E\3F\3F"+
		"\3F\5F\u0a17\nF\3F\3F\3G\3G\3G\5G\u0a1e\nG\3G\3G\3G\3G\3G\5G\u0a25\nG"+
		"\3G\3G\3G\5G\u0a2a\nG\3G\7G\u0a2d\nG\fG\16G\u0a30\13G\3H\3H\3H\3H\3H\3"+
		"H\3H\3H\3I\3I\3I\5I\u0a3d\nI\3I\3I\3J\3J\3J\5J\u0a44\nJ\3J\3J\3K\3K\3"+
		"K\5K\u0a4b\nK\3K\3K\3L\3L\5L\u0a51\nL\3L\3L\5L\u0a55\nL\3L\3L\5L\u0a59"+
		"\nL\3M\3M\3M\3M\3M\5M\u0a60\nM\3M\5M\u0a63\nM\3N\3N\3N\5N\u0a68\nN\3N"+
		"\3N\3O\3O\3O\5O\u0a6f\nO\3O\3O\3O\7O\u0a74\nO\fO\16O\u0a77\13O\3O\5O\u0a7a"+
		"\nO\3P\3P\3P\3P\3P\7P\u0a81\nP\fP\16P\u0a84\13P\3Q\3Q\3Q\3Q\3R\3R\5R\u0a8c"+
		"\nR\3R\3R\3S\3S\3S\3S\3S\5S\u0a95\nS\3S\5S\u0a98\nS\3T\3T\5T\u0a9c\nT"+
		"\3U\3U\3U\3V\3V\3V\3V\5V\u0aa5\nV\3W\3W\5W\u0aa9\nW\3W\5W\u0aac\nW\3W"+
		"\5W\u0aaf\nW\3W\3W\3W\3W\3W\3W\5W\u0ab7\nW\3W\3W\3W\3W\5W\u0abd\nW\3W"+
		"\3W\3W\3W\3W\7W\u0ac4\nW\fW\16W\u0ac7\13W\5W\u0ac9\nW\3W\3W\3W\3W\3W\3"+
		"W\3W\7W\u0ad2\nW\fW\16W\u0ad5\13W\5W\u0ad7\nW\3X\3X\3X\5X\u0adc\nX\3X"+
		"\5X\u0adf\nX\3X\3X\3X\5X\u0ae4\nX\3X\3X\3X\3X\3X\3X\3X\3X\5X\u0aee\nX"+
		"\3X\3X\3X\5X\u0af3\nX\3X\3X\6X\u0af7\nX\rX\16X\u0af8\5X\u0afb\nX\3X\3"+
		"X\6X\u0aff\nX\rX\16X\u0b00\5X\u0b03\nX\3X\3X\3X\3X\5X\u0b09\nX\3X\3X\3"+
		"X\3X\7X\u0b0f\nX\fX\16X\u0b12\13X\3X\3X\5X\u0b16\nX\3X\3X\3X\3X\7X\u0b1c"+
		"\nX\fX\16X\u0b1f\13X\5X\u0b21\nX\3Y\3Y\3Y\5Y\u0b26\nY\3Y\5Y\u0b29\nY\3"+
		"Y\3Y\3Y\5Y\u0b2e\nY\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0b36\nY\3Y\3Y\3Y\3Y\3Y\3Y\5"+
		"Y\u0b3e\nY\3Y\3Y\3Y\3Y\5Y\u0b44\nY\3Y\3Y\3Y\3Y\7Y\u0b4a\nY\fY\16Y\u0b4d"+
		"\13Y\3Y\3Y\5Y\u0b51\nY\3Y\3Y\3Y\3Y\7Y\u0b57\nY\fY\16Y\u0b5a\13Y\5Y\u0b5c"+
		"\nY\3Z\3Z\5Z\u0b60\nZ\3Z\5Z\u0b63\nZ\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0b6b\nZ\3Z"+
		"\3Z\3Z\3Z\5Z\u0b71\nZ\3Z\3Z\3Z\3Z\3Z\7Z\u0b78\nZ\fZ\16Z\u0b7b\13Z\5Z\u0b7d"+
		"\nZ\3[\3[\5[\u0b81\n[\3[\3[\5[\u0b85\n[\3[\3[\6[\u0b89\n[\r[\16[\u0b8a"+
		"\3[\3[\5[\u0b8f\n[\3[\3[\5[\u0b93\n[\5[\u0b95\n[\3[\5[\u0b98\n[\3[\5["+
		"\u0b9b\n[\3[\5[\u0b9e\n[\3[\3[\6[\u0ba2\n[\r[\16[\u0ba3\3[\3[\5[\u0ba8"+
		"\n[\3[\5[\u0bab\n[\3[\5[\u0bae\n[\3[\5[\u0bb1\n[\3[\5[\u0bb4\n[\5[\u0bb6"+
		"\n[\3\\\3\\\5\\\u0bba\n\\\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\7]\u0bc6\n]\f"+
		"]\16]\u0bc9\13]\5]\u0bcb\n]\3^\3^\3^\3^\5^\u0bd1\n^\3_\3_\5_\u0bd5\n_"+
		"\3`\3`\3`\3`\3`\3`\5`\u0bdd\n`\3a\3a\5a\u0be1\na\3a\5a\u0be4\na\3a\5a"+
		"\u0be7\na\3a\3a\3a\3a\3a\3a\3a\5a\u0bf0\na\3a\3a\5a\u0bf4\na\3a\5a\u0bf7"+
		"\na\3a\3a\5a\u0bfb\na\3b\3b\5b\u0bff\nb\3b\5b\u0c02\nb\3b\5b\u0c05\nb"+
		"\3b\3b\3b\5b\u0c0a\nb\3b\3b\3b\3b\5b\u0c10\nb\7b\u0c12\nb\fb\16b\u0c15"+
		"\13b\3b\3b\3b\3b\3b\3b\3b\5b\u0c1e\nb\3b\3b\3b\3b\5b\u0c24\nb\7b\u0c26"+
		"\nb\fb\16b\u0c29\13b\3b\3b\3b\5b\u0c2e\nb\3b\3b\5b\u0c32\nb\3c\3c\3c\3"+
		"c\5c\u0c38\nc\3c\5c\u0c3b\nc\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\5d\u0c47\n"+
		"d\3d\3d\5d\u0c4b\nd\3d\3d\5d\u0c4f\nd\3e\3e\3e\3e\3e\3e\5e\u0c57\ne\3"+
		"e\3e\5e\u0c5b\ne\3f\3f\3f\3f\3g\3g\5g\u0c63\ng\3g\5g\u0c66\ng\3g\3g\5"+
		"g\u0c6a\ng\3g\5g\u0c6d\ng\3g\3g\3g\3g\7g\u0c73\ng\fg\16g\u0c76\13g\3g"+
		"\3g\5g\u0c7a\ng\3g\5g\u0c7d\ng\3g\5g\u0c80\ng\3h\3h\5h\u0c84\nh\3h\5h"+
		"\u0c87\nh\3h\3h\3h\3h\3h\7h\u0c8e\nh\fh\16h\u0c91\13h\3h\3h\5h\u0c95\n"+
		"h\3i\3i\3i\3i\3i\7i\u0c9c\ni\fi\16i\u0c9f\13i\3j\3j\5j\u0ca3\nj\3k\3k"+
		"\3k\7k\u0ca8\nk\fk\16k\u0cab\13k\3l\3l\7l\u0caf\nl\fl\16l\u0cb2\13l\3"+
		"l\3l\3l\7l\u0cb7\nl\fl\16l\u0cba\13l\3l\3l\5l\u0cbe\nl\3m\3m\3m\3m\3m"+
		"\3m\5m\u0cc6\nm\3m\5m\u0cc9\nm\3m\5m\u0ccc\nm\3m\3m\3m\7m\u0cd1\nm\fm"+
		"\16m\u0cd4\13m\5m\u0cd6\nm\3m\3m\3m\3m\3m\5m\u0cdd\nm\3m\5m\u0ce0\nm\3"+
		"m\3m\3m\3m\3m\3m\5m\u0ce8\nm\3n\3n\3n\3n\5n\u0cee\nn\3n\3n\3n\3n\3o\3"+
		"o\3o\3o\3o\5o\u0cf9\no\3p\5p\u0cfc\np\3p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u0d07"+
		"\np\3p\3p\3p\3p\5p\u0d0d\np\3p\3p\5p\u0d11\np\3p\3p\3p\3p\3p\3p\3p\3p"+
		"\3p\5p\u0d1c\np\3p\3p\3p\5p\u0d21\np\5p\u0d23\np\3p\3p\5p\u0d27\np\3q"+
		"\3q\3q\3q\3q\3q\3q\3q\5q\u0d31\nq\3r\3r\3r\3r\3r\3r\3r\3r\5r\u0d3b\nr"+
		"\3s\3s\7s\u0d3f\ns\fs\16s\u0d42\13s\3s\3s\5s\u0d46\ns\3s\3s\5s\u0d4a\n"+
		"s\3s\5s\u0d4d\ns\3s\3s\7s\u0d51\ns\fs\16s\u0d54\13s\3s\3s\3s\5s\u0d59"+
		"\ns\3s\5s\u0d5c\ns\3s\5s\u0d5f\ns\5s\u0d61\ns\3t\3t\7t\u0d65\nt\ft\16"+
		"t\u0d68\13t\3t\3t\3t\5t\u0d6d\nt\3t\5t\u0d70\nt\3u\3u\5u\u0d74\nu\3u\3"+
		"u\3v\3v\5v\u0d7a\nv\3v\3v\5v\u0d7e\nv\3w\3w\3w\3w\3w\3w\3w\3w\5w\u0d88"+
		"\nw\3x\3x\5x\u0d8c\nx\3x\3x\7x\u0d90\nx\fx\16x\u0d93\13x\3y\3y\3y\3y\3"+
		"y\3y\5y\u0d9b\ny\3y\5y\u0d9e\ny\3y\3y\5y\u0da2\ny\3y\5y\u0da5\ny\3y\3"+
		"y\5y\u0da9\ny\3y\3y\5y\u0dad\ny\3y\5y\u0db0\ny\5y\u0db2\ny\3z\3z\3z\3"+
		"z\7z\u0db8\nz\fz\16z\u0dbb\13z\3z\3z\3z\3z\3z\3z\3z\3z\3z\5z\u0dc6\nz"+
		"\3z\3z\6z\u0dca\nz\rz\16z\u0dcb\5z\u0dce\nz\3z\3z\6z\u0dd2\nz\rz\16z\u0dd3"+
		"\5z\u0dd6\nz\5z\u0dd8\nz\3{\3{\3{\3{\5{\u0dde\n{\3{\3{\3{\3{\3{\3{\5{"+
		"\u0de6\n{\3|\3|\3|\3|\3|\3|\5|\u0dee\n|\3}\3}\3}\3}\5}\u0df4\n}\3}\3}"+
		"\3}\3}\3}\7}\u0dfb\n}\f}\16}\u0dfe\13}\3}\3}\5}\u0e02\n}\5}\u0e04\n}\3"+
		"}\3}\5}\u0e08\n}\3~\3~\5~\u0e0c\n~\3\177\3\177\3\177\3\177\5\177\u0e12"+
		"\n\177\3\177\3\177\3\177\3\177\3\177\5\177\u0e19\n\177\3\u0080\3\u0080"+
		"\5\u0080\u0e1d\n\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\7\u0081"+
		"\u0e24\n\u0081\f\u0081\16\u0081\u0e27\13\u0081\5\u0081\u0e29\n\u0081\3"+
		"\u0082\3\u0082\5\u0082\u0e2d\n\u0082\3\u0083\3\u0083\5\u0083\u0e31\n\u0083"+
		"\3\u0083\3\u0083\5\u0083\u0e35\n\u0083\3\u0083\5\u0083\u0e38\n\u0083\3"+
		"\u0083\5\u0083\u0e3b\n\u0083\3\u0083\5\u0083\u0e3e\n\u0083\3\u0084\3\u0084"+
		"\5\u0084\u0e42\n\u0084\3\u0084\3\u0084\5\u0084\u0e46\n\u0084\3\u0084\5"+
		"\u0084\u0e49\n\u0084\3\u0084\5\u0084\u0e4c\n\u0084\3\u0084\5\u0084\u0e4f"+
		"\n\u0084\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086\5\u0086\u0e56\n\u0086"+
		"\3\u0086\3\u0086\5\u0086\u0e5a\n\u0086\3\u0086\3\u0086\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\7\u0088\u0e67"+
		"\n\u0088\f\u0088\16\u0088\u0e6a\13\u0088\3\u0089\3\u0089\3\u0089\3\u008a"+
		"\3\u008a\3\u008a\3\u008a\3\u008a\3\u008b\3\u008b\5\u008b\u0e76\n\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\7\u008b\u0e7c\n\u008b\f\u008b\16\u008b"+
		"\u0e7f\13\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c"+
		"\5\u008c\u0e88\n\u008c\3\u008d\3\u008d\5\u008d\u0e8c\n\u008d\3\u008d\5"+
		"\u008d\u0e8f\n\u008d\3\u008d\3\u008d\3\u008e\3\u008e\5\u008e\u0e95\n\u008e"+
		"\3\u008e\5\u008e\u0e98\n\u008e\3\u008e\5\u008e\u0e9b\n\u008e\3\u008f\3"+
		"\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0ea4\n\u008f\3"+
		"\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0ead\n"+
		"\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091\u0eb5\n"+
		"\u0091\f\u0091\16\u0091\u0eb8\13\u0091\3\u0091\5\u0091\u0ebb\n\u0091\3"+
		"\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\7\u0092\u0ec3\n\u0092\f"+
		"\u0092\16\u0092\u0ec6\13\u0092\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\5\u0093\u0ecf\n\u0093\3\u0094\3\u0094\3\u0094\3\u0095"+
		"\3\u0095\3\u0095\5\u0095\u0ed7\n\u0095\3\u0095\5\u0095\u0eda\n\u0095\3"+
		"\u0096\3\u0096\3\u0096\3\u0096\3\u0096\7\u0096\u0ee1\n\u0096\f\u0096\16"+
		"\u0096\u0ee4\13\u0096\5\u0096\u0ee6\n\u0096\3\u0096\3\u0096\5\u0096\u0eea"+
		"\n\u0096\3\u0096\7\u0096\u0eed\n\u0096\f\u0096\16\u0096\u0ef0\13\u0096"+
		"\3\u0096\5\u0096\u0ef3\n\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\7\u0097\u0efa\n\u0097\f\u0097\16\u0097\u0efd\13\u0097\5\u0097\u0eff\n"+
		"\u0097\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099\3\u0099\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\7\u009a\u0f1c\n\u009a\f\u009a\16\u009a\u0f1f\13\u009a\5\u009a"+
		"\u0f21\n\u009a\3\u009a\5\u009a\u0f24\n\u009a\3\u009b\3\u009b\3\u009c\3"+
		"\u009c\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\7\u009f\u0f5a\n\u009f\f\u009f\16\u009f"+
		"\u0f5d\13\u009f\3\u009f\3\u009f\5\u009f\u0f61\n\u009f\3\u00a0\3\u00a0"+
		"\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f7d\n\u00a2"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0f8b\n\u00a3\3\u00a4\3\u00a4\3\u00a4"+
		"\7\u00a4\u0f90\n\u00a4\f\u00a4\16\u00a4\u0f93\13\u00a4\3\u00a4\5\u00a4"+
		"\u0f96\n\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0f9c\n\u00a5\3"+
		"\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0fa4\n\u00a6\5"+
		"\u00a6\u0fa6\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3"+
		"\u00a8\3\u00a8\3\u00a8\5\u00a8\u0fb1\n\u00a8\3\u00a9\3\u00a9\3\u00a9\3"+
		"\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0fbb\n\u00aa\3\u00ab\3"+
		"\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0fc2\n\u00ab\3\u00ac\3\u00ac\3"+
		"\u00ac\3\u00ac\5\u00ac\u0fc8\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3"+
		"\u00ae\3\u00ae\5\u00ae\u0fd0\n\u00ae\3\u00af\3\u00af\3\u00af\5\u00af\u0fd5"+
		"\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\7\u00af\u0fdb\n\u00af\f\u00af"+
		"\16\u00af\u0fde\13\u00af\3\u00af\3\u00af\3\u00af\7\u00af\u0fe3\n\u00af"+
		"\f\u00af\16\u00af\u0fe6\13\u00af\3\u00af\3\u00af\3\u00af\7\u00af\u0feb"+
		"\n\u00af\f\u00af\16\u00af\u0fee\13\u00af\3\u00af\3\u00af\3\u00af\7\u00af"+
		"\u0ff3\n\u00af\f\u00af\16\u00af\u0ff6\13\u00af\3\u00af\7\u00af\u0ff9\n"+
		"\u00af\f\u00af\16\u00af\u0ffc\13\u00af\5\u00af\u0ffe\n\u00af\3\u00af\3"+
		"\u00af\5\u00af\u1002\n\u00af\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u1007\n\u00b0"+
		"\3\u00b0\6\u00b0\u100a\n\u00b0\r\u00b0\16\u00b0\u100b\3\u00b0\3\u00b0"+
		"\6\u00b0\u1010\n\u00b0\r\u00b0\16\u00b0\u1011\5\u00b0\u1014\n\u00b0\3"+
		"\u00b0\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1\6\u00b1\u101d\n"+
		"\u00b1\r\u00b1\16\u00b1\u101e\3\u00b1\7\u00b1\u1022\n\u00b1\f\u00b1\16"+
		"\u00b1\u1025\13\u00b1\3\u00b1\3\u00b1\6\u00b1\u1029\n\u00b1\r\u00b1\16"+
		"\u00b1\u102a\5\u00b1\u102d\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u103b"+
		"\n\u00b4\3\u00b4\3\u00b4\6\u00b4\u103f\n\u00b4\r\u00b4\16\u00b4\u1040"+
		"\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u1046\n\u00b4\3\u00b5\3\u00b5\3\u00b5"+
		"\5\u00b5\u104b\n\u00b5\3\u00b5\3\u00b5\6\u00b5\u104f\n\u00b5\r\u00b5\16"+
		"\u00b5\u1050\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u1058\n\u00b5"+
		"\3\u00b6\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u1060\n\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\6\u00b7\u1066\n\u00b7\r\u00b7\16\u00b7"+
		"\u1067\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u106d\n\u00b7\3\u00b8\3\u00b8\3"+
		"\u00b8\3\u00b8\5\u00b8\u1073\n\u00b8\3\u00b8\5\u00b8\u1076\n\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u107e\n\u00b8\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u1085\n\u00b9\3\u00ba\3\u00ba"+
		"\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u108e\n\u00ba\3\u00ba"+
		"\5\u00ba\u1091\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u10a0"+
		"\n\u00bc\f\u00bc\16\u00bc\u10a3\13\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd"+
		"\3\u00bd\5\u00bd\u10aa\n\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\5\u00bd\u10b2\n\u00bd\3\u00be\3\u00be\5\u00be\u10b6\n\u00be\3"+
		"\u00be\3\u00be\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u10bd\n\u00bf\3\u00bf\3"+
		"\u00bf\6\u00bf\u10c1\n\u00bf\r\u00bf\16\u00bf\u10c2\3\u00c0\3\u00c0\3"+
		"\u00c0\3\u00c0\6\u00c0\u10c9\n\u00c0\r\u00c0\16\u00c0\u10ca\3\u00c1\3"+
		"\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u10d2\n\u00c1\f\u00c1\16\u00c1"+
		"\u10d5\13\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u10da\n\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\7\u00c1\u10df\n\u00c1\f\u00c1\16\u00c1\u10e2\13\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u10e8\n\u00c1\3\u00c1\7\u00c1"+
		"\u10eb\n\u00c1\f\u00c1\16\u00c1\u10ee\13\u00c1\5\u00c1\u10f0\n\u00c1\5"+
		"\u00c1\u10f2\n\u00c1\3\u00c1\3\u00c1\6\u00c1\u10f6\n\u00c1\r\u00c1\16"+
		"\u00c1\u10f7\5\u00c1\u10fa\n\u00c1\3\u00c1\3\u00c1\7\u00c1\u10fe\n\u00c1"+
		"\f\u00c1\16\u00c1\u1101\13\u00c1\5\u00c1\u1103\n\u00c1\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\7\u00c2\u110a\n\u00c2\f\u00c2\16\u00c2\u110d"+
		"\13\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u1112\n\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\7\u00c2\u1117\n\u00c2\f\u00c2\16\u00c2\u111a\13\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u1120\n\u00c2\3\u00c2\7\u00c2\u1123\n"+
		"\u00c2\f\u00c2\16\u00c2\u1126\13\u00c2\5\u00c2\u1128\n\u00c2\5\u00c2\u112a"+
		"\n\u00c2\3\u00c2\3\u00c2\6\u00c2\u112e\n\u00c2\r\u00c2\16\u00c2\u112f"+
		"\5\u00c2\u1132\n\u00c2\3\u00c2\3\u00c2\7\u00c2\u1136\n\u00c2\f\u00c2\16"+
		"\u00c2\u1139\13\u00c2\5\u00c2\u113b\n\u00c2\3\u00c3\3\u00c3\3\u00c3\5"+
		"\u00c3\u1140\n\u00c3\3\u00c3\3\u00c3\3\u00c3\7\u00c3\u1145\n\u00c3\f\u00c3"+
		"\16\u00c3\u1148\13\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\7\u00c4\u114e"+
		"\n\u00c4\f\u00c4\16\u00c4\u1151\13\u00c4\3\u00c4\3\u00c4\5\u00c4\u1155"+
		"\n\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\7\u00c4\u115c\n\u00c4"+
		"\f\u00c4\16\u00c4\u115f\13\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4"+
		"\u1165\n\u00c4\3\u00c4\7\u00c4\u1168\n\u00c4\f\u00c4\16\u00c4\u116b\13"+
		"\u00c4\5\u00c4\u116d\n\u00c4\5\u00c4\u116f\n\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\7\u00c4\u1175\n\u00c4\f\u00c4\16\u00c4\u1178\13\u00c4\5\u00c4"+
		"\u117a\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\7\u00c5\u1184\n\u00c5\f\u00c5\16\u00c5\u1187\13\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\5\u00c5\u118c\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\7\u00c6\u1193\n\u00c6\f\u00c6\16\u00c6\u1196\13\u00c6\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u119c\n\u00c7\f\u00c7\16\u00c7\u119f"+
		"\13\u00c7\3\u00c7\3\u00c7\5\u00c7\u11a3\n\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\7\u00c7\u11aa\n\u00c7\f\u00c7\16\u00c7\u11ad\13\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u11b2\n\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u11bb\n\u00c7\f\u00c7\16\u00c7"+
		"\u11be\13\u00c7\5\u00c7\u11c0\n\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u11ca\n\u00c8\f\u00c8\16\u00c8"+
		"\u11cd\13\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u11d3\n\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u11d8\n\u00c9\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\5\u00cb\u11e7\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u11f2\n\u00cb\3\u00cb\5\u00cb"+
		"\u11f5\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\5\u00cc\u11ff\n\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u1209\n\u00cd\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u1213\n\u00ce\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u121d"+
		"\n\u00d0\3\u00d1\3\u00d1\5\u00d1\u1221\n\u00d1\3\u00d1\3\u00d1\5\u00d1"+
		"\u1225\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\5\u00d1\u122e\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\5\u00d1\u1249\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\5\u00d2\u125b\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d4\3\u00d4\5\u00d4\u1263\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d5"+
		"\3\u00d5\3\u00d5\3\u00d5\7\u00d5\u126c\n\u00d5\f\u00d5\16\u00d5\u126f"+
		"\13\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u1275\n\u00d6\3\u00d7"+
		"\3\u00d7\5\u00d7\u1279\n\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d8\3\u00d8"+
		"\5\u00d8\u1280\n\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u1285\n\u00d8\3"+
		"\u00d8\5\u00d8\u1288\n\u00d8\3\u00d8\5\u00d8\u128b\n\u00d8\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u1294\n\u00d9\3\u00da"+
		"\3\u00da\5\u00da\u1298\n\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da"+
		"\3\u00da\3\u00da\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\7\u00dd\u12b4\n\u00dd\f\u00dd\16\u00dd\u12b7"+
		"\13\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u12bd\n\u00dd\3\u00dd"+
		"\3\u00dd\5\u00dd\u12c1\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\5\u00dd\u12c8\n\u00dd\3\u00dd\5\u00dd\u12cb\n\u00dd\3\u00dd\3\u00dd\3"+
		"\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u12d5\n\u00dd\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de"+
		"\u12df\n\u00de\3\u00de\3\u00de\5\u00de\u12e3\n\u00de\3\u00de\3\u00de\3"+
		"\u00de\3\u00de\5\u00de\u12e9\n\u00de\3\u00de\5\u00de\u12ec\n\u00de\3\u00de"+
		"\3\u00de\3\u00de\5\u00de\u12f1\n\u00de\3\u00de\3\u00de\5\u00de\u12f5\n"+
		"\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u12fc\n\u00de\3"+
		"\u00de\5\u00de\u12ff\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1305"+
		"\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u131d\n\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\5\u00de\u132a\n\u00de\3\u00de\5\u00de\u132d\n\u00de\3\u00de\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1337\n"+
		"\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u133f\n"+
		"\u00de\3\u00de\3\u00de\5\u00de\u1343\n\u00de\3\u00de\3\u00de\3\u00de\3"+
		"\u00de\3\u00de\5\u00de\u134a\n\u00de\3\u00de\5\u00de\u134d\n\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\7\u00de\u1354\n\u00de\f\u00de\16\u00de"+
		"\u1357\13\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u135c\n\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\5\u00de\u1362\n\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u136c\n\u00de\5\u00de"+
		"\u136e\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u1374\n\u00df\3"+
		"\u00df\5\u00df\u1377\n\u00df\3\u00df\5\u00df\u137a\n\u00df\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0"+
		"\u1386\n\u00e0\3\u00e0\5\u00e0\u1389\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3"+
		"\u00e1\5\u00e1\u138f\n\u00e1\3\u00e2\5\u00e2\u1392\n\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u139a\n\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u13a2\n\u00e2\3\u00e3\3\u00e3"+
		"\3\u00e3\3\u00e3\5\u00e3\u13a8\n\u00e3\3\u00e3\3\u00e3\5\u00e3\u13ac\n"+
		"\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u13ba\n\u00e4\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u13c4\n\u00e6"+
		"\f\u00e6\16\u00e6\u13c7\13\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6"+
		"\u13cd\n\u00e6\3\u00e6\5\u00e6\u13d0\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3"+
		"\u00e7\3\u00e7\5\u00e7\u13d7\n\u00e7\3\u00e7\3\u00e7\3\u00e7\7\u00e7\u13dc"+
		"\n\u00e7\f\u00e7\16\u00e7\u13df\13\u00e7\3\u00e8\3\u00e8\5\u00e8\u13e3"+
		"\n\u00e8\3\u00e8\6\u00e8\u13e6\n\u00e8\r\u00e8\16\u00e8\u13e7\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\7\u00e9\u13f1\n\u00e9"+
		"\f\u00e9\16\u00e9\u13f4\13\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00eb"+
		"\3\u00eb\3\u00ec\3\u00ec\5\u00ec\u13fe\n\u00ec\3\u00ec\3\u00ec\3\u00ec"+
		"\3\u00ec\5\u00ec\u1404\n\u00ec\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u1409\n"+
		"\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u1416\n\u00ed\5\u00ed\u1418\n\u00ed\3"+
		"\u00ed\3\u00ed\3\u00ed\5\u00ed\u141d\n\u00ed\3\u00ed\3\u00ed\3\u00ed\5"+
		"\u00ed\u1422\n\u00ed\5\u00ed\u1424\n\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ee\5\u00ee\u142b\n\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef"+
		"\5\u00ef\u1432\n\u00ef\3\u00ef\5\u00ef\u1435\n\u00ef\3\u00ef\5\u00ef\u1438"+
		"\n\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u143e\n\u00ef\3\u00ef"+
		"\3\u00ef\5\u00ef\u1442\n\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0"+
		"\u1448\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u144e\n\u00f1\3"+
		"\u00f1\3\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u145d\n\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\5\u00f4\u1462\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5"+
		"\u1468\n\u00f5\3\u00f6\3\u00f6\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u146f\n"+
		"\u00f7\5\u00f7\u1471\n\u00f7\3\u00f8\3\u00f8\5\u00f8\u1475\n\u00f8\3\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u147b\n\u00f8\3\u00f8\5\u00f8\u147e\n"+
		"\u00f8\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\5\u00fb\u1488\n\u00fb\3\u00fc\3\u00fc\5\u00fc\u148c\n\u00fc\3\u00fd\3"+
		"\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\6\u00fe\u149e\n\u00fe"+
		"\r\u00fe\16\u00fe\u149f\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff"+
		"\u14a7\n\u00ff\5\u00ff\u14a9\n\u00ff\3\u0100\3\u0100\3\u0100\6\u0100\u14ae"+
		"\n\u0100\r\u0100\16\u0100\u14af\5\u0100\u14b2\n\u0100\3\u0101\3\u0101"+
		"\5\u0101\u14b6\n\u0101\3\u0102\3\u0102\3\u0102\5\u0102\u14bb\n\u0102\3"+
		"\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\5\u0103\u14c6\n\u0103\3\u0104\3\u0104\3\u0104\5\u0104\u14cb\n\u0104\3"+
		"\u0105\3\u0105\3\u0106\3\u0106\5\u0106\u14d1\n\u0106\3\u0107\5\u0107\u14d4"+
		"\n\u0107\3\u0107\3\u0107\5\u0107\u14d8\n\u0107\3\u0107\6\u0107\u14db\n"+
		"\u0107\r\u0107\16\u0107\u14dc\3\u0107\5\u0107\u14e0\n\u0107\3\u0107\3"+
		"\u0107\5\u0107\u14e4\n\u0107\3\u0107\3\u0107\5\u0107\u14e8\n\u0107\5\u0107"+
		"\u14ea\n\u0107\3\u0108\3\u0108\3\u0109\5\u0109\u14ef\n\u0109\3\u0109\3"+
		"\u0109\3\u010a\5\u010a\u14f4\n\u010a\3\u010a\3\u010a\3\u010b\3\u010b\3"+
		"\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u1500\n\u010b\3"+
		"\u010b\5\u010b\u1503\n\u010b\3\u010c\3\u010c\5\u010c\u1507\n\u010c\3\u010c"+
		"\5\u010c\u150a\n\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u150f\n\u010c\3"+
		"\u010c\5\u010c\u1512\n\u010c\3\u010c\3\u010c\5\u010c\u1516\n\u010c\3\u010c"+
		"\3\u010c\3\u010c\5\u010c\u151b\n\u010c\3\u010c\5\u010c\u151e\n\u010c\3"+
		"\u010c\3\u010c\3\u010c\5\u010c\u1523\n\u010c\3\u010c\5\u010c\u1526\n\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u152c\n\u010c\3\u010c\5\u010c"+
		"\u152f\n\u010c\3\u010c\3\u010c\5\u010c\u1533\n\u010c\3\u010c\5\u010c\u1536"+
		"\n\u010c\3\u010c\5\u010c\u1539\n\u010c\3\u010c\3\u010c\5\u010c\u153d\n"+
		"\u010c\3\u010c\5\u010c\u1540\n\u010c\3\u010c\5\u010c\u1543\n\u010c\3\u010c"+
		"\3\u010c\5\u010c\u1547\n\u010c\3\u010c\5\u010c\u154a\n\u010c\3\u010c\5"+
		"\u010c\u154d\n\u010c\3\u010c\5\u010c\u1550\n\u010c\3\u010c\3\u010c\5\u010c"+
		"\u1554\n\u010c\3\u010c\5\u010c\u1557\n\u010c\3\u010c\5\u010c\u155a\n\u010c"+
		"\3\u010c\3\u010c\3\u010c\5\u010c\u155f\n\u010c\3\u010c\3\u010c\3\u010c"+
		"\5\u010c\u1564\n\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u1569\n\u010c\3"+
		"\u010c\5\u010c\u156c\n\u010c\3\u010c\5\u010c\u156f\n\u010c\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\7\u010d\u1575\n\u010d\f\u010d\16\u010d\u1578\13\u010d"+
		"\3\u010d\3\u010d\3\u010e\3\u010e\5\u010e\u157e\n\u010e\3\u010e\3\u010e"+
		"\5\u010e\u1582\n\u010e\3\u010e\3\u010e\3\u010e\5\u010e\u1587\n\u010e\3"+
		"\u010e\5\u010e\u158a\n\u010e\3\u010e\3\u010e\3\u010e\5\u010e\u158f\n\u010e"+
		"\3\u010e\3\u010e\5\u010e\u1593\n\u010e\5\u010e\u1595\n\u010e\3\u010f\3"+
		"\u010f\3\u010f\3\u010f\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u15a5\n\u0111\3\u0111\3\u0111"+
		"\3\u0112\3\u0112\3\u0112\7\u0112\u15ac\n\u0112\f\u0112\16\u0112\u15af"+
		"\13\u0112\3\u0113\3\u0113\3\u0113\7\u0113\u15b4\n\u0113\f\u0113\16\u0113"+
		"\u15b7\13\u0113\3\u0114\3\u0114\3\u0114\3\u0114\7\u0114\u15bd\n\u0114"+
		"\f\u0114\16\u0114\u15c0\13\u0114\3\u0114\3\u0114\3\u0115\3\u0115\3\u0115"+
		"\7\u0115\u15c7\n\u0115\f\u0115\16\u0115\u15ca\13\u0115\3\u0116\3\u0116"+
		"\3\u0116\7\u0116\u15cf\n\u0116\f\u0116\16\u0116\u15d2\13\u0116\3\u0117"+
		"\3\u0117\3\u0117\7\u0117\u15d7\n\u0117\f\u0117\16\u0117\u15da\13\u0117"+
		"\3\u0118\3\u0118\3\u0118\7\u0118\u15df\n\u0118\f\u0118\16\u0118\u15e2"+
		"\13\u0118\3\u0119\3\u0119\3\u0119\7\u0119\u15e7\n\u0119\f\u0119\16\u0119"+
		"\u15ea\13\u0119\3\u011a\3\u011a\5\u011a\u15ee\n\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\5\u011a\u15f5\n\u011a\5\u011a\u15f7\n\u011a\3"+
		"\u011b\3\u011b\3\u011b\5\u011b\u15fc\n\u011b\3\u011b\5\u011b\u15ff\n\u011b"+
		"\3\u011b\3\u011b\3\u011b\5\u011b\u1604\n\u011b\3\u011b\5\u011b\u1607\n"+
		"\u011b\3\u011c\3\u011c\5\u011c\u160b\n\u011c\3\u011d\3\u011d\3\u011d\3"+
		"\u011e\3\u011e\3\u011e\3\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\5\u011f\u1619\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1625\n\u011f\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\6\u0120\u1645\n\u0120\r\u0120\16\u0120\u1646\3\u0120\3\u0120"+
		"\5\u0120\u164b\n\u0120\3\u0120\3\u0120\3\u0120\3\u0120\6\u0120\u1651\n"+
		"\u0120\r\u0120\16\u0120\u1652\3\u0120\3\u0120\5\u0120\u1657\n\u0120\3"+
		"\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u1660\n"+
		"\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u1668\n"+
		"\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u166d\n\u0120\3\u0120\3\u0120\3"+
		"\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u1675\n\u0120\3\u0120\3\u0120\3"+
		"\u0120\5\u0120\u167a\n\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u167f\n\u0120"+
		"\5\u0120\u1681\n\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\5\u0120\u168a\n\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u168f\n"+
		"\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u1697\n"+
		"\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u169c\n\u0120\3\u0120\3\u0120\3"+
		"\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u16a4\n\u0120\3\u0120\3\u0120\3"+
		"\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u16ac\n\u0120\3\u0120\5\u0120\u16af"+
		"\n\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\5\u0120\u16b9\n\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\5\u0120\u16c4\n\u0120\3\u0121\3\u0121\3\u0121"+
		"\3\u0121\3\u0121\3\u0122\3\u0122\3\u0122\3\u0122\7\u0122\u16cf\n\u0122"+
		"\f\u0122\16\u0122\u16d2\13\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122"+
		"\5\u0122\u16d9\n\u0122\3\u0123\3\u0123\5\u0123\u16dd\n\u0123\3\u0124\3"+
		"\u0124\3\u0124\5\u0124\u16e2\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3"+
		"\u0124\3\u0124\3\u0124\5\u0124\u16eb\n\u0124\3\u0124\5\u0124\u16ee\n\u0124"+
		"\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\5\u0124\u16fa\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\5\u0124\u1702\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\7\u0124\u170a\n\u0124\f\u0124\16\u0124\u170d\13\u0124\5\u0124"+
		"\u170f\n\u0124\3\u0124\3\u0124\5\u0124\u1713\n\u0124\3\u0124\3\u0124\5"+
		"\u0124\u1717\n\u0124\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3"+
		"\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u172f"+
		"\n\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\5\u0127\u173a\n\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\5\u0127\u1741\n\u0127\7\u0127\u1743\n\u0127\f\u0127\16\u0127\u1746\13"+
		"\u0127\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u174c\n\u0128\3\u0129\3"+
		"\u0129\3\u0129\3\u0129\5\u0129\u1752\n\u0129\3\u0129\3\u0129\3\u0129\3"+
		"\u0129\7\u0129\u1758\n\u0129\f\u0129\16\u0129\u175b\13\u0129\3\u012a\3"+
		"\u012a\3\u012a\5\u012a\u1760\n\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3"+
		"\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u176a\n\u012a\3\u012a\3\u012a\3"+
		"\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\5\u012a\u1777\n\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u177d\n"+
		"\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u1783\n\u012a\3\u012a\3"+
		"\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u1793\n\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\5\u012a\u1799\n\u012a\7\u012a\u179b\n\u012a\f\u012a\16"+
		"\u012a\u179e\13\u012a\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\7\u012b"+
		"\u17ae\n\u012b\f\u012b\16\u012b\u17b1\13\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\6\u012b\u17ba\n\u012b\r\u012b\16\u012b"+
		"\u17bb\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u17cd"+
		"\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\7\u012b"+
		"\u17d6\n\u012b\f\u012b\16\u012b\u17d9\13\u012b\3\u012c\3\u012c\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\5\u012d\u17e8\n\u012d\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e"+
		"\3\u012e\3\u012e\5\u012e\u17f1\n\u012e\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\5\u012f\u17fa\n\u012f\3\u0130\3\u0130\3\u0131"+
		"\3\u0131\3\u0132\3\u0132\3\u0133\3\u0133\3\u0134\3\u0134\3\u0135\3\u0135"+
		"\3\u0136\3\u0136\3\u0137\3\u0137\3\u0137\2\5\u0250\u0252\u0254\u0138\2"+
		"\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJL"+
		"NPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e"+
		"\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6"+
		"\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be"+
		"\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6"+
		"\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee"+
		"\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106"+
		"\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e"+
		"\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136"+
		"\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e"+
		"\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166"+
		"\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e"+
		"\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196"+
		"\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae"+
		"\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6"+
		"\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de"+
		"\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6"+
		"\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e"+
		"\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226"+
		"\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e"+
		"\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256"+
		"\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\2y"+
		"\4\2$$\u0084\u0084\4\2\u01aa\u01aa\u01af\u01af\5\2>>\u008a\u008a\u009e"+
		"\u009e\5\2\'\'\u012b\u012b\u0169\u0169\6\2\'\'\u014a\u014a\u01a9\u01a9"+
		"\u01ed\u01ed\4\2\u01a1\u01a1\u03d0\u03d0\4\2EE}}\4\2\17\17\u0100\u0100"+
		"\5\2))KK\u00a1\u00a1\4\2\u0157\u0157\u01c1\u01c1\5\2\u019a\u019a\u0211"+
		"\u0211\u0217\u0217\4\2\u0131\u0131\u016d\u016d\4\2\u0112\u0112\u017b\u017b"+
		"\4\2\u0110\u0110\u0160\u0160\5\2FFJJnn\5\2\'\'\u013b\u013b\u0155\u0155"+
		"\5\2\'\'\u0137\u0137\u0271\u0271\4\2\u0207\u0207\u0225\u0225\4\2GGQQ\5"+
		"\2\u0159\u0159\u01b8\u01b8\u01ef\u01ef\4\2>>\u008a\u008a\3\2\u0116\u0117"+
		"\3\2\u03c6\u03c7\4\2\u03d0\u03d0\u03d8\u03d8\5\2\u0154\u0154\u0176\u0176"+
		"\u01a7\u01a7\4\2\'\'\u03c6\u03c7\b\2\'\'\u0121\u0121\u0123\u0123\u013b"+
		"\u013b\u0155\u0155\u01ce\u01ce\3\2\u03c7\u03c8\4\2\7\7//\4\2\r\r\u0098"+
		"\u0098\4\2\u00a9\u00a9\u0228\u0228\4\2\24\24\177\177\5\2((CC^^\4\2^^\u0125"+
		"\u0125\4\2\u011d\u011d\u0151\u0151\4\2ZZ\u01e5\u01e5\4\2((^^\4\2\b\b-"+
		"-\4\2\u00a5\u00a5\u0222\u0222\6\2\u0154\u0154\u0176\u0176\u01a6\u01a6"+
		"\u01c4\u01c4\4\2\u0154\u0154\u01a6\u01a6\4\2\16\16**\5\2;;EE\u00a3\u00a3"+
		"\4\2!!II\4\2VV\u0082\u0082\4\2\b\b-.\3\2\u01fc\u01fd\4\2\u015c\u015c\u01eb"+
		"\u01eb\4\2\u00c3\u00c3\u017e\u017e\7\2__\u0183\u0184\u0186\u0186\u018a"+
		"\u0192\u01d0\u01d0\6\2\u0180\u0181\u0185\u0185\u0187\u0188\u01d1\u01d1"+
		"\5\2``\u017f\u017f\u0189\u0189\4\2\u016f\u016f\u01fe\u01fe\4\2\u01f8\u01f8"+
		"\u01fa\u01fa\4\2\u010a\u010a\u01ff\u01ff\4\2PP\u01df\u01df\4\2//\u012f"+
		"\u012f\5\2\36\36\66\66\u009c\u009c\5\2ss\u0095\u0095\u015a\u015a\4\2\\"+
		"\\\u009f\u009f\4\2\u0119\u0119\u01f0\u01f0\4\2%%\u0224\u0224\4\2ff\u017b"+
		"\u017b\4\2\u014d\u014d\u01ca\u01ca\6\2\u00b1\u00b1\u00b3\u00b3\u00b7\u00b7"+
		"\u0208\u0208\4\2\u03a7\u03a7\u03b8\u03b8\4\2\u010b\u010b\u01d2\u01d2\4"+
		"\2==FF\b\2ss\u0095\u0095\u009a\u009a\u0146\u0146\u015a\u015a\u0224\u0224"+
		"\4\2\u01a0\u01a0\u0204\u0204\4\2\u0143\u0143\u0227\u0227\4\2ss\u015a\u015a"+
		"\5\2GGRR\u0167\u0167\5\2\u015c\u015c\u017b\u017b\u01eb\u01eb\4\2\u0204"+
		"\u0204\u0223\u0223\4\2\u0126\u0126\u01c9\u01c9\b\2\u00c3\u00c3\u0140\u0140"+
		"\u0142\u0142\u015b\u015b\u01cf\u01cf\u01f1\u01f1\4\2*+\67\67\5\2\u014d"+
		"\u014d\u01ba\u01ba\u02cc\u02cc\4\2\u0173\u0173\u0213\u0213\5\2\u03d0\u03d0"+
		"\u03d8\u03d8\u03da\u03da\3\2\u03db\u03dc\5\2\u026c\u0277\u03d0\u03d0\u03d8"+
		"\u03d9\4\2\u03c6\u03c8\u03d1\u03d1\4\288\u009b\u009b\4\2gg\u03d4\u03d4"+
		"\5\2\u00bf\u00c1\u00c9\u00cc\u01a4\u01a4\4\2\30\30\u00c0\u00c0\4\2\30"+
		"\30\u00bf\u00bf\3\2\u00ad\u00b2\4\2\u00a0\u00a0\u01ee\u01ee\4\2\u00b6"+
		"\u00b9\u0155\u0155\6\2\u00ba\u00ba\u00c5\u00c8\u00cf\u00cf\u010e\u010f"+
		"\5\2\u00bb\u00be\u00c3\u00c4\u010c\u010c\4\2\u0087\u0087\u00cd\u00cd\4"+
		"\2\u0173\u0173\u027c\u0284\4\2\u00c3\u00c3\u01a4\u01a4\4\2\u00ba\u00bb"+
		"\u00bd\u00bd\4\2\u00ed\u00ee\u00f4\u00f4\4\2\"\"\u00eb\u00ee\3\2\u00f7"+
		"\u00f8\5\2\21\21TT\u0099\u0099\4\2\u00bf\u00bf\u00c3\u00c3\5\2\16\16*"+
		"*\u0338\u0338\5\2\u00db\u00db\u00e1\u00e2\u00e7\u00e7\5\2\u00dc\u00de"+
		"\u00e3\u00e6\u00e8\u00ea\4\2\u01ad\u01ad\u01bb\u01bb\4\2ee\u03bb\u03bb"+
		"\4\2yy\u0083\u0083\5\2\b\b\u0103\u0103\u01f4\u01f4\6\2ee\u03b3\u03b3\u03b5"+
		"\u03b5\u03bb\u03bc\3\2\u03b0\u03b7\3\2\u0244\u026b\3\2\u0278\u027b\3\2"+
		"\u023b\u0243\3\2\u0233\u023a\5\2\u00ba\u00be\u00ca\u00ca\u00cd\u00cd\b"+
		"\2\u00cf\u00cf\u00fe\u0206\u0208\u0224\u0226\u022d\u0232\u0232\u0271\u0271"+
		"\f\2$$VV\u0082\u0082\u00ba\u00bc\u00be\u00be\u00df\u00df\u00f6\u00f6\u0233"+
		"\u023a\u027c\u027c\u027f\u03a6\2\u1c1d\2\u026f\3\2\2\2\4\u0280\3\2\2\2"+
		"\6\u0294\3\2\2\2\b\u0296\3\2\2\2\n\u02bb\3\2\2\2\f\u02bf\3\2\2\2\16\u02ca"+
		"\3\2\2\2\20\u02db\3\2\2\2\22\u02e0\3\2\2\2\24\u02ec\3\2\2\2\26\u0307\3"+
		"\2\2\2\30\u030d\3\2\2\2\32\u030f\3\2\2\2\34\u031b\3\2\2\2\36\u0339\3\2"+
		"\2\2 \u035d\3\2\2\2\"\u0390\3\2\2\2$\u03aa\3\2\2\2&\u03c6\3\2\2\2(\u0427"+
		"\3\2\2\2*\u0429\3\2\2\2,\u043b\3\2\2\2.\u0478\3\2\2\2\60\u048b\3\2\2\2"+
		"\62\u04c3\3\2\2\2\64\u04c5\3\2\2\2\66\u04f1\3\2\2\28\u04f7\3\2\2\2:\u04f9"+
		"\3\2\2\2<\u050e\3\2\2\2>\u0515\3\2\2\2@\u0517\3\2\2\2B\u0525\3\2\2\2D"+
		"\u0528\3\2\2\2F\u052d\3\2\2\2H\u0547\3\2\2\2J\u0557\3\2\2\2L\u0559\3\2"+
		"\2\2N\u0569\3\2\2\2P\u056b\3\2\2\2R\u059a\3\2\2\2T\u05e1\3\2\2\2V\u05e3"+
		"\3\2\2\2X\u05ff\3\2\2\2Z\u0607\3\2\2\2\\\u0625\3\2\2\2^\u06b4\3\2\2\2"+
		"`\u06b6\3\2\2\2b\u06b9\3\2\2\2d\u0703\3\2\2\2f\u071a\3\2\2\2h\u079f\3"+
		"\2\2\2j\u07a4\3\2\2\2l\u07a6\3\2\2\2n\u07b0\3\2\2\2p\u07e5\3\2\2\2r\u07f9"+
		"\3\2\2\2t\u07fb\3\2\2\2v\u081e\3\2\2\2x\u0827\3\2\2\2z\u082e\3\2\2\2|"+
		"\u0845\3\2\2\2~\u084e\3\2\2\2\u0080\u085d\3\2\2\2\u0082\u0873\3\2\2\2"+
		"\u0084\u0887\3\2\2\2\u0086\u0a0a\3\2\2\2\u0088\u0a0c\3\2\2\2\u008a\u0a13"+
		"\3\2\2\2\u008c\u0a1a\3\2\2\2\u008e\u0a31\3\2\2\2\u0090\u0a39\3\2\2\2\u0092"+
		"\u0a40\3\2\2\2\u0094\u0a47\3\2\2\2\u0096\u0a4e\3\2\2\2\u0098\u0a5a\3\2"+
		"\2\2\u009a\u0a64\3\2\2\2\u009c\u0a6b\3\2\2\2\u009e\u0a7b\3\2\2\2\u00a0"+
		"\u0a85\3\2\2\2\u00a2\u0a89\3\2\2\2\u00a4\u0a8f\3\2\2\2\u00a6\u0a9b\3\2"+
		"\2\2\u00a8\u0a9d\3\2\2\2\u00aa\u0aa4\3\2\2\2\u00ac\u0aa6\3\2\2\2\u00ae"+
		"\u0ad8\3\2\2\2\u00b0\u0b22\3\2\2\2\u00b2\u0b5d\3\2\2\2\u00b4\u0bb5\3\2"+
		"\2\2\u00b6\u0bb9\3\2\2\2\u00b8\u0bca\3\2\2\2\u00ba\u0bcc\3\2\2\2\u00bc"+
		"\u0bd4\3\2\2\2\u00be\u0bdc\3\2\2\2\u00c0\u0bde\3\2\2\2\u00c2\u0bfc\3\2"+
		"\2\2\u00c4\u0c33\3\2\2\2\u00c6\u0c3c\3\2\2\2\u00c8\u0c50\3\2\2\2\u00ca"+
		"\u0c5c\3\2\2\2\u00cc\u0c60\3\2\2\2\u00ce\u0c81\3\2\2\2\u00d0\u0c96\3\2"+
		"\2\2\u00d2\u0ca0\3\2\2\2\u00d4\u0ca4\3\2\2\2\u00d6\u0cbd\3\2\2\2\u00d8"+
		"\u0ce7\3\2\2\2\u00da\u0ce9\3\2\2\2\u00dc\u0cf8\3\2\2\2\u00de\u0d26\3\2"+
		"\2\2\u00e0\u0d30\3\2\2\2\u00e2\u0d3a\3\2\2\2\u00e4\u0d60\3\2\2\2\u00e6"+
		"\u0d62\3\2\2\2\u00e8\u0d71\3\2\2\2\u00ea\u0d77\3\2\2\2\u00ec\u0d87\3\2"+
		"\2\2\u00ee\u0d8b\3\2\2\2\u00f0\u0db1\3\2\2\2\u00f2\u0dd7\3\2\2\2\u00f4"+
		"\u0de5\3\2\2\2\u00f6\u0ded\3\2\2\2\u00f8\u0def\3\2\2\2\u00fa\u0e09\3\2"+
		"\2\2\u00fc\u0e0d\3\2\2\2\u00fe\u0e1c\3\2\2\2\u0100\u0e1e\3\2\2\2\u0102"+
		"\u0e2a\3\2\2\2\u0104\u0e2e\3\2\2\2\u0106\u0e3f\3\2\2\2\u0108\u0e50\3\2"+
		"\2\2\u010a\u0e53\3\2\2\2\u010c\u0e5d\3\2\2\2\u010e\u0e61\3\2\2\2\u0110"+
		"\u0e6b\3\2\2\2\u0112\u0e6e\3\2\2\2\u0114\u0e73\3\2\2\2\u0116\u0e87\3\2"+
		"\2\2\u0118\u0e89\3\2\2\2\u011a\u0e9a\3\2\2\2\u011c\u0ea3\3\2\2\2\u011e"+
		"\u0eac\3\2\2\2\u0120\u0eae\3\2\2\2\u0122\u0ebc\3\2\2\2\u0124\u0ec7\3\2"+
		"\2\2\u0126\u0ed0\3\2\2\2\u0128\u0ed3\3\2\2\2\u012a\u0edb\3\2\2\2\u012c"+
		"\u0ef4\3\2\2\2\u012e\u0f00\3\2\2\2\u0130\u0f03\3\2\2\2\u0132\u0f23\3\2"+
		"\2\2\u0134\u0f25\3\2\2\2\u0136\u0f27\3\2\2\2\u0138\u0f29\3\2\2\2\u013a"+
		"\u0f2b\3\2\2\2\u013c\u0f60\3\2\2\2\u013e\u0f62\3\2\2\2\u0140\u0f68\3\2"+
		"\2\2\u0142\u0f7c\3\2\2\2\u0144\u0f8a\3\2\2\2\u0146\u0f95\3\2\2\2\u0148"+
		"\u0f97\3\2\2\2\u014a\u0f9d\3\2\2\2\u014c\u0fa7\3\2\2\2\u014e\u0fab\3\2"+
		"\2\2\u0150\u0fb2\3\2\2\2\u0152\u0fb6\3\2\2\2\u0154\u0fbc\3\2\2\2\u0156"+
		"\u0fc3\3\2\2\2\u0158\u0fc9\3\2\2\2\u015a\u0fcf\3\2\2\2\u015c\u0fd4\3\2"+
		"\2\2\u015e\u1003\3\2\2\2\u0160\u1018\3\2\2\2\u0162\u1031\3\2\2\2\u0164"+
		"\u1034\3\2\2\2\u0166\u103a\3\2\2\2\u0168\u104a\3\2\2\2\u016a\u1059\3\2"+
		"\2\2\u016c\u105f\3\2\2\2\u016e\u107d\3\2\2\2\u0170\u107f\3\2\2\2\u0172"+
		"\u1086\3\2\2\2\u0174\u1092\3\2\2\2\u0176\u1098\3\2\2\2\u0178\u10b1\3\2"+
		"\2\2\u017a\u10b5\3\2\2\2\u017c\u10b9\3\2\2\2\u017e\u10c4\3\2\2\2\u0180"+
		"\u1102\3\2\2\2\u0182\u113a\3\2\2\2\u0184\u113c\3\2\2\2\u0186\u1149\3\2"+
		"\2\2\u0188\u117b\3\2\2\2\u018a\u118d\3\2\2\2\u018c\u11bf\3\2\2\2\u018e"+
		"\u11c1\3\2\2\2\u0190\u11ce\3\2\2\2\u0192\u11d9\3\2\2\2\u0194\u11f4\3\2"+
		"\2\2\u0196\u11fe\3\2\2\2\u0198\u1208\3\2\2\2\u019a\u120a\3\2\2\2\u019c"+
		"\u1214\3\2\2\2\u019e\u1217\3\2\2\2\u01a0\u1248\3\2\2\2\u01a2\u125a\3\2"+
		"\2\2\u01a4\u125c\3\2\2\2\u01a6\u1260\3\2\2\2\u01a8\u1267\3\2\2\2\u01aa"+
		"\u1270\3\2\2\2\u01ac\u1276\3\2\2\2\u01ae\u127d\3\2\2\2\u01b0\u1293\3\2"+
		"\2\2\u01b2\u1295\3\2\2\2\u01b4\u12a0\3\2\2\2\u01b6\u12a6\3\2\2\2\u01b8"+
		"\u12d4\3\2\2\2\u01ba\u136d\3\2\2\2\u01bc\u1379\3\2\2\2\u01be\u1388\3\2"+
		"\2\2\u01c0\u138e\3\2\2\2\u01c2\u13a1\3\2\2\2\u01c4\u13ab\3\2\2\2\u01c6"+
		"\u13b9\3\2\2\2\u01c8\u13bb\3\2\2\2\u01ca\u13be\3\2\2\2\u01cc\u13d4\3\2"+
		"\2\2\u01ce\u13e0\3\2\2\2\u01d0\u13e9\3\2\2\2\u01d2\u13f5\3\2\2\2\u01d4"+
		"\u13f9\3\2\2\2\u01d6\u13fb\3\2\2\2\u01d8\u1423\3\2\2\2\u01da\u142a\3\2"+
		"\2\2\u01dc\u142c\3\2\2\2\u01de\u1443\3\2\2\2\u01e0\u1449\3\2\2\2\u01e2"+
		"\u1451\3\2\2\2\u01e4\u1454\3\2\2\2\u01e6\u1461\3\2\2\2\u01e8\u1463\3\2"+
		"\2\2\u01ea\u1469\3\2\2\2\u01ec\u146b\3\2\2\2\u01ee\u1474\3\2\2\2\u01f0"+
		"\u147f\3\2\2\2\u01f2\u1481\3\2\2\2\u01f4\u1487\3\2\2\2\u01f6\u148b\3\2"+
		"\2\2\u01f8\u148d\3\2\2\2\u01fa\u148f\3\2\2\2\u01fc\u14a1\3\2\2\2\u01fe"+
		"\u14b1\3\2\2\2\u0200\u14b5\3\2\2\2\u0202\u14ba\3\2\2\2\u0204\u14c5\3\2"+
		"\2\2\u0206\u14ca\3\2\2\2\u0208\u14cc\3\2\2\2\u020a\u14d0\3\2\2\2\u020c"+
		"\u14e9\3\2\2\2\u020e\u14eb\3\2\2\2\u0210\u14ee\3\2\2\2\u0212\u14f3\3\2"+
		"\2\2\u0214\u1502\3\2\2\2\u0216\u156e\3\2\2\2\u0218\u1570\3\2\2\2\u021a"+
		"\u1594\3\2\2\2\u021c\u1596\3\2\2\2\u021e\u159a\3\2\2\2\u0220\u15a0\3\2"+
		"\2\2\u0222\u15a8\3\2\2\2\u0224\u15b0\3\2\2\2\u0226\u15b8\3\2\2\2\u0228"+
		"\u15c3\3\2\2\2\u022a\u15cb\3\2\2\2\u022c\u15d3\3\2\2\2\u022e\u15db\3\2"+
		"\2\2\u0230\u15e3\3\2\2\2\u0232\u15f6\3\2\2\2\u0234\u1606\3\2\2\2\u0236"+
		"\u160a\3\2\2\2\u0238\u160c\3\2\2\2\u023a\u160f\3\2\2\2\u023c\u1624\3\2"+
		"\2\2\u023e\u16c3\3\2\2\2\u0240\u16c5\3\2\2\2\u0242\u16d8\3\2\2\2\u0244"+
		"\u16da\3\2\2\2\u0246\u1716\3\2\2\2\u0248\u172e\3\2\2\2\u024a\u1730\3\2"+
		"\2\2\u024c\u1739\3\2\2\2\u024e\u174b\3\2\2\2\u0250\u1751\3\2\2\2\u0252"+
		"\u175c\3\2\2\2\u0254\u17cc\3\2\2\2\u0256\u17da\3\2\2\2\u0258\u17e7\3\2"+
		"\2\2\u025a\u17f0\3\2\2\2\u025c\u17f9\3\2\2\2\u025e\u17fb\3\2\2\2\u0260"+
		"\u17fd\3\2\2\2\u0262\u17ff\3\2\2\2\u0264\u1801\3\2\2\2\u0266\u1803\3\2"+
		"\2\2\u0268\u1805\3\2\2\2\u026a\u1807\3\2\2\2\u026c\u1809\3\2\2\2\u026e"+
		"\u0270\5\4\3\2\u026f\u026e\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0272\3\2"+
		"\2\2\u0271\u0273\7\u03b4\2\2\u0272\u0271\3\2\2\2\u0272\u0273\3\2\2\2\u0273"+
		"\u0274\3\2\2\2\u0274\u0275\7\2\2\3\u0275\3\3\2\2\2\u0276\u0278\5\6\4\2"+
		"\u0277\u0279\7\u03b4\2\2\u0278\u0277\3\2\2\2\u0278\u0279\3\2\2\2\u0279"+
		"\u027b\3\2\2\2\u027a\u027c\7\u03c4\2\2\u027b\u027a\3\2\2\2\u027b\u027c"+
		"\3\2\2\2\u027c\u027f\3\2\2\2\u027d\u027f\5\b\5\2\u027e\u0276\3\2\2\2\u027e"+
		"\u027d\3\2\2\2\u027f\u0282\3\2\2\2\u0280\u027e\3\2\2\2\u0280\u0281\3\2"+
		"\2\2\u0281\u028b\3\2\2\2\u0282\u0280\3\2\2\2\u0283\u0288\5\6\4\2\u0284"+
		"\u0286\7\u03b4\2\2\u0285\u0284\3\2\2\2\u0285\u0286\3\2\2\2\u0286\u0287"+
		"\3\2\2\2\u0287\u0289\7\u03c4\2\2\u0288\u0285\3\2\2\2\u0288\u0289\3\2\2"+
		"\2\u0289\u028c\3\2\2\2\u028a\u028c\5\b\5\2\u028b\u0283\3\2\2\2\u028b\u028a"+
		"\3\2\2\2\u028c\5\3\2\2\2\u028d\u0295\5\n\6\2\u028e\u0295\5\f\7\2\u028f"+
		"\u0295\5\16\b\2\u0290\u0295\5\20\t\2\u0291\u0295\5\22\n\2\u0292\u0295"+
		"\5\26\f\2\u0293\u0295\5\30\r\2\u0294\u028d\3\2\2\2\u0294\u028e\3\2\2\2"+
		"\u0294\u028f\3\2\2\2\u0294\u0290\3\2\2\2\u0294\u0291\3\2\2\2\u0294\u0292"+
		"\3\2\2\2\u0294\u0293\3\2\2\2\u0295\7\3\2\2\2\u0296\u0297\7\u03c4\2\2\u0297"+
		"\t\3\2\2\2\u0298\u02bc\5\32\16\2\u0299\u02bc\5\34\17\2\u029a\u02bc\5\36"+
		"\20\2\u029b\u02bc\5 \21\2\u029c\u02bc\5\"\22\2\u029d\u02bc\5$\23\2\u029e"+
		"\u02bc\5&\24\2\u029f\u02bc\5(\25\2\u02a0\u02bc\5*\26\2\u02a1\u02bc\5,"+
		"\27\2\u02a2\u02bc\5.\30\2\u02a3\u02bc\5\60\31\2\u02a4\u02bc\5r:\2\u02a5"+
		"\u02bc\5t;\2\u02a6\u02bc\5v<\2\u02a7\u02bc\5x=\2\u02a8\u02bc\5z>\2\u02a9"+
		"\u02bc\5|?\2\u02aa\u02bc\5~@\2\u02ab\u02bc\5\u0080A\2\u02ac\u02bc\5\u0082"+
		"B\2\u02ad\u02bc\5\u0084C\2\u02ae\u02bc\5\u0088E\2\u02af\u02bc\5\u008a"+
		"F\2\u02b0\u02bc\5\u008cG\2\u02b1\u02bc\5\u008eH\2\u02b2\u02bc\5\u0090"+
		"I\2\u02b3\u02bc\5\u0092J\2\u02b4\u02bc\5\u0094K\2\u02b5\u02bc\5\u0096"+
		"L\2\u02b6\u02bc\5\u0098M\2\u02b7\u02bc\5\u009aN\2\u02b8\u02bc\5\u009c"+
		"O\2\u02b9\u02bc\5\u009eP\2\u02ba\u02bc\5\u00a2R\2\u02bb\u0298\3\2\2\2"+
		"\u02bb\u0299\3\2\2\2\u02bb\u029a\3\2\2\2\u02bb\u029b\3\2\2\2\u02bb\u029c"+
		"\3\2\2\2\u02bb\u029d\3\2\2\2\u02bb\u029e\3\2\2\2\u02bb\u029f\3\2\2\2\u02bb"+
		"\u02a0\3\2\2\2\u02bb\u02a1\3\2\2\2\u02bb\u02a2\3\2\2\2\u02bb\u02a3\3\2"+
		"\2\2\u02bb\u02a4\3\2\2\2\u02bb\u02a5\3\2\2\2\u02bb\u02a6\3\2\2\2\u02bb"+
		"\u02a7\3\2\2\2\u02bb\u02a8\3\2\2\2\u02bb\u02a9\3\2\2\2\u02bb\u02aa\3\2"+
		"\2\2\u02bb\u02ab\3\2\2\2\u02bb\u02ac\3\2\2\2\u02bb\u02ad\3\2\2\2\u02bb"+
		"\u02ae\3\2\2\2\u02bb\u02af\3\2\2\2\u02bb\u02b0\3\2\2\2\u02bb\u02b1\3\2"+
		"\2\2\u02bb\u02b2\3\2\2\2\u02bb\u02b3\3\2\2\2\u02bb\u02b4\3\2\2\2\u02bb"+
		"\u02b5\3\2\2\2\u02bb\u02b6\3\2\2\2\u02bb\u02b7\3\2\2\2\u02bb\u02b8\3\2"+
		"\2\2\u02bb\u02b9\3\2\2\2\u02bb\u02ba\3\2\2\2\u02bc\13\3\2\2\2\u02bd\u02c0"+
		"\5\u00b4[\2\u02be\u02c0\5\u00a6T\2\u02bf\u02bd\3\2\2\2\u02bf\u02be\3\2"+
		"\2\2\u02c0\r\3\2\2\2\u02c1\u02cb\5\u0100\u0081\2\u02c2\u02cb\5\u0102\u0082"+
		"\2\u02c3\u02cb\5\u0104\u0083\2\u02c4\u02cb\5\u0106\u0084\2\u02c5\u02cb"+
		"\5\u0108\u0085\2\u02c6\u02cb\5\u010a\u0086\2\u02c7\u02cb\5\u010c\u0087"+
		"\2\u02c8\u02cb\5\u010e\u0088\2\u02c9\u02cb\5\u0110\u0089\2\u02ca\u02c1"+
		"\3\2\2\2\u02ca\u02c2\3\2\2\2\u02ca\u02c3\3\2\2\2\u02ca\u02c4\3\2\2\2\u02ca"+
		"\u02c5\3\2\2\2\u02ca\u02c6\3\2\2\2\u02ca\u02c7\3\2\2\2\u02ca\u02c8\3\2"+
		"\2\2\u02ca\u02c9\3\2\2\2\u02cb\17\3\2\2\2\u02cc\u02dc\5\u0120\u0091\2"+
		"\u02cd\u02dc\5\u0122\u0092\2\u02ce\u02dc\5\u0124\u0093\2\u02cf\u02dc\5"+
		"\u0126\u0094\2\u02d0\u02dc\5\u0128\u0095\2\u02d1\u02dc\5\u012a\u0096\2"+
		"\u02d2\u02dc\5\u012c\u0097\2\u02d3\u02dc\5\u012e\u0098\2\u02d4\u02dc\5"+
		"\u0130\u0099\2\u02d5\u02dc\5\u0148\u00a5\2\u02d6\u02dc\5\u014a\u00a6\2"+
		"\u02d7\u02dc\5\u014c\u00a7\2\u02d8\u02dc\5\u014e\u00a8\2\u02d9\u02dc\5"+
		"\u0150\u00a9\2\u02da\u02dc\5\u0152\u00aa\2\u02db\u02cc\3\2\2\2\u02db\u02cd"+
		"\3\2\2\2\u02db\u02ce\3\2\2\2\u02db\u02cf\3\2\2\2\u02db\u02d0\3\2\2\2\u02db"+
		"\u02d1\3\2\2\2\u02db\u02d2\3\2\2\2\u02db\u02d3\3\2\2\2\u02db\u02d4\3\2"+
		"\2\2\u02db\u02d5\3\2\2\2\u02db\u02d6\3\2\2\2\u02db\u02d7\3\2\2\2\u02db"+
		"\u02d8\3\2\2\2\u02db\u02d9\3\2\2\2\u02db\u02da\3\2\2\2\u02dc\21\3\2\2"+
		"\2\u02dd\u02e1\5\u0154\u00ab\2\u02de\u02e1\5\u0156\u00ac\2\u02df\u02e1"+
		"\5\u0158\u00ad\2\u02e0\u02dd\3\2\2\2\u02e0\u02de\3\2\2\2\u02e0\u02df\3"+
		"\2\2\2\u02e1\23\3\2\2\2\u02e2\u02ed\5\u015c\u00af\2\u02e3\u02ed\5\u015e"+
		"\u00b0\2\u02e4\u02ed\5\u0160\u00b1\2\u02e5\u02ed\5\u0164\u00b3\2\u02e6"+
		"\u02ed\5\u0166\u00b4\2\u02e7\u02ed\5\u0168\u00b5\2\u02e8\u02ed\5\u016c"+
		"\u00b7\2\u02e9\u02ed\5\u0162\u00b2\2\u02ea\u02ed\5\u016a\u00b6\2\u02eb"+
		"\u02ed\5\u016e\u00b8\2\u02ec\u02e2\3\2\2\2\u02ec\u02e3\3\2\2\2\u02ec\u02e4"+
		"\3\2\2\2\u02ec\u02e5\3\2\2\2\u02ec\u02e6\3\2\2\2\u02ec\u02e7\3\2\2\2\u02ec"+
		"\u02e8\3\2\2\2\u02ec\u02e9\3\2\2\2\u02ec\u02ea\3\2\2\2\u02ec\u02eb\3\2"+
		"\2\2\u02ed\25\3\2\2\2\u02ee\u0308\5\u0180\u00c1\2\u02ef\u0308\5\u0182"+
		"\u00c2\2\u02f0\u0308\5\u0184\u00c3\2\u02f1\u0308\5\u0186\u00c4\2\u02f2"+
		"\u0308\5\u0188\u00c5\2\u02f3\u0308\5\u018a\u00c6\2\u02f4\u0308\5\u018c"+
		"\u00c7\2\u02f5\u0308\5\u018e\u00c8\2\u02f6\u0308\5\u01a6\u00d4\2\u02f7"+
		"\u0308\5\u01a8\u00d5\2\u02f8\u0308\5\u01aa\u00d6\2\u02f9\u0308\5\u01ac"+
		"\u00d7\2\u02fa\u0308\5\u01ae\u00d8\2\u02fb\u0308\5\u01b2\u00da\2\u02fc"+
		"\u0308\5\u01b4\u00db\2\u02fd\u0308\5\u01b6\u00dc\2\u02fe\u0308\5\u01b8"+
		"\u00dd\2\u02ff\u0308\5\u01ba\u00de\2\u0300\u0308\5\u01c8\u00e5\2\u0301"+
		"\u0308\5\u01ca\u00e6\2\u0302\u0308\5\u01cc\u00e7\2\u0303\u0308\5\u01ce"+
		"\u00e8\2\u0304\u0308\5\u01d0\u00e9\2\u0305\u0308\5\u01d2\u00ea\2\u0306"+
		"\u0308\5\u01d4\u00eb\2\u0307\u02ee\3\2\2\2\u0307\u02ef\3\2\2\2\u0307\u02f0"+
		"\3\2\2\2\u0307\u02f1\3\2\2\2\u0307\u02f2\3\2\2\2\u0307\u02f3\3\2\2\2\u0307"+
		"\u02f4\3\2\2\2\u0307\u02f5\3\2\2\2\u0307\u02f6\3\2\2\2\u0307\u02f7\3\2"+
		"\2\2\u0307\u02f8\3\2\2\2\u0307\u02f9\3\2\2\2\u0307\u02fa\3\2\2\2\u0307"+
		"\u02fb\3\2\2\2\u0307\u02fc\3\2\2\2\u0307\u02fd\3\2\2\2\u0307\u02fe\3\2"+
		"\2\2\u0307\u02ff\3\2\2\2\u0307\u0300\3\2\2\2\u0307\u0301\3\2\2\2\u0307"+
		"\u0302\3\2\2\2\u0307\u0303\3\2\2\2\u0307\u0304\3\2\2\2\u0307\u0305\3\2"+
		"\2\2\u0307\u0306\3\2\2\2\u0308\27\3\2\2\2\u0309\u030e\5\u01de\u00f0\2"+
		"\u030a\u030e\5\u01e0\u00f1\2\u030b\u030e\5\u01e2\u00f2\2\u030c\u030e\5"+
		"\u01e4\u00f3\2\u030d\u0309\3\2\2\2\u030d\u030a\3\2\2\2\u030d\u030b\3\2"+
		"\2\2\u030d\u030c\3\2\2\2\u030e\31\3\2\2\2\u030f\u0310\7 \2\2\u0310\u0312"+
		"\t\2\2\2\u0311\u0313\5\u023a\u011e\2\u0312\u0311\3\2\2\2\u0312\u0313\3"+
		"\2\2\2\u0313\u0314\3\2\2\2\u0314\u0318\5\u0202\u0102\2\u0315\u0317\5\62"+
		"\32\2\u0316\u0315\3\2\2\2\u0317\u031a\3\2\2\2\u0318\u0316\3\2\2\2\u0318"+
		"\u0319\3\2\2\2\u0319\33\3\2\2\2\u031a\u0318\3\2\2\2\u031b\u031d\7 \2\2"+
		"\u031c\u031e\5\64\33\2\u031d\u031c\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u031f"+
		"\3\2\2\2\u031f\u0321\7\u0146\2\2\u0320\u0322\5\u023a\u011e\2\u0321\u0320"+
		"\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u0323\3\2\2\2\u0323\u0324\5\u01e8\u00f5"+
		"\2\u0324\u0325\7h\2\2\u0325\u0326\7\u01e8\2\2\u0326\u032d\5\66\34\2\u0327"+
		"\u0328\7h\2\2\u0328\u032a\7\u0122\2\2\u0329\u032b\7e\2\2\u032a\u0329\3"+
		"\2\2\2\u032a\u032b\3\2\2\2\u032b\u032c\3\2\2\2\u032c\u032e\7\u01c3\2\2"+
		"\u032d\u0327\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u0330\3\2\2\2\u032f\u0331"+
		"\5> \2\u0330\u032f\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u0334\3\2\2\2\u0332"+
		"\u0333\7\u011f\2\2\u0333\u0335\7\u03d0\2\2\u0334\u0332\3\2\2\2\u0334\u0335"+
		"\3\2\2\2\u0335\u0336\3\2\2\2\u0336\u0337\7\u0138\2\2\u0337\u0338\5\u015a"+
		"\u00ae\2\u0338\35\3\2\2\2\u0339\u033b\7 \2\2\u033a\u033c\t\3\2\2\u033b"+
		"\u033a\3\2\2\2\u033b\u033c\3\2\2\2\u033c\u033e\3\2\2\2\u033d\u033f\t\4"+
		"\2\2\u033e\u033d\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0340\3\2\2\2\u0340"+
		"\u0341\7G\2\2\u0341\u0343\5\u0202\u0102\2\u0342\u0344\5@!\2\u0343\u0342"+
		"\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u0346\7h\2\2\u0346"+
		"\u0347\5\u01ea\u00f6\2\u0347\u034b\5\u0226\u0114\2\u0348\u034a\5B\"\2"+
		"\u0349\u0348\3\2\2\2\u034a\u034d\3\2\2\2\u034b\u0349\3\2\2\2\u034b\u034c"+
		"\3\2\2\2\u034c\u035a\3\2\2\2\u034d\u034b\3\2\2\2\u034e\u0350\7\u0102\2"+
		"\2\u034f\u0351\7\u03b8\2\2\u0350\u034f\3\2\2\2\u0350\u0351\3\2\2\2\u0351"+
		"\u0352\3\2\2\2\u0352\u0359\t\5\2\2\u0353\u0355\7\\\2\2\u0354\u0356\7\u03b8"+
		"\2\2\u0355\u0354\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u0357\3\2\2\2\u0357"+
		"\u0359\t\6\2\2\u0358\u034e\3\2\2\2\u0358\u0353\3\2\2\2\u0359\u035c\3\2"+
		"\2\2\u035a\u0358\3\2\2\2\u035a\u035b\3\2\2\2\u035b\37\3\2\2\2\u035c\u035a"+
		"\3\2\2\2\u035d\u035e\7 \2\2\u035e\u035f\7\u017c\2\2\u035f\u0360\7A\2\2"+
		"\u0360\u0361\5\u0202\u0102\2\u0361\u0362\7\7\2\2\u0362\u0363\7\u0218\2"+
		"\2\u0363\u0369\7\u03d0\2\2\u0364\u0366\7\u0168\2\2\u0365\u0367\7\u03b8"+
		"\2\2\u0366\u0365\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0368\3\2\2\2\u0368"+
		"\u036a\5\u020a\u0106\2\u0369\u0364\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u0370"+
		"\3\2\2\2\u036b\u036d\7\u0219\2\2\u036c\u036e\7\u03b8\2\2\u036d\u036c\3"+
		"\2\2\2\u036d\u036e\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u0371\5\u020a\u0106"+
		"\2\u0370\u036b\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u0377\3\2\2\2\u0372\u0374"+
		"\7\u01cd\2\2\u0373\u0375\7\u03b8\2\2\u0374\u0373\3\2\2\2\u0374\u0375\3"+
		"\2\2\2\u0375\u0376\3\2\2\2\u0376\u0378\5\u020a\u0106\2\u0377\u0372\3\2"+
		"\2\2\u0377\u0378\3\2\2\2\u0378\u037e\3\2\2\2\u0379\u037b\7\u01a8\2\2\u037a"+
		"\u037c\7\u03b8\2\2\u037b\u037a\3\2\2\2\u037b\u037c\3\2\2\2\u037c\u037d"+
		"\3\2\2\2\u037d\u037f\5\u0202\u0102\2\u037e\u0379\3\2\2\2\u037e\u037f\3"+
		"\2\2\2\u037f\u0381\3\2\2\2\u0380\u0382\7\u0226\2\2\u0381\u0380\3\2\2\2"+
		"\u0381\u0382\3\2\2\2\u0382\u0388\3\2\2\2\u0383\u0385\7\u011f\2\2\u0384"+
		"\u0386\7\u03b8\2\2\u0385\u0384\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0387"+
		"\3\2\2\2\u0387\u0389\7\u03d0\2\2\u0388\u0383\3\2\2\2\u0388\u0389\3\2\2"+
		"\2\u0389\u038a\3\2\2\2\u038a\u038c\7\u0140\2\2\u038b\u038d\7\u03b8\2\2"+
		"\u038c\u038b\3\2\2\2\u038c\u038d\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u038f"+
		"\5\u01f8\u00fd\2\u038f!\3\2\2\2\u0390\u0392\7 \2\2\u0391\u0393\5\64\33"+
		"\2\u0392\u0391\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0395"+
		"\7s\2\2\u0395\u0396\5\u01e8\u00f5\2\u0396\u0398\7\u03c1\2\2\u0397\u0399"+
		"\5D#\2\u0398\u0397\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039e\3\2\2\2\u039a"+
		"\u039b\7\u03c3\2\2\u039b\u039d\5D#\2\u039c\u039a\3\2\2\2\u039d\u03a0\3"+
		"\2\2\2\u039e\u039c\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a1\3\2\2\2\u03a0"+
		"\u039e\3\2\2\2\u03a1\u03a5\7\u03c2\2\2\u03a2\u03a4\5H%\2\u03a3\u03a2\3"+
		"\2\2\2\u03a4\u03a7\3\2\2\2\u03a5\u03a3\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6"+
		"\u03a8\3\2\2\2\u03a7\u03a5\3\2\2\2\u03a8\u03a9\5\u015a\u00ae\2\u03a9#"+
		"\3\2\2\2\u03aa\u03ac\7 \2\2\u03ab\u03ad\5\64\33\2\u03ac\u03ab\3\2\2\2"+
		"\u03ac\u03ad\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03af\7\u015a\2\2\u03af"+
		"\u03b0\5\u01e8\u00f5\2\u03b0\u03b2\7\u03c1\2\2\u03b1\u03b3\5F$\2\u03b2"+
		"\u03b1\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b8\3\2\2\2\u03b4\u03b5\7\u03c3"+
		"\2\2\u03b5\u03b7\5F$\2\u03b6\u03b4\3\2\2\2\u03b7\u03ba\3\2\2\2\u03b8\u03b6"+
		"\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03bb\3\2\2\2\u03ba\u03b8\3\2\2\2\u03bb"+
		"\u03bc\7\u03c2\2\2\u03bc\u03bd\7\u01e0\2\2\u03bd\u03c1\5\u0216\u010c\2"+
		"\u03be\u03c0\5H%\2\u03bf\u03be\3\2\2\2\u03c0\u03c3\3\2\2\2\u03c1\u03bf"+
		"\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c4\3\2\2\2\u03c3\u03c1\3\2\2\2\u03c4"+
		"\u03c5\5\u015a\u00ae\2\u03c5%\3\2\2\2\u03c6\u03c7\7 \2\2\u03c7\u03c8\7"+
		"\u01ea\2\2\u03c8\u03c9\5\u0202\u0102\2\u03c9\u03ca\7<\2\2\u03ca\u03cb"+
		"\7\u012d\2\2\u03cb\u03cc\7\u022a\2\2\u03cc\u03cd\t\7\2\2\u03cd\u03ce\7"+
		"\u01b3\2\2\u03ce\u03cf\7\u03c1\2\2\u03cf\u03d4\5J&\2\u03d0\u03d1\7\u03c3"+
		"\2\2\u03d1\u03d3\5J&\2\u03d2\u03d0\3\2\2\2\u03d3\u03d6\3\2\2\2\u03d4\u03d2"+
		"\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d7\3\2\2\2\u03d6\u03d4\3\2\2\2\u03d7"+
		"\u03d8\7\u03c2\2\2\u03d8\'\3\2\2\2\u03d9\u03db\7 \2\2\u03da\u03dc\7\u0210"+
		"\2\2\u03db\u03da\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd"+
		"\u03df\7\u0095\2\2\u03de\u03e0\5\u023a\u011e\2\u03df\u03de\3\2\2\2\u03df"+
		"\u03e0\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e9\5\u01ea\u00f6\2\u03e2\u03e3"+
		"\7W\2\2\u03e3\u03ea\5\u01ea\u00f6\2\u03e4\u03e5\7\u03c1\2\2\u03e5\u03e6"+
		"\7W\2\2\u03e6\u03e7\5\u01ea\u00f6\2\u03e7\u03e8\7\u03c2\2\2\u03e8\u03ea"+
		"\3\2\2\2\u03e9\u03e2\3\2\2\2\u03e9\u03e4\3\2\2\2\u03ea\u0428\3\2\2\2\u03eb"+
		"\u03ed\7 \2\2\u03ec\u03ee\7\u0210\2\2\u03ed\u03ec\3\2\2\2\u03ed\u03ee"+
		"\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03f1\7\u0095\2\2\u03f0\u03f2\5\u023a"+
		"\u011e\2\u03f1\u03f0\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3"+
		"\u03f5\5\u01ea\u00f6\2\u03f4\u03f6\5L\'\2\u03f5\u03f4\3\2\2\2\u03f5\u03f6"+
		"\3\2\2\2\u03f6\u0401\3\2\2\2\u03f7\u03fe\5^\60\2\u03f8\u03fa\7\u03c3\2"+
		"\2\u03f9\u03f8\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fd"+
		"\5^\60\2\u03fc\u03f9\3\2\2\2\u03fd\u0400\3\2\2\2\u03fe\u03fc\3\2\2\2\u03fe"+
		"\u03ff\3\2\2\2\u03ff\u0402\3\2\2\2\u0400\u03fe\3\2\2\2\u0401\u03f7\3\2"+
		"\2\2\u0401\u0402\3\2\2\2\u0402\u0404\3\2\2\2\u0403\u0405\5b\62\2\u0404"+
		"\u0403\3\2\2\2\u0404\u0405\3\2\2\2\u0405\u0407\3\2\2\2\u0406\u0408\t\b"+
		"\2\2\u0407\u0406\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u040a\3\2\2\2\u0409"+
		"\u040b\7\r\2\2\u040a\u0409\3\2\2\2\u040a\u040b\3\2\2\2\u040b\u040c\3\2"+
		"\2\2\u040c\u040d\5\u00b4[\2\u040d\u0428\3\2\2\2\u040e\u0410\7 \2\2\u040f"+
		"\u0411\7\u0210\2\2\u0410\u040f\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0412"+
		"\3\2\2\2\u0412\u0414\7\u0095\2\2\u0413\u0415\5\u023a\u011e\2\u0414\u0413"+
		"\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u0417\5\u01ea\u00f6"+
		"\2\u0417\u0422\5L\'\2\u0418\u041f\5^\60\2\u0419\u041b\7\u03c3\2\2\u041a"+
		"\u0419\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041e\5^"+
		"\60\2\u041d\u041a\3\2\2\2\u041e\u0421\3\2\2\2\u041f\u041d\3\2\2\2\u041f"+
		"\u0420\3\2\2\2\u0420\u0423\3\2\2\2\u0421\u041f\3\2\2\2\u0422\u0418\3\2"+
		"\2\2\u0422\u0423\3\2\2\2\u0423\u0425\3\2\2\2\u0424\u0426\5b\62\2\u0425"+
		"\u0424\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u0428\3\2\2\2\u0427\u03d9\3\2"+
		"\2\2\u0427\u03eb\3\2\2\2\u0427\u040e\3\2\2\2\u0428)\3\2\2\2\u0429\u042a"+
		"\7 \2\2\u042a\u042b\7\u020f\2\2\u042b\u042c\5\u0202\u0102\2\u042c\u042d"+
		"\7\7\2\2\u042d\u042e\7\u012e\2\2\u042e\u0432\7\u03d0\2\2\u042f\u0430\7"+
		"\u0152\2\2\u0430\u0431\7\u03b8\2\2\u0431\u0433\5\u020a\u0106\2\u0432\u042f"+
		"\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0439\3\2\2\2\u0434\u0436\7\u0140\2"+
		"\2\u0435\u0437\7\u03b8\2\2\u0436\u0435\3\2\2\2\u0436\u0437\3\2\2\2\u0437"+
		"\u0438\3\2\2\2\u0438\u043a\5\u01f8\u00fd\2\u0439\u0434\3\2\2\2\u0439\u043a"+
		"\3\2\2\2\u043a+\3\2\2\2\u043b\u043c\7 \2\2\u043c\u043d\7\u020f\2\2\u043d"+
		"\u043e\5\u0202\u0102\2\u043e\u043f\7\7\2\2\u043f\u0440\7\u012e\2\2\u0440"+
		"\u0441\7\u03d0\2\2\u0441\u0442\7\u00a3\2\2\u0442\u0443\7\u017c\2\2\u0443"+
		"\u0444\7A\2\2\u0444\u044a\5\u0202\u0102\2\u0445\u0447\7\u014e\2\2\u0446"+
		"\u0448\7\u03b8\2\2\u0447\u0446\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u0449"+
		"\3\2\2\2\u0449\u044b\5\u020a\u0106\2\u044a\u0445\3\2\2\2\u044a\u044b\3"+
		"\2\2\2\u044b\u0451\3\2\2\2\u044c\u044e\7\u0168\2\2\u044d\u044f\7\u03b8"+
		"\2\2\u044e\u044d\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u0450\3\2\2\2\u0450"+
		"\u0452\5\u020a\u0106\2\u0451\u044c\3\2\2\2\u0451\u0452\3\2\2\2\u0452\u0458"+
		"\3\2\2\2\u0453\u0455\7\u0107\2\2\u0454\u0456\7\u03b8\2\2\u0455\u0454\3"+
		"\2\2\2\u0455\u0456\3\2\2\2\u0456\u0457\3\2\2\2\u0457\u0459\5\u020a\u0106"+
		"\2\u0458\u0453\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u045f\3\2\2\2\u045a\u045c"+
		"\7\u0196\2\2\u045b\u045d\7\u03b8\2\2\u045c\u045b\3\2\2\2\u045c\u045d\3"+
		"\2\2\2\u045d\u045e\3\2\2\2\u045e\u0460\5\u020a\u0106\2\u045f\u045a\3\2"+
		"\2\2\u045f\u0460\3\2\2\2\u0460\u0466\3\2\2\2\u0461\u0463\7\u01a8\2\2\u0462"+
		"\u0464\7\u03b8\2\2\u0463\u0462\3\2\2\2\u0463\u0464\3\2\2\2\u0464\u0465"+
		"\3\2\2\2\u0465\u0467\5\u0202\u0102\2\u0466\u0461\3\2\2\2\u0466\u0467\3"+
		"\2\2\2\u0467\u0469\3\2\2\2\u0468\u046a\7\u0226\2\2\u0469\u0468\3\2\2\2"+
		"\u0469\u046a\3\2\2\2\u046a\u0470\3\2\2\2\u046b\u046d\7\u011f\2\2\u046c"+
		"\u046e\7\u03b8\2\2\u046d\u046c\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u046f"+
		"\3\2\2\2\u046f\u0471\7\u03d0\2\2\u0470\u046b\3\2\2\2\u0470\u0471\3\2\2"+
		"\2\u0471\u0472\3\2\2\2\u0472\u0474\7\u0140\2\2\u0473\u0475\7\u03b8\2\2"+
		"\u0474\u0473\3\2\2\2\u0474\u0475\3\2\2\2\u0475\u0476\3\2\2\2\u0476\u0477"+
		"\5\u01f8\u00fd\2\u0477-\3\2\2\2\u0478\u047a\7 \2\2\u0479\u047b\5\64\33"+
		"\2\u047a\u0479\3\2\2\2\u047a\u047b\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u047d"+
		"\7\u009a\2\2\u047d\u047e\5\u01e8\u00f5\2\u047e\u047f\t\t\2\2\u047f\u0480"+
		"\t\n\2\2\u0480\u0481\7h\2\2\u0481\u0482\5\u01ea\u00f6\2\u0482\u0483\7"+
		":\2\2\u0483\u0484\7\60\2\2\u0484\u0487\7\u01e4\2\2\u0485\u0486\t\13\2"+
		"\2\u0486\u0488\5\u01e8\u00f5\2\u0487\u0485\3\2\2\2\u0487\u0488\3\2\2\2"+
		"\u0488\u0489\3\2\2\2\u0489\u048a\5\u015a\u00ae\2\u048a/\3\2\2\2\u048b"+
		"\u048e\7 \2\2\u048c\u048d\7l\2\2\u048d\u048f\7}\2\2\u048e\u048c\3\2\2"+
		"\2\u048e\u048f\3\2\2\2\u048f\u0493\3\2\2\2\u0490\u0491\7\u0102\2\2\u0491"+
		"\u0492\7\u03b8\2\2\u0492\u0494\t\f\2\2\u0493\u0490\3\2\2\2\u0493\u0494"+
		"\3\2\2\2\u0494\u0496\3\2\2\2\u0495\u0497\5\64\33\2\u0496\u0495\3\2\2\2"+
		"\u0496\u0497\3\2\2\2\u0497\u049b\3\2\2\2\u0498\u0499\7\u008b\2\2\u0499"+
		"\u049a\7\u01e9\2\2\u049a\u049c\t\r\2\2\u049b\u0498\3\2\2\2\u049b\u049c"+
		"\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u049e\7\u0224\2\2\u049e\u04a3\5\u01e8"+
		"\u00f5\2\u049f\u04a0\7\u03c1\2\2\u04a0\u04a1\5\u0222\u0112\2\u04a1\u04a2"+
		"\7\u03c2\2\2\u04a2\u04a4\3\2\2\2\u04a3\u049f\3\2\2\2\u04a3\u04a4\3\2\2"+
		"\2\u04a4\u04a5\3\2\2\2\u04a5\u04a6\7\r\2\2\u04a6\u04ad\5\u00b4[\2\u04a7"+
		"\u04a9\7\u00a9\2\2\u04a8\u04aa\t\16\2\2\u04a9\u04a8\3\2\2\2\u04a9\u04aa"+
		"\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab\u04ac\7\31\2\2\u04ac\u04ae\7j\2\2\u04ad"+
		"\u04a7\3\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\61\3\2\2\2\u04af\u04b1\7\'\2"+
		"\2\u04b0\u04af\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1\u04b5\3\2\2\2\u04b2\u04b3"+
		"\7\30\2\2\u04b3\u04b6\7\u0087\2\2\u04b4\u04b6\7\u02a1\2\2\u04b5\u04b2"+
		"\3\2\2\2\u04b5\u04b4\3\2\2\2\u04b6\u04b8\3\2\2\2\u04b7\u04b9\7\u03b8\2"+
		"\2\u04b8\u04b7\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04ba\3\2\2\2\u04ba\u04c4"+
		"\5\u01f4\u00fb\2\u04bb\u04bd\7\'\2\2\u04bc\u04bb\3\2\2\2\u04bc\u04bd\3"+
		"\2\2\2\u04bd\u04be\3\2\2\2\u04be\u04c0\7\32\2\2\u04bf\u04c1\7\u03b8\2"+
		"\2\u04c0\u04bf\3\2\2\2\u04c0\u04c1\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c4"+
		"\5\u01f6\u00fc\2\u04c3\u04b0\3\2\2\2\u04c3\u04bc\3\2\2\2\u04c4\63\3\2"+
		"\2\2\u04c5\u04c6\7\u0131\2\2\u04c6\u04cd\7\u03b8\2\2\u04c7\u04ce\5\u01f0"+
		"\u00f9\2\u04c8\u04cb\7\"\2\2\u04c9\u04ca\7\u03c1\2\2\u04ca\u04cc\7\u03c2"+
		"\2\2\u04cb\u04c9\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u04ce\3\2\2\2\u04cd"+
		"\u04c7\3\2\2\2\u04cd\u04c8\3\2\2\2\u04ce\65\3\2\2\2\u04cf\u04d0\7\u0104"+
		"\2\2\u04d0\u04d4\58\35\2\u04d1\u04d3\5:\36\2\u04d2\u04d1\3\2\2\2\u04d3"+
		"\u04d6\3\2\2\2\u04d4\u04d2\3\2\2\2\u04d4\u04d5\3\2\2\2\u04d5\u04f2\3\2"+
		"\2\2\u04d6\u04d4\3\2\2\2\u04d7\u04da\7\u0148\2\2\u04d8\u04db\5\u0208\u0105"+
		"\2\u04d9\u04db\5\u0250\u0129\2\u04da\u04d8\3\2\2\2\u04da\u04d9\3\2\2\2"+
		"\u04db\u04dc\3\2\2\2\u04dc\u04e5\5<\37\2\u04dd\u04de\7\u0200\2\2\u04de"+
		"\u04e2\58\35\2\u04df\u04e1\5:\36\2\u04e0\u04df\3\2\2\2\u04e1\u04e4\3\2"+
		"\2\2\u04e2\u04e0\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3\u04e6\3\2\2\2\u04e4"+
		"\u04e2\3\2\2\2\u04e5\u04dd\3\2\2\2\u04e5\u04e6\3\2\2\2\u04e6\u04ef\3\2"+
		"\2\2\u04e7\u04e8\7\u013f\2\2\u04e8\u04ec\58\35\2\u04e9\u04eb\5:\36\2\u04ea"+
		"\u04e9\3\2\2\2\u04eb\u04ee\3\2\2\2\u04ec\u04ea\3\2\2\2\u04ec\u04ed\3\2"+
		"\2\2\u04ed\u04f0\3\2\2\2\u04ee\u04ec\3\2\2\2\u04ef\u04e7\3\2\2\2\u04ef"+
		"\u04f0\3\2\2\2\u04f0\u04f2\3\2\2\2\u04f1\u04cf\3\2\2\2\u04f1\u04d7\3\2"+
		"\2\2\u04f2\67\3\2\2\2\u04f3\u04f8\7\u00ed\2\2\u04f4\u04f8\5\u020c\u0107"+
		"\2\u04f5\u04f8\5\u0208\u0105\2\u04f6\u04f8\5\u0250\u0129\2\u04f7\u04f3"+
		"\3\2\2\2\u04f7\u04f4\3\2\2\2\u04f7\u04f5\3\2\2\2\u04f7\u04f6\3\2\2\2\u04f8"+
		"9\3\2\2\2\u04f9\u04fa\7\u03b3\2\2\u04fa\u04fd\7L\2\2\u04fb\u04fe\5\u0208"+
		"\u0105\2\u04fc\u04fe\5\u0250\u0129\2\u04fd\u04fb\3\2\2\2\u04fd\u04fc\3"+
		"\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0500\5<\37\2\u0500;\3\2\2\2\u0501\u050f"+
		"\5\u0266\u0134\2\u0502\u050f\7\u00be\2\2\u0503\u050f\7\u00d0\2\2\u0504"+
		"\u050f\7\u00d1\2\2\u0505\u050f\7\u00d2\2\2\u0506\u050f\7\u00d3\2\2\u0507"+
		"\u050f\7\u00d4\2\2\u0508\u050f\7\u00d5\2\2\u0509\u050f\7\u00d6\2\2\u050a"+
		"\u050f\7\u00d7\2\2\u050b\u050f\7\u00d8\2\2\u050c\u050f\7\u00d9\2\2\u050d"+
		"\u050f\7\u00da\2\2\u050e\u0501\3\2\2\2\u050e\u0502\3\2\2\2\u050e\u0503"+
		"\3\2\2\2\u050e\u0504\3\2\2\2\u050e\u0505\3\2\2\2\u050e\u0506\3\2\2\2\u050e"+
		"\u0507\3\2\2\2\u050e\u0508\3\2\2\2\u050e\u0509\3\2\2\2\u050e\u050a\3\2"+
		"\2\2\u050e\u050b\3\2\2\2\u050e\u050c\3\2\2\2\u050e\u050d\3\2\2\2\u050f"+
		"=\3\2\2\2\u0510\u0516\7\u013c\2\2\u0511\u0516\7\u0135\2\2\u0512\u0513"+
		"\7\u0135\2\2\u0513\u0514\7h\2\2\u0514\u0516\7\u01f0\2\2\u0515\u0510\3"+
		"\2\2\2\u0515\u0511\3\2\2\2\u0515\u0512\3\2\2\2\u0516?\3\2\2\2\u0517\u0518"+
		"\7\u00a4\2\2\u0518\u0519\t\17\2\2\u0519A\3\2\2\2\u051a\u051c\7\u0174\2"+
		"\2\u051b\u051d\7\u03b8\2\2\u051c\u051b\3\2\2\2\u051c\u051d";
	private static final String _serializedATNSegment1 =
		"\3\2\2\2\u051d\u051e\3\2\2\2\u051e\u0526\5\u020a\u0106\2\u051f\u0526\5"+
		"@!\2\u0520\u0521\7\u00a9\2\2\u0521\u0522\7\u01b7\2\2\u0522\u0526\5\u0202"+
		"\u0102\2\u0523\u0524\7\u011f\2\2\u0524\u0526\7\u03d0\2\2\u0525\u051a\3"+
		"\2\2\2\u0525\u051f\3\2\2\2\u0525\u0520\3\2\2\2\u0525\u0523\3\2\2\2\u0526"+
		"C\3\2\2\2\u0527\u0529\t\20\2\2\u0528\u0527\3\2\2\2\u0528\u0529\3\2\2\2"+
		"\u0529\u052a\3\2\2\2\u052a\u052b\5\u0202\u0102\2\u052b\u052c\5\u0216\u010c"+
		"\2\u052cE\3\2\2\2\u052d\u052e\5\u0202\u0102\2\u052e\u052f\5\u0216\u010c"+
		"\2\u052fG\3\2\2\2\u0530\u0531\7\u011f\2\2\u0531\u0548\7\u03d0\2\2\u0532"+
		"\u0533\7\u0175\2\2\u0533\u0548\7\u008b\2\2\u0534\u0536\7e\2\2\u0535\u0534"+
		"\3\2\2\2\u0535\u0536\3\2\2\2\u0536\u0537\3\2\2\2\u0537\u0548\7,\2\2\u0538"+
		"\u0539\7\u0128\2\2\u0539\u0543\7\u008b\2\2\u053a\u053b\7\u01a7\2\2\u053b"+
		"\u0543\7\u008b\2\2\u053c\u053d\7w\2\2\u053d\u053e\7\u008b\2\2\u053e\u0543"+
		"\7\u012d\2\2\u053f\u0540\7c\2\2\u0540\u0541\7\u008b\2\2\u0541\u0543\7"+
		"\u012d\2\2\u0542\u0538\3\2\2\2\u0542\u053a\3\2\2\2\u0542\u053c\3\2\2\2"+
		"\u0542\u053f\3\2\2\2\u0543\u0548\3\2\2\2\u0544\u0545\7\u008b\2\2\u0545"+
		"\u0546\7\u01e9\2\2\u0546\u0548\t\r\2\2\u0547\u0530\3\2\2\2\u0547\u0532"+
		"\3\2\2\2\u0547\u0535\3\2\2\2\u0547\u0542\3\2\2\2\u0547\u0544\3\2\2\2\u0548"+
		"I\3\2\2\2\u0549\u054a\7\u0162\2\2\u054a\u0558\7\u03d0\2\2\u054b\u054c"+
		"\7$\2\2\u054c\u0558\7\u03d0\2\2\u054d\u054e\7\u021e\2\2\u054e\u0558\7"+
		"\u03d0\2\2\u054f\u0550\7\u01bb\2\2\u0550\u0558\7\u03d0\2\2\u0551\u0552"+
		"\7\u01f3\2\2\u0552\u0558\7\u03d0\2\2\u0553\u0554\7\u01b4\2\2\u0554\u0558"+
		"\7\u03d0\2\2\u0555\u0556\7\u01c0\2\2\u0556\u0558\5\u0208\u0105\2\u0557"+
		"\u0549\3\2\2\2\u0557\u054b\3\2\2\2\u0557\u054d\3\2\2\2\u0557\u054f\3\2"+
		"\2\2\u0557\u0551\3\2\2\2\u0557\u0553\3\2\2\2\u0557\u0555\3\2\2\2\u0558"+
		"K\3\2\2\2\u0559\u055a\7\u03c1\2\2\u055a\u055f\5N(\2\u055b\u055c\7\u03c3"+
		"\2\2\u055c\u055e\5N(\2\u055d\u055b\3\2\2\2\u055e\u0561\3\2\2\2\u055f\u055d"+
		"\3\2\2\2\u055f\u0560\3\2\2\2\u0560\u0562\3\2\2\2\u0561\u055f\3\2\2\2\u0562"+
		"\u0563\7\u03c2\2\2\u0563M\3\2\2\2\u0564\u0565\5\u0202\u0102\2\u0565\u0566"+
		"\5P)\2\u0566\u056a\3\2\2\2\u0567\u056a\5T+\2\u0568\u056a\5\\/\2\u0569"+
		"\u0564\3\2\2\2\u0569\u0567\3\2\2\2\u0569\u0568\3\2\2\2\u056aO\3\2\2\2"+
		"\u056b\u056f\5\u0216\u010c\2\u056c\u056e\5R*\2\u056d\u056c\3\2\2\2\u056e"+
		"\u0571\3\2\2\2\u056f\u056d\3\2\2\2\u056f\u0570\3\2\2\2\u0570Q\3\2\2\2"+
		"\u0571\u056f\3\2\2\2\u0572\u059b\5\u0212\u010a\2\u0573\u0574\7\'\2\2\u0574"+
		"\u059b\5\u0232\u011a\2\u0575\u057a\7\u0108\2\2\u0576\u0577\7h\2\2\u0577"+
		"\u0578\7\u00a1\2\2\u0578\u057a\5\u0234\u011b\2\u0579\u0575\3\2\2\2\u0579"+
		"\u0576\3\2\2\2\u057a\u059b\3\2\2\2\u057b\u057d\7r\2\2\u057c\u057b\3\2"+
		"\2\2\u057c\u057d\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u059b\7Q\2\2\u057f"+
		"\u0581\7\u009e\2\2\u0580\u0582\7Q\2\2\u0581\u0580\3\2\2\2\u0581\u0582"+
		"\3\2\2\2\u0582\u059b\3\2\2\2\u0583\u0584\7\u011f\2\2\u0584\u059b\7\u03d0"+
		"\2\2\u0585\u0586\7\u011e\2\2\u0586\u059b\t\21\2\2\u0587\u0588\7\u0206"+
		"\2\2\u0588\u059b\t\22\2\2\u0589\u059b\5V,\2\u058a\u058b\7\32\2\2\u058b"+
		"\u059b\5\u01f6\u00fc\2\u058c\u058d\7?\2\2\u058d\u058f\7\n\2\2\u058e\u058c"+
		"\3\2\2\2\u058e\u058f\3\2\2\2\u058f\u0590\3\2\2\2\u0590\u0591\7\r\2\2\u0591"+
		"\u0592\7\u03c1\2\2\u0592\u0593\5\u0250\u0129\2\u0593\u0595\7\u03c2\2\2"+
		"\u0594\u0596\t\23\2\2\u0595\u0594\3\2\2\2\u0595\u0596\3\2\2\2\u0596\u059b"+
		"\3\2\2\2\u0597\u0598\7\u00cf\2\2\u0598\u0599\7\'\2\2\u0599\u059b\7\u0222"+
		"\2\2\u059a\u0572\3\2\2\2\u059a\u0573\3\2\2\2\u059a\u0579\3\2\2\2\u059a"+
		"\u057c\3\2\2\2\u059a\u057f\3\2\2\2\u059a\u0583\3\2\2\2\u059a\u0585\3\2"+
		"\2\2\u059a\u0587\3\2\2\2\u059a\u0589\3\2\2\2\u059a\u058a\3\2\2\2\u059a"+
		"\u058e\3\2\2\2\u059a\u0597\3\2\2\2\u059bS\3\2\2\2\u059c\u059e\7\35\2\2"+
		"\u059d\u059f\5\u0202\u0102\2\u059e\u059d\3\2\2\2\u059e\u059f\3\2\2\2\u059f"+
		"\u05a1\3\2\2\2\u05a0\u059c\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1\u05a2\3\2"+
		"\2\2\u05a2\u05a3\7r\2\2\u05a3\u05a5\7Q\2\2\u05a4\u05a6\5\u0202\u0102\2"+
		"\u05a5\u05a4\3\2\2\2\u05a5\u05a6\3\2\2\2\u05a6\u05a8\3\2\2\2\u05a7\u05a9"+
		"\5@!\2\u05a8\u05a7\3\2\2\2\u05a8\u05a9\3\2\2\2\u05a9\u05aa\3\2\2\2\u05aa"+
		"\u05ae\5\u0226\u0114\2\u05ab\u05ad\5B\"\2\u05ac\u05ab\3\2\2\2\u05ad\u05b0"+
		"\3\2\2\2\u05ae\u05ac\3\2\2\2\u05ae\u05af\3\2\2\2\u05af\u05e2\3\2\2\2\u05b0"+
		"\u05ae\3\2\2\2\u05b1\u05b3\7\35\2\2\u05b2\u05b4\5\u0202\u0102\2\u05b3"+
		"\u05b2\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b6\3\2\2\2\u05b5\u05b1\3\2"+
		"\2\2\u05b5\u05b6\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05b9\7\u009e\2\2\u05b8"+
		"\u05ba\t\24\2\2\u05b9\u05b8\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u05bc\3"+
		"\2\2\2\u05bb\u05bd\5\u0202\u0102\2\u05bc\u05bb\3\2\2\2\u05bc\u05bd\3\2"+
		"\2\2\u05bd\u05bf\3\2\2\2\u05be\u05c0\5@!\2\u05bf\u05be\3\2\2\2\u05bf\u05c0"+
		"\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1\u05c5\5\u0226\u0114\2\u05c2\u05c4\5"+
		"B\"\2\u05c3\u05c2\3\2\2\2\u05c4\u05c7\3\2\2\2\u05c5\u05c3\3\2\2\2\u05c5"+
		"\u05c6\3\2\2\2\u05c6\u05e2\3\2\2\2\u05c7\u05c5\3\2\2\2\u05c8\u05ca\7\35"+
		"\2\2\u05c9\u05cb\5\u0202\u0102\2\u05ca\u05c9\3\2\2\2\u05ca\u05cb\3\2\2"+
		"\2\u05cb\u05cd\3\2\2\2\u05cc\u05c8\3\2\2\2\u05cc\u05cd\3\2\2\2\u05cd\u05ce"+
		"\3\2\2\2\u05ce\u05cf\7<\2\2\u05cf\u05d1\7Q\2\2\u05d0\u05d2\5\u0202\u0102"+
		"\2\u05d1\u05d0\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d4"+
		"\5\u0226\u0114\2\u05d4\u05d5\5V,\2\u05d5\u05e2\3\2\2\2\u05d6\u05d8\7\35"+
		"\2\2\u05d7\u05d9\5\u0202\u0102\2\u05d8\u05d7\3\2\2\2\u05d8\u05d9\3\2\2"+
		"\2\u05d9\u05db\3\2\2\2\u05da\u05d6\3\2\2\2\u05da\u05db\3\2\2\2\u05db\u05dc"+
		"\3\2\2\2\u05dc\u05dd\7\31\2\2\u05dd\u05de\7\u03c1\2\2\u05de\u05df\5\u0250"+
		"\u0129\2\u05df\u05e0\7\u03c2\2\2\u05e0\u05e2\3\2\2\2\u05e1\u05a0\3\2\2"+
		"\2\u05e1\u05b5\3\2\2\2\u05e1\u05cc\3\2\2\2\u05e1\u05da\3\2\2\2\u05e2U"+
		"\3\2\2\2\u05e3\u05e4\7x\2\2\u05e4\u05e6\5\u01ea\u00f6\2\u05e5\u05e7\5"+
		"\u0226\u0114\2\u05e6\u05e5\3\2\2\2\u05e6\u05e7\3\2\2\2\u05e7\u05ea\3\2"+
		"\2\2\u05e8\u05e9\7a\2\2\u05e9\u05eb\t\25\2\2\u05ea\u05e8\3\2\2\2\u05ea"+
		"\u05eb\3\2\2\2\u05eb\u05ed\3\2\2\2\u05ec\u05ee\5X-\2\u05ed\u05ec\3\2\2"+
		"\2\u05ed\u05ee\3\2\2\2\u05eeW\3\2\2\2\u05ef\u05f0\7h\2\2\u05f0\u05f1\7"+
		")\2\2\u05f1\u05f5\5Z.\2\u05f2\u05f3\7h\2\2\u05f3\u05f4\7\u00a1\2\2\u05f4"+
		"\u05f6\5Z.\2\u05f5\u05f2\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\u0600\3\2\2"+
		"\2\u05f7\u05f8\7h\2\2\u05f8\u05f9\7\u00a1\2\2\u05f9\u05fd\5Z.\2\u05fa"+
		"\u05fb\7h\2\2\u05fb\u05fc\7)\2\2\u05fc\u05fe\5Z.\2\u05fd\u05fa\3\2\2\2"+
		"\u05fd\u05fe\3\2\2\2\u05fe\u0600\3\2\2\2\u05ff\u05ef\3\2\2\2\u05ff\u05f7"+
		"\3\2\2\2\u0600Y\3\2\2\2\u0601\u0608\7\177\2\2\u0602\u0608\7\24\2\2\u0603"+
		"\u0604\7\u0087\2\2\u0604\u0608\7g\2\2\u0605\u0606\7\u01a7\2\2\u0606\u0608"+
		"\7\u00ff\2\2\u0607\u0601\3\2\2\2\u0607\u0602\3\2\2\2\u0607\u0603\3\2\2"+
		"\2\u0607\u0605\3\2\2\2\u0608[\3\2\2\2\u0609\u060b\t\24\2\2\u060a\u060c"+
		"\5\u0202\u0102\2\u060b\u060a\3\2\2\2\u060b\u060c\3\2\2\2\u060c\u060e\3"+
		"\2\2\2\u060d\u060f\5@!\2\u060e\u060d\3\2\2\2\u060e\u060f\3\2\2\2\u060f"+
		"\u0610\3\2\2\2\u0610\u0614\5\u0226\u0114\2\u0611\u0613\5B\"\2\u0612\u0611"+
		"\3\2\2\2\u0613\u0616\3\2\2\2\u0614\u0612\3\2\2\2\u0614\u0615\3\2\2\2\u0615"+
		"\u0626\3\2\2\2\u0616\u0614\3\2\2\2\u0617\u0619\t\26\2\2\u0618\u061a\t"+
		"\24\2\2\u0619\u0618\3\2\2\2\u0619\u061a\3\2\2\2\u061a\u061c\3\2\2\2\u061b"+
		"\u061d\5\u0202\u0102\2\u061c\u061b\3\2\2\2\u061c\u061d\3\2\2\2\u061d\u061e"+
		"\3\2\2\2\u061e\u0622\5\u0226\u0114\2\u061f\u0621\5B\"\2\u0620\u061f\3"+
		"\2\2\2\u0621\u0624\3\2\2\2\u0622\u0620\3\2\2\2\u0622\u0623\3\2\2\2\u0623"+
		"\u0626\3\2\2\2\u0624\u0622\3\2\2\2\u0625\u0609\3\2\2\2\u0625\u0617\3\2"+
		"\2\2\u0626]\3\2\2\2\u0627\u0629\7\u0140\2\2\u0628\u062a\7\u03b8\2\2\u0629"+
		"\u0628\3\2\2\2\u0629\u062a\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u06b5\5\u01f8"+
		"\u00fd\2\u062c\u062e\7\u0108\2\2\u062d\u062f\7\u03b8\2\2\u062e\u062d\3"+
		"\2\2\2\u062e\u062f\3\2\2\2\u062f\u0630\3\2\2\2\u0630\u06b5\5\u0208\u0105"+
		"\2\u0631\u0633\7\u0109\2\2\u0632\u0634\7\u03b8\2\2\u0633\u0632\3\2\2\2"+
		"\u0633\u0634\3\2\2\2\u0634\u0635\3\2\2\2\u0635\u06b5\5\u0208\u0105\2\u0636"+
		"\u0638\7\'\2\2\u0637\u0636\3\2\2\2\u0637\u0638\3\2\2\2\u0638\u063c\3\2"+
		"\2\2\u0639\u063a\7\30\2\2\u063a\u063d\7\u0087\2\2\u063b\u063d\7\u02a1"+
		"\2\2\u063c\u0639\3\2\2\2\u063c\u063b\3\2\2\2\u063d\u063f\3\2\2\2\u063e"+
		"\u0640\7\u03b8\2\2\u063f\u063e\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u0641"+
		"\3\2\2\2\u0641\u06b5\5\u01f4\u00fb\2\u0642\u0644\t\27\2\2\u0643\u0645"+
		"\7\u03b8\2\2\u0644\u0643\3\2\2\2\u0644\u0645\3\2\2\2\u0645\u0646\3\2\2"+
		"\2\u0646\u06b5\t\30\2\2\u0647\u0649\7\'\2\2\u0648\u0647\3\2\2\2\u0648"+
		"\u0649\3\2\2\2\u0649\u064a\3\2\2\2\u064a\u064c\7\32\2\2\u064b\u064d\7"+
		"\u03b8\2\2\u064c\u064b\3\2\2\2\u064c\u064d\3\2\2\2\u064d\u064e\3\2\2\2"+
		"\u064e\u06b5\5\u01f6\u00fc\2\u064f\u0651\7\u011f\2\2\u0650\u0652\7\u03b8"+
		"\2\2\u0651\u0650\3\2\2\2\u0651\u0652\3\2\2\2\u0652\u0653\3\2\2\2\u0653"+
		"\u06b5\7\u03d0\2\2\u0654\u0656\7\u0124\2\2\u0655\u0657\7\u03b8\2\2\u0656"+
		"\u0655\3\2\2\2\u0656\u0657\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u06b5\t\31"+
		"\2\2\u0659\u065b\7\u0126\2\2\u065a\u065c\7\u03b8\2\2\u065b\u065a\3\2\2"+
		"\2\u065b\u065c\3\2\2\2\u065c\u065d\3\2\2\2\u065d\u06b5\7\u03d0\2\2\u065e"+
		"\u065f\7\u012d\2\2\u065f\u0661\7\u0134\2\2\u0660\u0662\7\u03b8\2\2\u0661"+
		"\u0660\3\2\2\2\u0661\u0662\3\2\2\2\u0662\u0663\3\2\2\2\u0663\u06b5\7\u03d0"+
		"\2\2\u0664\u0666\7\u0132\2\2\u0665\u0667\7\u03b8\2\2\u0666\u0665\3\2\2"+
		"\2\u0666\u0667\3\2\2\2\u0667\u0668\3\2\2\2\u0668\u06b5\t\30\2\2\u0669"+
		"\u066b\7\u013d\2\2\u066a\u066c\7\u03b8\2\2\u066b\u066a\3\2\2\2\u066b\u066c"+
		"\3\2\2\2\u066c\u066d\3\2\2\2\u066d\u06b5\7\u03d0\2\2\u066e\u066f\7G\2"+
		"\2\u066f\u0671\7\u0134\2\2\u0670\u0672\7\u03b8\2\2\u0671\u0670\3\2\2\2"+
		"\u0671\u0672\3\2\2\2\u0672\u0673\3\2\2\2\u0673\u06b5\7\u03d0\2\2\u0674"+
		"\u0676\7\u016a\2\2\u0675\u0677\7\u03b8\2\2\u0676\u0675\3\2\2\2\u0676\u0677"+
		"\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u06b5\t\32\2\2\u0679\u067b\7\u0174"+
		"\2\2\u067a\u067c\7\u03b8\2\2\u067b\u067a\3\2\2\2\u067b\u067c\3\2\2\2\u067c"+
		"\u067d\3\2\2\2\u067d\u06b5\5\u020a\u0106\2\u067e\u0680\7\u0195\2\2\u067f"+
		"\u0681\7\u03b8\2\2\u0680\u067f\3\2\2\2\u0680\u0681\3\2\2\2\u0681\u0682"+
		"\3\2\2\2\u0682\u06b5\5\u0208\u0105\2\u0683\u0685\7\u019d\2\2\u0684\u0686"+
		"\7\u03b8\2\2\u0685\u0684\3\2\2\2\u0685\u0686\3\2\2\2\u0686\u0687\3\2\2"+
		"\2\u0687\u06b5\5\u0208\u0105\2\u0688\u068a\7\u01b5\2\2\u0689\u068b\7\u03b8"+
		"\2\2\u068a\u0689\3\2\2\2\u068a\u068b\3\2\2\2\u068b\u068c\3\2\2\2\u068c"+
		"\u06b5\t\33\2\2\u068d\u068f\7\u01bb\2\2\u068e\u0690\7\u03b8\2\2\u068f"+
		"\u068e\3\2\2\2\u068f\u0690\3\2\2\2\u0690\u0691\3\2\2\2\u0691\u06b5\7\u03d0"+
		"\2\2\u0692\u0694\7\u01e6\2\2\u0693\u0695\7\u03b8\2\2\u0694\u0693\3\2\2"+
		"\2\u0694\u0695\3\2\2\2\u0695\u0696\3\2\2\2\u0696\u06b5\t\34\2\2\u0697"+
		"\u0699\7\u0201\2\2\u0698\u069a\7\u03b8\2\2\u0699\u0698\3\2\2\2\u0699\u069a"+
		"\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u06b5\t\33\2\2\u069c\u069e\7\u0202"+
		"\2\2\u069d\u069f\7\u03b8\2\2\u069e\u069d\3\2\2\2\u069e\u069f\3\2\2\2\u069f"+
		"\u06a0\3\2\2\2\u06a0\u06b5\t\33\2\2\u06a1\u06a3\7\u0203\2\2\u06a2\u06a4"+
		"\7\u03b8\2\2\u06a3\u06a2\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a5\3\2\2"+
		"\2\u06a5\u06b5\5\u0208\u0105\2\u06a6\u06a7\7\u020f\2\2\u06a7\u06a9\5\u0202"+
		"\u0102\2\u06a8\u06aa\5`\61\2\u06a9\u06a8\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa"+
		"\u06b5\3\2\2\2\u06ab\u06b5\5`\61\2\u06ac\u06ae\7\u009d\2\2\u06ad\u06af"+
		"\7\u03b8\2\2\u06ae\u06ad\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u06b0\3\2\2"+
		"\2\u06b0\u06b1\7\u03c1\2\2\u06b1\u06b2\5\u0224\u0113\2\u06b2\u06b3\7\u03c2"+
		"\2\2\u06b3\u06b5\3\2\2\2\u06b4\u0627\3\2\2\2\u06b4\u062c\3\2\2\2\u06b4"+
		"\u0631\3\2\2\2\u06b4\u0637\3\2\2\2\u06b4\u0642\3\2\2\2\u06b4\u0648\3\2"+
		"\2\2\u06b4\u064f\3\2\2\2\u06b4\u0654\3\2\2\2\u06b4\u0659\3\2\2\2\u06b4"+
		"\u065e\3\2\2\2\u06b4\u0664\3\2\2\2\u06b4\u0669\3\2\2\2\u06b4\u066e\3\2"+
		"\2\2\u06b4\u0674\3\2\2\2\u06b4\u0679\3\2\2\2\u06b4\u067e\3\2\2\2\u06b4"+
		"\u0683\3\2\2\2\u06b4\u0688\3\2\2\2\u06b4\u068d\3\2\2\2\u06b4\u0692\3\2"+
		"\2\2\u06b4\u0697\3\2\2\2\u06b4\u069c\3\2\2\2\u06b4\u06a1\3\2\2\2\u06b4"+
		"\u06a6\3\2\2\2\u06b4\u06ab\3\2\2\2\u06b4\u06ac\3\2\2\2\u06b5_\3\2\2\2"+
		"\u06b6\u06b7\7\u0206\2\2\u06b7\u06b8\t\22\2\2\u06b8a\3\2\2\2\u06b9\u06ba"+
		"\7q\2\2\u06ba\u06bb\7\22\2\2\u06bb\u06be\5d\63\2\u06bc\u06bd\7\u01ba\2"+
		"\2\u06bd\u06bf\5\u0208\u0105\2\u06be\u06bc\3\2\2\2\u06be\u06bf\3\2\2\2"+
		"\u06bf\u06c7\3\2\2\2\u06c0\u06c1\7\u020a\2\2\u06c1\u06c2\7\22\2\2\u06c2"+
		"\u06c5\5f\64\2\u06c3\u06c4\7\u020b\2\2\u06c4\u06c6\5\u0208\u0105\2\u06c5"+
		"\u06c3\3\2\2\2\u06c5\u06c6\3\2\2\2\u06c6\u06c8\3\2\2\2\u06c7\u06c0\3\2"+
		"\2\2\u06c7\u06c8\3\2\2\2\u06c8\u06d4\3\2\2\2\u06c9\u06ca\7\u03c1\2\2\u06ca"+
		"\u06cf\5h\65\2\u06cb\u06cc\7\u03c3\2\2\u06cc\u06ce\5h\65\2\u06cd\u06cb"+
		"\3\2\2\2\u06ce\u06d1\3\2\2\2\u06cf\u06cd\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0"+
		"\u06d2\3\2\2\2\u06d1\u06cf\3\2\2\2\u06d2\u06d3\7\u03c2\2\2\u06d3\u06d5"+
		"\3\2\2\2\u06d4\u06c9\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5c\3\2\2\2\u06d6"+
		"\u06d8\7Y\2\2\u06d7\u06d6\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06d9\3\2"+
		"\2\2\u06d9\u06da\7\u0160\2\2\u06da\u06db\7\u03c1\2\2\u06db\u06dc\5\u0250"+
		"\u0129\2\u06dc\u06dd\7\u03c2\2\2\u06dd\u0704\3\2\2\2\u06de\u06e0\7Y\2"+
		"\2\u06df\u06de\3\2\2\2\u06df\u06e0\3\2\2\2\u06e0\u06e1\3\2\2\2\u06e1\u06e5"+
		"\7Q\2\2\u06e2\u06e3\7\u0102\2\2\u06e3\u06e4\7\u03b8\2\2\u06e4\u06e6\t"+
		"\35\2\2\u06e5\u06e2\3\2\2\2\u06e5\u06e6\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7"+
		"\u06e8\7\u03c1\2\2\u06e8\u06e9\5\u0222\u0112\2\u06e9\u06ea\7\u03c2\2\2"+
		"\u06ea\u0704\3\2\2\2\u06eb\u06f5\7u\2\2\u06ec\u06ed\7\u03c1\2\2\u06ed"+
		"\u06ee\5\u0250\u0129\2\u06ee\u06ef\7\u03c2\2\2\u06ef\u06f6\3\2\2\2\u06f0"+
		"\u06f1\7\u011d\2\2\u06f1\u06f2\7\u03c1\2\2\u06f2\u06f3\5\u0222\u0112\2"+
		"\u06f3\u06f4\7\u03c2\2\2\u06f4\u06f6\3\2\2\2\u06f5\u06ec\3\2\2\2\u06f5"+
		"\u06f0\3\2\2\2\u06f6\u0704\3\2\2\2\u06f7\u0701\7\u017a\2\2\u06f8\u06f9"+
		"\7\u03c1\2\2\u06f9\u06fa\5\u0250\u0129\2\u06fa\u06fb\7\u03c2\2\2\u06fb"+
		"\u0702\3\2\2\2\u06fc\u06fd\7\u011d\2\2\u06fd\u06fe\7\u03c1\2\2\u06fe\u06ff"+
		"\5\u0222\u0112\2\u06ff\u0700\7\u03c2\2\2\u0700\u0702\3\2\2\2\u0701\u06f8"+
		"\3\2\2\2\u0701\u06fc\3\2\2\2\u0702\u0704\3\2\2\2\u0703\u06d7\3\2\2\2\u0703"+
		"\u06df\3\2\2\2\u0703\u06eb\3\2\2\2\u0703\u06f7\3\2\2\2\u0704e\3\2\2\2"+
		"\u0705\u0707\7Y\2\2\u0706\u0705\3\2\2\2\u0706\u0707\3\2\2\2\u0707\u0708"+
		"\3\2\2\2\u0708\u0709\7\u0160\2\2\u0709\u070a\7\u03c1\2\2\u070a\u070b\5"+
		"\u0250\u0129\2\u070b\u070c\7\u03c2\2\2\u070c\u071b\3\2\2\2\u070d\u070f"+
		"\7Y\2\2\u070e\u070d\3\2\2\2\u070e\u070f\3\2\2\2\u070f\u0710\3\2\2\2\u0710"+
		"\u0714\7Q\2\2\u0711\u0712\7\u0102\2\2\u0712\u0713\7\u03b8\2\2\u0713\u0715"+
		"\t\35\2\2\u0714\u0711\3\2\2\2\u0714\u0715\3\2\2\2\u0715\u0716\3\2\2\2"+
		"\u0716\u0717\7\u03c1\2\2\u0717\u0718\5\u0222\u0112\2\u0718\u0719\7\u03c2"+
		"\2\2\u0719\u071b\3\2\2\2\u071a\u0706\3\2\2\2\u071a\u070e\3\2\2\2\u071b"+
		"g\3\2\2\2\u071c\u071d\7q\2\2\u071d\u071e\5\u0202\u0102\2\u071e\u071f\7"+
		"\u00a5\2\2\u071f\u0720\7\u0178\2\2\u0720\u0721\7\u0212\2\2\u0721\u0722"+
		"\7\u03c1\2\2\u0722\u0727\5j\66\2\u0723\u0724\7\u03c3\2\2\u0724\u0726\5"+
		"j\66\2\u0725\u0723\3\2\2\2\u0726\u0729\3\2\2\2\u0727\u0725\3\2\2\2\u0727"+
		"\u0728\3\2\2\2\u0728\u072a\3\2\2\2\u0729\u0727\3\2\2\2\u072a\u072e\7\u03c2"+
		"\2\2\u072b\u072d\5p9\2\u072c\u072b\3\2\2\2\u072d\u0730\3\2\2\2\u072e\u072c"+
		"\3\2\2\2\u072e\u072f\3\2\2\2\u072f\u0739\3\2\2\2\u0730\u072e\3\2\2\2\u0731"+
		"\u0736\5n8\2\u0732\u0733\7\u03c3\2\2\u0733\u0735\5n8\2\u0734\u0732\3\2"+
		"\2\2\u0735\u0738\3\2\2\2\u0736\u0734\3\2\2\2\u0736\u0737\3\2\2\2\u0737"+
		"\u073a\3\2\2\2\u0738\u0736\3\2\2\2\u0739\u0731\3\2\2\2\u0739\u073a\3\2"+
		"\2\2\u073a\u07a0\3\2\2\2\u073b\u073c\7q\2\2\u073c\u073d\5\u0202\u0102"+
		"\2\u073d\u073e\7\u00a5\2\2\u073e\u073f\7\u0178\2\2\u073f\u0740\7\u0212"+
		"\2\2\u0740\u0744\5j\66\2\u0741\u0743\5p9\2\u0742\u0741\3\2\2\2\u0743\u0746"+
		"\3\2\2\2\u0744\u0742\3\2\2\2\u0744\u0745\3\2\2\2\u0745\u074f\3\2\2\2\u0746"+
		"\u0744\3\2\2\2\u0747\u074c\5n8\2\u0748\u0749\7\u03c3\2\2\u0749\u074b\5"+
		"n8\2\u074a\u0748\3\2\2\2\u074b\u074e\3\2\2\2\u074c\u074a\3\2\2\2\u074c"+
		"\u074d\3\2\2\2\u074d\u0750\3\2\2\2\u074e\u074c\3\2\2\2\u074f\u0747\3\2"+
		"\2\2\u074f\u0750\3\2\2\2\u0750\u07a0\3\2\2\2\u0751\u0752\7q\2\2\u0752"+
		"\u0753\5\u0202\u0102\2\u0753\u0754\7\u00a5\2\2\u0754\u0755\7F\2\2\u0755"+
		"\u0756\7\u03c1\2\2\u0756\u075b\5j\66\2\u0757\u0758\7\u03c3\2\2\u0758\u075a"+
		"\5j\66\2\u0759\u0757\3\2\2\2\u075a\u075d\3\2\2\2\u075b\u0759\3\2\2\2\u075b"+
		"\u075c\3\2\2\2\u075c\u075e\3\2\2\2\u075d\u075b\3\2\2\2\u075e\u0762\7\u03c2"+
		"\2\2\u075f\u0761\5p9\2\u0760\u075f\3\2\2\2\u0761\u0764\3\2\2\2\u0762\u0760"+
		"\3\2\2\2\u0762\u0763\3\2\2\2\u0763\u076d\3\2\2\2\u0764\u0762\3\2\2\2\u0765"+
		"\u076a\5n8\2\u0766\u0767\7\u03c3\2\2\u0767\u0769\5n8\2\u0768\u0766\3\2"+
		"\2\2\u0769\u076c\3\2\2\2\u076a\u0768\3\2\2\2\u076a\u076b\3\2\2\2\u076b"+
		"\u076e\3\2\2\2\u076c\u076a\3\2\2\2\u076d\u0765\3\2\2\2\u076d\u076e\3\2"+
		"\2\2\u076e\u07a0\3\2\2\2\u076f\u0770\7q\2\2\u0770\u0771\5\u0202\u0102"+
		"\2\u0771\u0772\7\u00a5\2\2\u0772\u0773\7F\2\2\u0773\u0774\7\u03c1\2\2"+
		"\u0774\u0779\5l\67\2\u0775\u0776\7\u03c3\2\2\u0776\u0778\5l\67\2\u0777"+
		"\u0775\3\2\2\2\u0778\u077b\3\2\2\2\u0779\u0777\3\2\2\2\u0779\u077a\3\2"+
		"\2\2\u077a\u077c\3\2\2\2\u077b\u0779\3\2\2\2\u077c\u0780\7\u03c2\2\2\u077d"+
		"\u077f\5p9\2\u077e\u077d\3\2\2\2\u077f\u0782\3\2\2\2\u0780\u077e\3\2\2"+
		"\2\u0780\u0781\3\2\2\2\u0781\u078b\3\2\2\2\u0782\u0780\3\2\2\2\u0783\u0788"+
		"\5n8\2\u0784\u0785\7\u03c3\2\2\u0785\u0787\5n8\2\u0786\u0784\3\2\2\2\u0787"+
		"\u078a\3\2\2\2\u0788\u0786\3\2\2\2\u0788\u0789\3\2\2\2\u0789\u078c\3\2"+
		"\2\2\u078a\u0788\3\2\2\2\u078b\u0783\3\2\2\2\u078b\u078c\3\2\2\2\u078c"+
		"\u07a0\3\2\2\2\u078d\u078e\7q\2\2\u078e\u0792\5\u0202\u0102\2\u078f\u0791"+
		"\5p9\2\u0790\u078f\3\2\2\2\u0791\u0794\3\2\2\2\u0792\u0790\3\2\2\2\u0792"+
		"\u0793\3\2\2\2\u0793\u079d\3\2\2\2\u0794\u0792\3\2\2\2\u0795\u079a\5n"+
		"8\2\u0796\u0797\7\u03c3\2\2\u0797\u0799\5n8\2\u0798\u0796\3\2\2\2\u0799"+
		"\u079c\3\2\2\2\u079a\u0798\3\2\2\2\u079a\u079b\3\2\2\2\u079b\u079e\3\2"+
		"\2\2\u079c\u079a\3\2\2\2\u079d\u0795\3\2\2\2\u079d\u079e\3\2\2\2\u079e"+
		"\u07a0\3\2\2\2\u079f\u071c\3\2\2\2\u079f\u073b\3\2\2\2\u079f\u0751\3\2"+
		"\2\2\u079f\u076f\3\2\2\2\u079f\u078d\3\2\2\2\u07a0i\3\2\2\2\u07a1\u07a5"+
		"\5\u0214\u010b\2\u07a2\u07a5\5\u0250\u0129\2\u07a3\u07a5\7b\2\2\u07a4"+
		"\u07a1\3\2\2\2\u07a4\u07a2\3\2\2\2\u07a4\u07a3\3\2\2\2\u07a5k\3\2\2\2"+
		"\u07a6\u07a7\7\u03c1\2\2\u07a7\u07aa\5j\66\2\u07a8\u07a9\7\u03c3\2\2\u07a9"+
		"\u07ab\5j\66\2\u07aa\u07a8\3\2\2\2\u07ab\u07ac\3\2\2\2\u07ac\u07aa\3\2"+
		"\2\2\u07ac\u07ad\3\2\2\2\u07ad\u07ae\3\2\2\2\u07ae\u07af\7\u03c2\2\2\u07af"+
		"m\3\2\2\2\u07b0\u07b1\7\u020a\2\2\u07b1\u07b5\5\u0202\u0102\2\u07b2\u07b4"+
		"\5p9\2\u07b3\u07b2\3\2\2\2\u07b4\u07b7\3\2\2\2\u07b5\u07b3\3\2\2\2\u07b5"+
		"\u07b6\3\2\2\2\u07b6o\3\2\2\2\u07b7\u07b5\3\2\2\2\u07b8\u07ba\7\u0206"+
		"\2\2\u07b9\u07b8\3\2\2\2\u07b9\u07ba\3\2\2\2\u07ba\u07bb\3\2\2\2\u07bb"+
		"\u07bd\7\u0140\2\2\u07bc\u07be\7\u03b8\2\2\u07bd\u07bc\3\2\2\2\u07bd\u07be"+
		"\3\2\2\2\u07be\u07bf\3\2\2\2\u07bf\u07e6\5\u01f8\u00fd\2\u07c0\u07c2\7"+
		"\u011f\2\2\u07c1\u07c3\7\u03b8\2\2\u07c2\u07c1\3\2\2\2\u07c2\u07c3\3\2"+
		"\2\2\u07c3\u07c4\3\2\2\2\u07c4\u07e6\7\u03d0\2\2\u07c5\u07c6\7\u012d\2"+
		"\2\u07c6\u07c8\7\u0134\2\2\u07c7\u07c9\7\u03b8\2\2\u07c8\u07c7\3\2\2\2"+
		"\u07c8\u07c9\3\2\2\2\u07c9\u07ca\3\2\2\2\u07ca\u07e6\7\u03d0\2\2\u07cb"+
		"\u07cc\7G\2\2\u07cc\u07ce\7\u0134\2\2\u07cd\u07cf\7\u03b8\2\2\u07ce\u07cd"+
		"\3\2\2\2\u07ce\u07cf\3\2\2\2\u07cf\u07d0\3\2\2\2\u07d0\u07e6\7\u03d0\2"+
		"\2\u07d1\u07d3\7\u0195\2\2\u07d2\u07d4\7\u03b8\2\2\u07d3\u07d2\3\2\2\2"+
		"\u07d3\u07d4\3\2\2\2\u07d4\u07d5\3\2\2\2\u07d5\u07e6\5\u0208\u0105\2\u07d6"+
		"\u07d8\7\u019d\2\2\u07d7\u07d9\7\u03b8\2\2\u07d8\u07d7\3\2\2\2\u07d8\u07d9"+
		"\3\2\2\2\u07d9\u07da\3\2\2\2\u07da\u07e6\5\u0208\u0105\2\u07db\u07dd\7"+
		"\u020f\2\2\u07dc\u07de\7\u03b8\2\2\u07dd\u07dc\3\2\2\2\u07dd\u07de\3\2"+
		"\2\2\u07de\u07df\3\2\2\2\u07df\u07e6\5\u0202\u0102\2\u07e0\u07e2\7\u01a8"+
		"\2\2\u07e1\u07e3\7\u03b8\2\2\u07e2\u07e1\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3"+
		"\u07e4\3\2\2\2\u07e4\u07e6\5\u0202\u0102\2\u07e5\u07b9\3\2\2\2\u07e5\u07c0"+
		"\3\2\2\2\u07e5\u07c5\3\2\2\2\u07e5\u07cb\3\2\2\2\u07e5\u07d1\3\2\2\2\u07e5"+
		"\u07d6\3\2\2\2\u07e5\u07db\3\2\2\2\u07e5\u07e0\3\2\2\2\u07e6q\3\2\2\2"+
		"\u07e7\u07e8\7\t\2\2\u07e8\u07ea\t\2\2\2\u07e9\u07eb\5\u0202\u0102\2\u07ea"+
		"\u07e9\3\2\2\2\u07ea\u07eb\3\2\2\2\u07eb\u07ed\3\2\2\2\u07ec\u07ee\5\62"+
		"\32\2\u07ed\u07ec\3\2\2\2\u07ee\u07ef\3\2\2\2\u07ef\u07ed\3\2\2\2\u07ef"+
		"\u07f0\3\2\2\2\u07f0\u07fa\3\2\2\2\u07f1\u07f2\7\t\2\2\u07f2\u07f3\t\2"+
		"\2\2\u07f3\u07f4\5\u0202\u0102\2\u07f4\u07f5\7\u021d\2\2\u07f5\u07f6\7"+
		"\u012d\2\2\u07f6\u07f7\7\u0134\2\2\u07f7\u07f8\7\u01a2\2\2\u07f8\u07fa"+
		"\3\2\2\2\u07f9\u07e7\3\2\2\2\u07f9\u07f1\3\2\2\2\u07fas\3\2\2\2\u07fb"+
		"\u07fd\7\t\2\2\u07fc\u07fe\5\64\33\2\u07fd\u07fc\3\2\2\2\u07fd\u07fe\3"+
		"\2\2\2\u07fe\u07ff\3\2\2\2\u07ff\u0800\7\u0146\2\2\u0800\u0804\5\u01e8"+
		"\u00f5\2\u0801\u0802\7h\2\2\u0802\u0803\7\u01e8\2\2\u0803\u0805\5\66\34"+
		"\2\u0804\u0801\3\2\2\2\u0804\u0805\3\2\2\2\u0805\u080c\3\2\2\2\u0806\u0807"+
		"\7h\2\2\u0807\u0809\7\u0122\2\2\u0808\u080a\7e\2\2\u0809\u0808\3\2\2\2"+
		"\u0809\u080a\3\2\2\2\u080a\u080b\3\2\2\2\u080b\u080d\7\u01c3\2\2\u080c"+
		"\u0806\3\2\2\2\u080c\u080d\3\2\2\2\u080d\u0811\3\2\2\2\u080e\u080f\7{"+
		"\2\2\u080f\u0810\7\u0098\2\2\u0810\u0812\5\u01e8\u00f5\2\u0811\u080e\3"+
		"\2\2\2\u0811\u0812\3\2\2\2\u0812\u0814\3\2\2\2\u0813\u0815\5> \2\u0814"+
		"\u0813\3\2\2\2\u0814\u0815\3\2\2\2\u0815\u0818\3\2\2\2\u0816\u0817\7\u011f"+
		"\2\2\u0817\u0819\7\u03d0\2\2\u0818\u0816\3\2\2\2\u0818\u0819\3\2\2\2\u0819"+
		"\u081c\3\2\2\2\u081a\u081b\7\u0138\2\2\u081b\u081d\5\u015a\u00ae\2\u081c"+
		"\u081a\3\2\2\2\u081c\u081d\3\2\2\2\u081du\3\2\2\2\u081e\u081f\7\t\2\2"+
		"\u081f\u0820\7\u015a\2\2\u0820\u0824\5\u01e8\u00f5\2\u0821\u0823\5H%\2"+
		"\u0822\u0821\3\2\2\2\u0823\u0826\3\2\2\2\u0824\u0822\3\2\2\2\u0824\u0825"+
		"\3\2\2\2\u0825w\3\2\2\2\u0826\u0824\3\2\2\2\u0827\u0828\7\t\2\2\u0828"+
		"\u0829\7\u016c\2\2\u0829\u082a\7\u01e3\2\2\u082a\u082b\7\u0270\2\2\u082b"+
		"\u082c\7\u017e\2\2\u082c\u082d\7Q\2\2\u082dy\3\2\2\2\u082e\u082f\7\t\2"+
		"\2\u082f\u0830\7\u017c\2\2\u0830\u0831\7A\2\2\u0831\u0832\5\u0202\u0102"+
		"\2\u0832\u0833\7\7\2\2\u0833\u0834\7\u0218\2\2\u0834\u083a\7\u03d0\2\2"+
		"\u0835\u0837\7\u0168\2\2\u0836\u0838\7\u03b8\2\2\u0837\u0836\3\2\2\2\u0837"+
		"\u0838\3\2\2\2\u0838\u0839\3\2\2\2\u0839\u083b\5\u020a\u0106\2\u083a\u0835"+
		"\3\2\2\2\u083a\u083b\3\2\2\2\u083b\u083d\3\2\2\2\u083c\u083e\7\u0226\2"+
		"\2\u083d\u083c\3\2\2\2\u083d\u083e\3\2\2\2\u083e\u083f\3\2\2\2\u083f\u0841"+
		"\7\u0140\2\2\u0840\u0842\7\u03b8\2\2\u0841\u0840\3\2\2\2\u0841\u0842\3"+
		"\2\2\2\u0842\u0843\3\2\2\2\u0843\u0844\5\u01f8\u00fd\2\u0844{\3\2\2\2"+
		"\u0845\u0846\7\t\2\2\u0846\u0847\7s\2\2\u0847\u084b\5\u01e8\u00f5\2\u0848"+
		"\u084a\5H%\2\u0849\u0848\3\2\2\2\u084a\u084d\3\2\2\2\u084b\u0849\3\2\2"+
		"\2\u084b\u084c\3\2\2\2\u084c}\3\2\2\2\u084d\u084b\3\2\2\2\u084e\u084f"+
		"\7\t\2\2\u084f\u0850\7\u01ea\2\2\u0850\u0851\5\u0202\u0102\2\u0851\u0852"+
		"\7\u01b3\2\2\u0852\u0853\7\u03c1\2\2\u0853\u0858\5J&\2\u0854\u0855\7\u03c3"+
		"\2\2\u0855\u0857\5J&\2\u0856\u0854\3\2\2\2\u0857\u085a\3\2\2\2\u0858\u0856"+
		"\3\2\2\2\u0858\u0859\3\2\2\2\u0859\u085b\3\2\2\2\u085a\u0858\3\2\2\2\u085b"+
		"\u085c\7\u03c2\2\2\u085c\177\3\2\2\2\u085d\u085f\7\t\2\2\u085e\u0860\t"+
		"\3\2\2\u085f\u085e\3\2\2\2\u085f\u0860\3\2\2\2\u0860\u0862\3\2\2\2\u0861"+
		"\u0863\7E\2\2\u0862\u0861\3\2\2\2\u0862\u0863\3\2\2\2\u0863\u0864\3\2"+
		"\2\2\u0864\u0865\7\u0095\2\2\u0865\u086e\5\u01ea\u00f6\2\u0866\u086b\5"+
		"\u0086D\2\u0867\u0868\7\u03c3\2\2\u0868\u086a\5\u0086D\2\u0869\u0867\3"+
		"\2\2\2\u086a\u086d\3\2\2\2\u086b\u0869\3\2\2\2\u086b\u086c\3\2\2\2\u086c"+
		"\u086f\3\2\2\2\u086d\u086b\3\2\2\2\u086e\u0866\3\2\2\2\u086e\u086f\3\2"+
		"\2\2\u086f\u0871\3\2\2\2\u0870\u0872\5b\62\2\u0871\u0870\3\2\2\2\u0871"+
		"\u0872\3\2\2\2\u0872\u0081\3\2\2\2\u0873\u0874\7\t\2\2\u0874\u0875\7\u020f"+
		"\2\2\u0875\u0876\5\u0202\u0102\2\u0876\u0877\t\36\2\2\u0877\u0878\7\u012e"+
		"\2\2\u0878\u087c\7\u03d0\2\2\u0879\u087a\7\u0168\2\2\u087a\u087b\7\u03b8"+
		"\2\2\u087b\u087d\5\u020a\u0106\2\u087c\u0879\3\2\2\2\u087c\u087d\3\2\2"+
		"\2\u087d\u087f\3\2\2\2\u087e\u0880\7\u0226\2\2\u087f\u087e\3\2\2\2\u087f"+
		"\u0880\3\2\2\2\u0880\u0881\3\2\2\2\u0881\u0883\7\u0140\2\2\u0882\u0884"+
		"\7\u03b8\2\2\u0883\u0882\3\2\2\2\u0883\u0884\3\2\2\2\u0884\u0885\3\2\2"+
		"\2\u0885\u0886\5\u01f8\u00fd\2\u0886\u0083\3\2\2\2\u0887\u088b\7\t\2\2"+
		"\u0888\u0889\7\u0102\2\2\u0889\u088a\7\u03b8\2\2\u088a\u088c\t\f\2\2\u088b"+
		"\u0888\3\2\2\2\u088b\u088c\3\2\2\2\u088c\u088e\3\2\2\2\u088d\u088f\5\64"+
		"\33\2\u088e\u088d\3\2\2\2\u088e\u088f\3\2\2\2\u088f\u0893\3\2\2\2\u0890"+
		"\u0891\7\u008b\2\2\u0891\u0892\7\u01e9\2\2\u0892\u0894\t\r\2\2\u0893\u0890"+
		"\3\2\2\2\u0893\u0894\3\2\2\2\u0894\u0895\3\2\2\2\u0895\u0896\7\u0224\2"+
		"\2\u0896\u089b\5\u01e8\u00f5\2\u0897\u0898\7\u03c1\2\2\u0898\u0899\5\u0222"+
		"\u0112\2\u0899\u089a\7\u03c2\2\2\u089a\u089c\3\2\2\2\u089b\u0897\3\2\2"+
		"\2\u089b\u089c\3\2\2\2\u089c\u089d\3\2\2\2\u089d\u089e\7\r\2\2\u089e\u08a5"+
		"\5\u00b4[\2\u089f\u08a1\7\u00a9\2\2\u08a0\u08a2\t\16\2\2\u08a1\u08a0\3"+
		"\2\2\2\u08a1\u08a2\3\2\2\2\u08a2\u08a3\3\2\2\2\u08a3\u08a4\7\31\2\2\u08a4"+
		"\u08a6\7j\2\2\u08a5\u089f\3\2\2\2\u08a5\u08a6\3\2\2\2\u08a6\u0085\3\2"+
		"\2\2\u08a7\u08ae\5^\60\2\u08a8\u08aa\7\u03c3\2\2\u08a9\u08a8\3\2\2\2\u08a9"+
		"\u08aa\3\2\2\2\u08aa\u08ab\3\2\2\2\u08ab\u08ad\5^\60\2\u08ac\u08a9\3\2"+
		"\2\2\u08ad\u08b0\3\2\2\2\u08ae\u08ac\3\2\2\2\u08ae\u08af\3\2\2\2\u08af"+
		"\u0a0b\3\2\2\2\u08b0\u08ae\3\2\2\2\u08b1\u08b3\7\7\2\2\u08b2\u08b4\7\33"+
		"\2\2\u08b3\u08b2\3\2\2\2\u08b3\u08b4\3\2\2\2\u08b4\u08b5\3\2\2\2\u08b5"+
		"\u08b6\5\u0202\u0102\2\u08b6\u08ba\5P)\2\u08b7\u08bb\7\u0154\2\2\u08b8"+
		"\u08b9\7\u0100\2\2\u08b9\u08bb\5\u0202\u0102\2\u08ba\u08b7\3\2\2\2\u08ba"+
		"\u08b8\3\2\2\2\u08ba\u08bb\3\2\2\2\u08bb\u0a0b\3\2\2\2\u08bc\u08be\7\7"+
		"\2\2\u08bd\u08bf\7\33\2\2\u08be\u08bd\3\2\2\2\u08be\u08bf\3\2\2\2\u08bf"+
		"\u08c0\3\2\2\2\u08c0\u08c1\7\u03c1\2\2\u08c1\u08c2\5\u0202\u0102\2\u08c2"+
		"\u08c9\5P)\2\u08c3\u08c4\7\u03c3\2\2\u08c4\u08c5\5\u0202\u0102\2\u08c5"+
		"\u08c6\5P)\2\u08c6\u08c8\3\2\2\2\u08c7\u08c3\3\2\2\2\u08c8\u08cb\3\2\2"+
		"\2\u08c9\u08c7\3\2\2\2\u08c9\u08ca\3\2\2\2\u08ca\u08cc\3\2\2\2\u08cb\u08c9"+
		"\3\2\2\2\u08cc\u08cd\7\u03c2\2\2\u08cd\u0a0b\3\2\2\2\u08ce\u08cf\7\7\2"+
		"\2\u08cf\u08d1\t\24\2\2\u08d0\u08d2\5\u0202\u0102\2\u08d1\u08d0\3\2\2"+
		"\2\u08d1\u08d2\3\2\2\2\u08d2\u08d4\3\2\2\2\u08d3\u08d5\5@!\2\u08d4\u08d3"+
		"\3\2\2\2\u08d4\u08d5\3\2\2\2\u08d5\u08d6\3\2\2\2\u08d6\u08da\5\u0226\u0114"+
		"\2\u08d7\u08d9\5B\"\2\u08d8\u08d7\3\2\2\2\u08d9\u08dc\3\2\2\2\u08da\u08d8"+
		"\3\2\2\2\u08da\u08db\3\2\2\2\u08db\u0a0b\3\2\2\2\u08dc\u08da\3\2\2\2\u08dd"+
		"\u08e2\7\7\2\2\u08de\u08e0\7\35\2\2\u08df\u08e1\5\u0202\u0102\2\u08e0"+
		"\u08df\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1\u08e3\3\2\2\2\u08e2\u08de\3\2"+
		"\2\2\u08e2\u08e3\3\2\2\2\u08e3\u08e4\3\2\2\2\u08e4\u08e5\7r\2\2\u08e5"+
		"\u08e7\7Q\2\2\u08e6\u08e8\5@!\2\u08e7\u08e6\3\2\2\2\u08e7\u08e8\3\2\2"+
		"\2\u08e8\u08e9\3\2\2\2\u08e9\u08ed\5\u0226\u0114\2\u08ea\u08ec\5B\"\2"+
		"\u08eb\u08ea\3\2\2\2\u08ec\u08ef\3\2\2\2\u08ed\u08eb\3\2\2\2\u08ed\u08ee"+
		"\3\2\2\2\u08ee\u0a0b\3\2\2\2\u08ef\u08ed\3\2\2\2\u08f0\u08f5\7\7\2\2\u08f1"+
		"\u08f3\7\35\2\2\u08f2\u08f4\5\u0202\u0102\2\u08f3\u08f2\3\2\2\2\u08f3"+
		"\u08f4\3\2\2\2\u08f4\u08f6\3\2\2\2\u08f5\u08f1\3\2\2\2\u08f5\u08f6\3\2"+
		"\2\2\u08f6\u08f7\3\2\2\2\u08f7\u08f9\7\u009e\2\2\u08f8\u08fa\t\24\2\2"+
		"\u08f9\u08f8\3\2\2\2\u08f9\u08fa\3\2\2\2\u08fa\u08fc\3\2\2\2\u08fb\u08fd"+
		"\5\u0202\u0102\2\u08fc\u08fb\3\2\2\2\u08fc\u08fd\3\2\2\2\u08fd\u08ff\3"+
		"\2\2\2\u08fe\u0900\5@!\2\u08ff\u08fe\3\2\2\2\u08ff\u0900\3\2\2\2\u0900"+
		"\u0901\3\2\2\2\u0901\u0905\5\u0226\u0114\2\u0902\u0904\5B\"\2\u0903\u0902"+
		"\3\2\2\2\u0904\u0907\3\2\2\2\u0905\u0903\3\2\2\2\u0905\u0906\3\2\2\2\u0906"+
		"\u0a0b\3\2\2\2\u0907\u0905\3\2\2\2\u0908\u0909\7\7\2\2\u0909\u090b\t\26"+
		"\2\2\u090a\u090c\t\24\2\2\u090b\u090a\3\2\2\2\u090b\u090c\3\2\2\2\u090c"+
		"\u090e\3\2\2\2\u090d\u090f\5\u0202\u0102\2\u090e\u090d\3\2\2\2\u090e\u090f"+
		"\3\2\2\2\u090f\u0910\3\2\2\2\u0910\u0914\5\u0226\u0114\2\u0911\u0913\5"+
		"B\"\2\u0912\u0911\3\2\2\2\u0913\u0916\3\2\2\2\u0914\u0912\3\2\2\2\u0914"+
		"\u0915\3\2\2\2\u0915\u0a0b\3\2\2\2\u0916\u0914\3\2\2\2\u0917\u091c\7\7"+
		"\2\2\u0918\u091a\7\35\2\2\u0919\u091b\5\u0202\u0102\2\u091a\u0919\3\2"+
		"\2\2\u091a\u091b\3\2\2\2\u091b\u091d\3\2\2\2\u091c\u0918\3\2\2\2\u091c"+
		"\u091d\3\2\2\2\u091d\u091e\3\2\2\2\u091e\u091f\7<\2\2\u091f\u0921\7Q\2"+
		"\2\u0920\u0922\5\u0202\u0102\2\u0921\u0920\3\2\2\2\u0921\u0922\3\2\2\2"+
		"\u0922\u0923\3\2\2\2\u0923\u0924\5\u0226\u0114\2\u0924\u0925\5V,\2\u0925"+
		"\u0a0b\3\2\2\2\u0926\u092b\7\7\2\2\u0927\u0929\7\35\2\2\u0928\u092a\5"+
		"\u0202\u0102\2\u0929\u0928\3\2\2\2\u0929\u092a\3\2\2\2\u092a\u092c\3\2"+
		"\2\2\u092b\u0927\3\2\2\2\u092b\u092c\3\2\2\2\u092c\u092d\3\2\2\2\u092d"+
		"\u092e\7\31\2\2\u092e\u092f\7\u03c1\2\2\u092f\u0930\5\u0250\u0129\2\u0930"+
		"\u0931\7\u03c2\2\2\u0931\u0a0b\3\2\2\2\u0932\u0934\7\u0102\2\2\u0933\u0935"+
		"\7\u03b8\2\2\u0934\u0933\3\2\2\2\u0934\u0935\3\2\2\2\u0935\u0936\3\2\2"+
		"\2\u0936\u0a0b\t\5\2\2\u0937\u0939\7\t\2\2\u0938\u093a\7\33\2\2\u0939"+
		"\u0938\3\2\2\2\u0939\u093a\3\2\2\2\u093a\u093b\3\2\2\2\u093b\u0941\5\u0202"+
		"\u0102\2\u093c\u093d\7\u0087\2\2\u093d\u093e\7\'\2\2\u093e\u0942\5\u0232"+
		"\u011a\2\u093f\u0940\7/\2\2\u0940\u0942\7\'\2\2\u0941\u093c\3\2\2\2\u0941"+
		"\u093f\3\2\2\2\u0942\u0a0b\3\2\2\2\u0943\u0945\7\27\2\2\u0944\u0946\7"+
		"\33\2\2\u0945\u0944\3\2\2\2\u0945\u0946\3\2\2\2\u0946\u0947\3\2\2\2\u0947"+
		"\u0948\5\u0202\u0102\2\u0948\u0949\5\u0202\u0102\2\u0949\u094d\5P)\2\u094a"+
		"\u094e\7\u0154\2\2\u094b\u094c\7\u0100\2\2\u094c\u094e\5\u0202\u0102\2"+
		"\u094d\u094a\3\2\2\2\u094d\u094b\3\2\2\2\u094d\u094e\3\2\2\2\u094e\u0a0b"+
		"\3\2\2\2\u094f\u0950\7{\2\2\u0950\u0951\7\33\2\2\u0951\u0952\5\u0202\u0102"+
		"\2\u0952\u0953\7\u0098\2\2\u0953\u0954\5\u0202\u0102\2\u0954\u0a0b\3\2"+
		"\2\2\u0955\u0957\7\\\2\2\u0956\u0958\7\u03b8\2\2\u0957\u0956\3\2\2\2\u0957"+
		"\u0958\3\2\2\2\u0958\u0959\3\2\2\2\u0959\u0a0b\t\6\2\2\u095a\u095c\7\u019f"+
		"\2\2\u095b\u095d\7\33\2\2\u095c\u095b\3\2\2\2\u095c\u095d\3\2\2\2\u095d"+
		"\u095e\3\2\2\2\u095e\u095f\5\u0202\u0102\2\u095f\u0963\5P)\2\u0960\u0964"+
		"\7\u0154\2\2\u0961\u0962\7\u0100\2\2\u0962\u0964\5\u0202\u0102\2\u0963"+
		"\u0960\3\2\2\2\u0963\u0961\3\2\2\2\u0963\u0964\3\2\2\2\u0964\u0a0b\3\2"+
		"\2\2\u0965\u0967\7/\2\2\u0966\u0968\7\33\2\2\u0967\u0966\3\2\2\2\u0967"+
		"\u0968\3\2\2\2\u0968\u0969\3\2\2\2\u0969\u096b\5\u0202\u0102\2\u096a\u096c"+
		"\7\177\2\2\u096b\u096a\3\2\2\2\u096b\u096c\3\2\2\2\u096c\u0a0b\3\2\2\2"+
		"\u096d\u096e\7/\2\2\u096e\u096f\7r\2\2\u096f\u0a0b\7Q\2\2\u0970\u0971"+
		"\7{\2\2\u0971\u0972\t\24\2\2\u0972\u0973\5\u0202\u0102\2\u0973\u0974\7"+
		"\u0098\2\2\u0974\u0975\5\u0202\u0102\2\u0975\u0a0b\3\2\2\2\u0976\u0977"+
		"\7/\2\2\u0977\u0978\t\24\2\2\u0978\u0a0b\5\u0202\u0102\2\u0979\u097a\7"+
		"/\2\2\u097a\u097b\7<\2\2\u097b\u097c\7Q\2\2\u097c\u0a0b\5\u0202\u0102"+
		"\2\u097d\u097e\7\u0135\2\2\u097e\u0a0b\7R\2\2\u097f\u0980\7\u013c\2\2"+
		"\u0980\u0a0b\7R\2\2\u0981\u0983\7{\2\2\u0982\u0984\t\37\2\2\u0983\u0982"+
		"\3\2\2\2\u0983\u0984\3\2\2\2\u0984\u0987\3\2\2\2\u0985\u0988\5\u0202\u0102"+
		"\2\u0986\u0988\5\u01e8\u00f5\2\u0987\u0985\3\2\2\2\u0987\u0986\3\2\2\2"+
		"\u0988\u0a0b\3\2\2\2\u0989\u098a\7m\2\2\u098a\u098b\7\22\2\2\u098b\u0a0b"+
		"\5\u0222\u0112\2\u098c\u098d\7\37\2\2\u098d\u098e\7\u0098\2\2\u098e\u098f"+
		"\7\30\2\2\u098f\u0990\7\u0087\2\2\u0990\u0993\5\u01f4\u00fb\2\u0991\u0992"+
		"\7\32\2\2\u0992\u0994\5\u01f6\u00fc\2\u0993\u0991\3\2\2\2\u0993\u0994"+
		"\3\2\2\2\u0994\u0a0b\3\2\2\2\u0995\u0997\7\'\2\2\u0996\u0995\3\2\2\2\u0996"+
		"\u0997\3\2\2\2\u0997\u0998\3\2\2\2\u0998\u0999\7\30\2\2\u0999\u099a\7"+
		"\u0087\2\2\u099a\u099b\7\u03b8\2\2\u099b\u099f\5\u01f4\u00fb\2\u099c\u099d"+
		"\7\32\2\2\u099d\u099e\7\u03b8\2\2\u099e\u09a0\5\u01f6\u00fc\2\u099f\u099c"+
		"\3\2\2\2\u099f\u09a0\3\2\2\2\u09a0\u0a0b\3\2\2\2\u09a1\u09a2\7\u0136\2"+
		"\2\u09a2\u0a0b\7\u020f\2\2\u09a3\u09a4\7\u0166\2\2\u09a4\u0a0b\7\u020f"+
		"\2\2\u09a5\u0a0b\7;\2\2\u09a6\u09a7\t \2\2\u09a7\u0a0b\7\u0221\2\2\u09a8"+
		"\u09a9\7\7\2\2\u09a9\u09aa\7q\2\2\u09aa\u09ab\7\u03c1\2\2\u09ab\u09b0"+
		"\5h\65\2\u09ac\u09ad\7\u03c3\2\2\u09ad\u09af\5h\65\2\u09ae\u09ac\3\2\2"+
		"\2\u09af\u09b2\3\2\2\2\u09b0\u09ae\3\2\2\2\u09b0\u09b1\3\2\2\2\u09b1\u09b3"+
		"\3\2\2\2\u09b2\u09b0\3\2\2\2\u09b3\u09b4\7\u03c2\2\2\u09b4\u0a0b\3\2\2"+
		"\2\u09b5\u09b6\7/\2\2\u09b6\u09b7\7q\2\2\u09b7\u0a0b\5\u0222\u0112\2\u09b8"+
		"\u09b9\7\u0136\2\2\u09b9\u09bc\7q\2\2\u09ba\u09bd\5\u0222\u0112\2\u09bb"+
		"\u09bd\7\b\2\2\u09bc\u09ba\3\2\2\2\u09bc\u09bb\3\2\2\2\u09bd\u09be\3\2"+
		"\2\2\u09be\u0a0b\7\u020f\2\2\u09bf\u09c0\7\u0166\2\2\u09c0\u09c3\7q\2"+
		"\2\u09c1\u09c4\5\u0222\u0112\2\u09c2\u09c4\7\b\2\2\u09c3\u09c1\3\2\2\2"+
		"\u09c3\u09c2\3\2\2\2\u09c4\u09c5\3\2\2\2\u09c5\u0a0b\7\u020f\2\2\u09c6"+
		"\u09c7\7\u0216\2\2\u09c7\u09ca\7q\2\2\u09c8\u09cb\5\u0222\u0112\2\u09c9"+
		"\u09cb\7\b\2\2\u09ca\u09c8\3\2\2\2\u09ca\u09c9\3\2\2\2\u09cb\u0a0b\3\2"+
		"\2\2\u09cc\u09cd\7\u011b\2\2\u09cd\u09ce\7q\2\2\u09ce\u0a0b\5\u0208\u0105"+
		"\2\u09cf\u09d0\7\u01d4\2\2\u09d0\u09d1\7q\2\2\u09d1\u09d2\5\u0222\u0112"+
		"\2\u09d2\u09d3\7M\2\2\u09d3\u09d4\7\u03c1\2\2\u09d4\u09d9\5h\65\2\u09d5"+
		"\u09d6\7\u03c3\2\2\u09d6\u09d8\5h\65\2\u09d7\u09d5\3\2\2\2\u09d8\u09db"+
		"\3\2\2\2\u09d9\u09d7\3\2\2\2\u09d9\u09da\3\2\2\2\u09da\u09dc\3\2\2\2\u09db"+
		"\u09d9\3\2\2\2\u09dc\u09dd\7\u03c2\2\2\u09dd\u0a0b\3\2\2\2\u09de\u09df"+
		"\7\u0149\2\2\u09df\u09e0\7q\2\2\u09e0\u09e1\5\u0202\u0102\2\u09e1\u09e2"+
		"\7\u00a9\2\2\u09e2\u09e3\7\u0095\2\2\u09e3\u09e6\5\u01ea\u00f6\2\u09e4"+
		"\u09e5\t \2\2\u09e5\u09e7\7\u0221\2\2\u09e6\u09e4\3\2\2\2\u09e6\u09e7"+
		"\3\2\2\2\u09e7\u0a0b\3\2\2\2\u09e8\u09e9\7\13\2\2\u09e9\u09ec\7q\2\2\u09ea"+
		"\u09ed\5\u0222\u0112\2\u09eb\u09ed\7\b\2\2\u09ec\u09ea\3\2\2\2\u09ec\u09eb"+
		"\3\2\2\2\u09ed\u0a0b\3\2\2\2\u09ee\u09ef\7\31\2\2\u09ef\u09f2\7q\2\2\u09f0"+
		"\u09f3\5\u0222\u0112\2\u09f1\u09f3\7\b\2\2\u09f2\u09f0\3\2\2\2\u09f2\u09f1"+
		"\3\2\2\2\u09f3\u0a0b\3\2\2\2\u09f4\u09f5\7i\2\2\u09f5\u09f8\7q\2\2\u09f6"+
		"\u09f9\5\u0222\u0112\2\u09f7\u09f9\7\b\2\2\u09f8\u09f6\3\2\2\2\u09f8\u09f7"+
		"\3\2\2\2\u09f9\u0a0b\3\2\2\2\u09fa\u09fb\7\u01cb\2\2\u09fb\u09fe\7q\2"+
		"\2\u09fc\u09ff\5\u0222\u0112\2\u09fd\u09ff\7\b\2\2\u09fe\u09fc\3\2\2\2"+
		"\u09fe\u09fd\3\2\2\2\u09ff\u0a0b\3\2\2\2\u0a00\u0a01\7\u01d5\2\2\u0a01"+
		"\u0a04\7q\2\2\u0a02\u0a05\5\u0222\u0112\2\u0a03\u0a05\7\b\2\2\u0a04\u0a02"+
		"\3\2\2\2\u0a04\u0a03\3\2\2\2\u0a05\u0a0b\3\2\2\2\u0a06\u0a07\7\u01d3\2"+
		"\2\u0a07\u0a0b\7\u01b9\2\2\u0a08\u0a09\7\u021d\2\2\u0a09\u0a0b\7\u01b9"+
		"\2\2\u0a0a\u08a7\3\2\2\2\u0a0a\u08b1\3\2\2\2\u0a0a\u08bc\3\2\2\2\u0a0a"+
		"\u08ce\3\2\2\2\u0a0a\u08dd\3\2\2\2\u0a0a\u08f0\3\2\2\2\u0a0a\u0908\3\2"+
		"\2\2\u0a0a\u0917\3\2\2\2\u0a0a\u0926\3\2\2\2\u0a0a\u0932\3\2\2\2\u0a0a"+
		"\u0937\3\2\2\2\u0a0a\u0943\3\2\2\2\u0a0a\u094f\3\2\2\2\u0a0a\u0955\3\2"+
		"\2\2\u0a0a\u095a\3\2\2\2\u0a0a\u0965\3\2\2\2\u0a0a\u096d\3\2\2\2\u0a0a"+
		"\u0970\3\2\2\2\u0a0a\u0976\3\2\2\2\u0a0a\u0979\3\2\2\2\u0a0a\u097d\3\2"+
		"\2\2\u0a0a\u097f\3\2\2\2\u0a0a\u0981\3\2\2\2\u0a0a\u0989\3\2\2\2\u0a0a"+
		"\u098c\3\2\2\2\u0a0a\u0996\3\2\2\2\u0a0a\u09a1\3\2\2\2\u0a0a\u09a3\3\2"+
		"\2\2\u0a0a\u09a5\3\2\2\2\u0a0a\u09a6\3\2\2\2\u0a0a\u09a8\3\2\2\2\u0a0a"+
		"\u09b5\3\2\2\2\u0a0a\u09b8\3\2\2\2\u0a0a\u09bf\3\2\2\2\u0a0a\u09c6\3\2"+
		"\2\2\u0a0a\u09cc\3\2\2\2\u0a0a\u09cf\3\2\2\2\u0a0a\u09de\3\2\2\2\u0a0a"+
		"\u09e8\3\2\2\2\u0a0a\u09ee\3\2\2\2\u0a0a\u09f4\3\2\2\2\u0a0a\u09fa\3\2"+
		"\2\2\u0a0a\u0a00\3\2\2\2\u0a0a\u0a06\3\2\2\2\u0a0a\u0a08\3\2\2\2\u0a0b"+
		"\u0087\3\2\2\2\u0a0c\u0a0d\7/\2\2\u0a0d\u0a0f\t\2\2\2\u0a0e\u0a10\5\u0238"+
		"\u011d\2\u0a0f\u0a0e\3\2\2\2\u0a0f\u0a10\3\2\2\2\u0a10\u0a11\3\2\2\2\u0a11"+
		"\u0a12\5\u0202\u0102\2\u0a12\u0089\3\2\2\2\u0a13\u0a14\7/\2\2\u0a14\u0a16"+
		"\7\u0146\2\2\u0a15\u0a17\5\u0238\u011d\2\u0a16\u0a15\3\2\2\2\u0a16\u0a17"+
		"\3\2\2\2\u0a17\u0a18\3\2\2\2\u0a18\u0a19\5\u01e8\u00f5\2\u0a19\u008b\3"+
		"\2\2\2\u0a1a\u0a1b\7/\2\2\u0a1b\u0a1d\7G\2\2\u0a1c\u0a1e\t\3\2\2\u0a1d"+
		"\u0a1c\3\2\2\2\u0a1d\u0a1e\3\2\2\2\u0a1e\u0a1f\3\2\2\2\u0a1f\u0a20\5\u0202"+
		"\u0102\2\u0a20\u0a21\7h\2\2\u0a21\u0a2e\5\u01ea\u00f6\2\u0a22\u0a24\7"+
		"\u0102\2\2\u0a23\u0a25\7\u03b8\2\2\u0a24\u0a23\3\2\2\2\u0a24\u0a25\3\2"+
		"\2\2\u0a25\u0a26\3\2\2\2\u0a26\u0a2d\t\5\2\2\u0a27\u0a29\7\\\2\2\u0a28"+
		"\u0a2a\7\u03b8\2\2\u0a29\u0a28\3\2\2\2\u0a29\u0a2a\3\2\2\2\u0a2a\u0a2b"+
		"\3\2\2\2\u0a2b\u0a2d\t\6\2\2\u0a2c\u0a22\3\2\2\2\u0a2c\u0a27\3\2\2\2\u0a2d"+
		"\u0a30\3\2\2\2\u0a2e\u0a2c\3\2\2\2\u0a2e\u0a2f\3\2\2\2\u0a2f\u008d\3\2"+
		"\2\2\u0a30\u0a2e\3\2\2\2\u0a31\u0a32\7/\2\2\u0a32\u0a33\7\u017c\2\2\u0a33"+
		"\u0a34\7A\2\2\u0a34\u0a35\5\u0202\u0102\2\u0a35\u0a36\7\u0140\2\2\u0a36"+
		"\u0a37\7\u03b8\2\2\u0a37\u0a38\5\u01f8\u00fd\2\u0a38\u008f\3\2\2\2\u0a39"+
		"\u0a3a\7/\2\2\u0a3a\u0a3c\7s\2\2\u0a3b\u0a3d\5\u0238\u011d\2\u0a3c\u0a3b"+
		"\3\2\2\2\u0a3c\u0a3d\3\2\2\2\u0a3d\u0a3e\3\2\2\2\u0a3e\u0a3f\5\u01e8\u00f5"+
		"\2\u0a3f\u0091\3\2\2\2\u0a40\u0a41\7/\2\2\u0a41\u0a43\7\u015a\2\2\u0a42"+
		"\u0a44\5\u0238\u011d\2\u0a43\u0a42\3\2\2\2\u0a43\u0a44\3\2\2\2\u0a44\u0a45"+
		"\3\2\2\2\u0a45\u0a46\5\u01e8\u00f5\2\u0a46\u0093\3\2\2\2\u0a47\u0a48\7"+
		"/\2\2\u0a48\u0a4a\7\u01ea\2\2\u0a49\u0a4b\5\u0238\u011d\2\u0a4a\u0a49"+
		"\3\2\2\2\u0a4a\u0a4b\3\2\2\2\u0a4b\u0a4c\3\2\2\2\u0a4c\u0a4d\5\u0202\u0102"+
		"\2\u0a4d\u0095\3\2\2\2\u0a4e\u0a50\7/\2\2\u0a4f\u0a51\7\u0210\2\2\u0a50"+
		"\u0a4f\3\2\2\2\u0a50\u0a51\3\2\2\2\u0a51\u0a52\3\2\2\2\u0a52\u0a54\7\u0095"+
		"\2\2\u0a53\u0a55\5\u0238\u011d\2\u0a54\u0a53\3\2\2\2\u0a54\u0a55\3\2\2"+
		"\2\u0a55\u0a56\3\2\2\2\u0a56\u0a58\5\u0224\u0113\2\u0a57\u0a59\t!\2\2"+
		"\u0a58\u0a57\3\2\2\2\u0a58\u0a59\3\2\2\2\u0a59\u0097\3\2\2\2\u0a5a\u0a5b"+
		"\7/\2\2\u0a5b\u0a5c\7\u020f\2\2\u0a5c\u0a62\5\u0202\u0102\2\u0a5d\u0a5f"+
		"\7\u0140\2\2\u0a5e\u0a60\7\u03b8\2\2\u0a5f\u0a5e\3\2\2\2\u0a5f\u0a60\3"+
		"\2\2\2\u0a60\u0a61\3\2\2\2\u0a61\u0a63\5\u01f8\u00fd\2\u0a62\u0a5d\3\2"+
		"\2\2\u0a62\u0a63\3\2\2\2\u0a63\u0099\3\2\2\2\u0a64\u0a65\7/\2\2\u0a65"+
		"\u0a67\7\u009a\2\2\u0a66\u0a68\5\u0238\u011d\2\u0a67\u0a66\3\2\2\2\u0a67"+
		"\u0a68\3\2\2\2\u0a68\u0a69\3\2\2\2\u0a69\u0a6a\5\u01e8\u00f5\2\u0a6a\u009b"+
		"\3\2\2\2\u0a6b\u0a6c\7/\2\2\u0a6c\u0a6e\7\u0224\2\2\u0a6d\u0a6f\5\u0238"+
		"\u011d\2\u0a6e\u0a6d\3\2\2\2\u0a6e\u0a6f\3\2\2\2\u0a6f\u0a70\3\2\2\2\u0a70"+
		"\u0a75\5\u01e8\u00f5\2\u0a71\u0a72\7\u03c3\2\2\u0a72\u0a74\5\u01e8\u00f5"+
		"\2\u0a73\u0a71\3\2\2\2\u0a74\u0a77\3\2\2\2\u0a75\u0a73\3\2\2\2\u0a75\u0a76"+
		"\3\2\2\2\u0a76\u0a79\3\2\2\2\u0a77\u0a75\3\2\2\2\u0a78\u0a7a\t!\2\2\u0a79"+
		"\u0a78\3\2\2\2\u0a79\u0a7a\3\2\2\2\u0a7a\u009d\3\2\2\2\u0a7b\u0a7c\7{"+
		"\2\2\u0a7c\u0a7d\7\u0095\2\2\u0a7d\u0a82\5\u00a0Q\2\u0a7e\u0a7f\7\u03c3"+
		"\2\2\u0a7f\u0a81\5\u00a0Q\2\u0a80\u0a7e\3\2\2\2\u0a81\u0a84\3\2\2\2\u0a82"+
		"\u0a80\3\2\2\2\u0a82\u0a83\3\2\2\2\u0a83\u009f\3\2\2\2\u0a84\u0a82\3\2"+
		"\2\2\u0a85\u0a86\5\u01ea\u00f6\2\u0a86\u0a87\7\u0098\2\2\u0a87\u0a88\5"+
		"\u01ea\u00f6\2\u0a88\u00a1\3\2\2\2\u0a89\u0a8b\7\u0216\2\2\u0a8a\u0a8c"+
		"\7\u0095\2\2\u0a8b\u0a8a\3\2\2\2\u0a8b\u0a8c\3\2\2\2\u0a8c\u0a8d\3\2\2"+
		"\2\u0a8d\u0a8e\5\u01ea\u00f6\2\u0a8e\u00a3\3\2\2\2\u0a8f\u0a90\7\23\2"+
		"\2\u0a90\u0a97\5\u01e8\u00f5\2\u0a91\u0a94\7\u03c1\2\2\u0a92\u0a95\5\u022c"+
		"\u0117\2\u0a93\u0a95\5\u0228\u0115\2\u0a94\u0a92\3\2\2\2\u0a94\u0a93\3"+
		"\2\2\2\u0a94\u0a95\3\2\2\2\u0a95\u0a96\3\2\2\2\u0a96\u0a98\7\u03c2\2\2"+
		"\u0a97\u0a91\3\2\2\2\u0a97\u0a98\3\2\2\2\u0a98\u00a5\3\2\2\2\u0a99\u0a9c"+
		"\5\u00c0a\2\u0a9a\u0a9c\5\u00c2b\2\u0a9b\u0a99\3\2\2\2\u0a9b\u0a9a\3\2"+
		"\2\2\u0a9c\u00a7\3\2\2\2\u0a9d\u0a9e\7\u0138\2\2\u0a9e\u0a9f\5\u0228\u0115"+
		"\2\u0a9f\u00a9\3\2\2\2\u0aa0\u0aa5\5\u00c4c\2\u0aa1\u0aa5\5\u00c6d\2\u0aa2"+
		"\u0aa5\5\u00c8e\2\u0aa3\u0aa5\5\u00caf\2\u0aa4\u0aa0\3\2\2\2\u0aa4\u0aa1"+
		"\3\2\2\2\u0aa4\u0aa2\3\2\2\2\u0aa4\u0aa3\3\2\2\2\u0aa5\u00ab\3\2\2\2\u0aa6"+
		"\u0aa8\7K\2\2\u0aa7\u0aa9\t\"\2\2\u0aa8\u0aa7\3\2\2\2\u0aa8\u0aa9\3\2"+
		"\2\2\u0aa9\u0aab\3\2\2\2\u0aaa\u0aac\7E\2\2\u0aab\u0aaa\3\2\2\2\u0aab"+
		"\u0aac\3\2\2\2\u0aac\u0aae\3\2\2\2\u0aad\u0aaf\7M\2\2\u0aae\u0aad\3\2"+
		"\2\2\u0aae\u0aaf\3\2\2\2\u0aaf\u0ab0\3\2\2\2\u0ab0\u0ab6\5\u01ea\u00f6"+
		"\2\u0ab1\u0ab2\7q\2\2\u0ab2\u0ab3\7\u03c1\2\2\u0ab3\u0ab4\5\u0222\u0112"+
		"\2\u0ab4\u0ab5\7\u03c2\2\2\u0ab5\u0ab7\3\2\2\2\u0ab6\u0ab1\3\2\2\2\u0ab6"+
		"\u0ab7\3\2\2\2\u0ab7\u0ac8\3\2\2\2\u0ab8\u0ab9\7\u03c1\2\2\u0ab9\u0aba"+
		"\5\u0222\u0112\2\u0aba\u0abb\7\u03c2\2\2\u0abb\u0abd\3\2\2\2\u0abc\u0ab8"+
		"\3\2\2\2\u0abc\u0abd\3\2\2\2\u0abd\u0abe\3\2\2\2\u0abe\u0ac9\5\u00b8]"+
		"\2\u0abf\u0ac0\7\u0087\2\2\u0ac0\u0ac5\5\u00ba^\2\u0ac1\u0ac2\7\u03c3"+
		"\2\2\u0ac2\u0ac4\5\u00ba^\2\u0ac3\u0ac1\3\2\2\2\u0ac4\u0ac7\3\2\2\2\u0ac5"+
		"\u0ac3\3\2\2\2\u0ac5\u0ac6\3\2\2\2\u0ac6\u0ac9\3\2\2\2\u0ac7\u0ac5\3\2"+
		"\2\2\u0ac8\u0abc\3\2\2\2\u0ac8\u0abf\3\2\2\2\u0ac9\u0ad6\3\2\2\2\u0aca"+
		"\u0acb\7h\2\2\u0acb\u0acc\7\u013a\2\2\u0acc\u0acd\7Q\2\2\u0acd\u0ace\7"+
		"\u00a1\2\2\u0ace\u0ad3\5\u00ba^\2\u0acf\u0ad0\7\u03c3\2\2\u0ad0\u0ad2"+
		"\5\u00ba^\2\u0ad1\u0acf\3\2\2\2\u0ad2\u0ad5\3\2\2\2\u0ad3\u0ad1\3\2\2"+
		"\2\u0ad3\u0ad4\3\2\2\2\u0ad4\u0ad7\3\2\2\2\u0ad5\u0ad3\3\2\2\2\u0ad6\u0aca"+
		"\3\2\2\2\u0ad6\u0ad7\3\2\2\2\u0ad7\u00ad\3\2\2\2\u0ad8\u0ad9\7[\2\2\u0ad9"+
		"\u0adb\7\u012d\2\2\u0ada\u0adc\t#\2\2\u0adb\u0ada\3\2\2\2\u0adb\u0adc"+
		"\3\2\2\2\u0adc\u0ade\3\2\2\2\u0add\u0adf\7\u017b\2\2\u0ade\u0add\3\2\2"+
		"\2\u0ade\u0adf\3\2\2\2\u0adf\u0ae0\3\2\2\2\u0ae0\u0ae1\7H\2\2\u0ae1\u0ae3"+
		"\7\u03d0\2\2\u0ae2\u0ae4\t\b\2\2\u0ae3\u0ae2\3\2\2\2\u0ae3\u0ae4\3\2\2"+
		"\2\u0ae4\u0ae5\3\2\2\2\u0ae5\u0ae6\7M\2\2\u0ae6\u0ae7\7\u0095\2\2\u0ae7"+
		"\u0aed\5\u01ea\u00f6\2\u0ae8\u0ae9\7q\2\2\u0ae9\u0aea\7\u03c1\2\2\u0aea"+
		"\u0aeb\5\u0222\u0112\2\u0aeb\u0aec\7\u03c2\2\2\u0aec\u0aee\3\2\2\2\u0aed"+
		"\u0ae8\3\2\2\2\u0aed\u0aee\3\2\2\2\u0aee\u0af2\3\2\2\2\u0aef\u0af0\7\30"+
		"\2\2\u0af0\u0af1\7\u0087\2\2\u0af1\u0af3\5\u01f4\u00fb\2\u0af2\u0aef\3"+
		"\2\2\2\u0af2\u0af3\3\2\2\2\u0af3\u0afa\3\2\2\2\u0af4\u0af6\t$\2\2\u0af5"+
		"\u0af7\5\u00f4{\2\u0af6\u0af5\3\2\2\2\u0af7\u0af8\3\2\2\2\u0af8\u0af6"+
		"\3\2\2\2\u0af8\u0af9\3\2\2\2\u0af9\u0afb\3\2\2\2\u0afa\u0af4\3\2\2\2\u0afa"+
		"\u0afb\3\2\2\2\u0afb\u0b02\3\2\2\2\u0afc\u0afe\7Z\2\2\u0afd\u0aff\5\u00f6"+
		"|\2\u0afe\u0afd\3\2\2\2\u0aff\u0b00\3\2\2\2\u0b00\u0afe\3\2\2\2\u0b00"+
		"\u0b01\3\2\2\2\u0b01\u0b03\3\2\2\2\u0b02\u0afc\3\2\2\2\u0b02\u0b03\3\2"+
		"\2\2\u0b03\u0b08\3\2\2\2\u0b04\u0b05\7E\2\2\u0b05\u0b06\5\u0208\u0105"+
		"\2\u0b06\u0b07\t%\2\2\u0b07\u0b09\3\2\2\2\u0b08\u0b04\3\2\2\2\u0b08\u0b09"+
		"\3\2\2\2\u0b09\u0b15\3\2\2\2\u0b0a\u0b0b\7\u03c1\2\2\u0b0b\u0b10\5\u00bc"+
		"_\2\u0b0c\u0b0d\7\u03c3\2\2\u0b0d\u0b0f\5\u00bc_\2\u0b0e\u0b0c\3\2\2\2"+
		"\u0b0f\u0b12\3\2\2\2\u0b10\u0b0e\3\2\2\2\u0b10\u0b11\3\2\2\2\u0b11\u0b13"+
		"\3\2\2\2\u0b12\u0b10\3\2\2\2\u0b13\u0b14\7\u03c2\2\2\u0b14\u0b16\3\2\2"+
		"\2\u0b15\u0b0a\3\2\2\2\u0b15\u0b16\3\2\2\2\u0b16\u0b20\3\2\2\2\u0b17\u0b18"+
		"\7\u0087\2\2\u0b18\u0b1d\5\u00ba^\2\u0b19\u0b1a\7\u03c3\2\2\u0b1a\u0b1c"+
		"\5\u00ba^\2\u0b1b\u0b19\3\2\2\2\u0b1c\u0b1f\3\2\2\2\u0b1d\u0b1b\3\2\2"+
		"\2\u0b1d\u0b1e\3\2\2\2\u0b1e\u0b21\3\2\2\2\u0b1f\u0b1d\3\2\2\2\u0b20\u0b17"+
		"\3\2\2\2\u0b20\u0b21\3\2\2\2\u0b21\u00af\3\2\2\2\u0b22\u0b23\7[\2\2\u0b23"+
		"\u0b25\7\u022d\2\2\u0b24\u0b26\t#\2\2\u0b25\u0b24\3\2\2\2\u0b25\u0b26"+
		"\3\2\2\2\u0b26\u0b28\3\2\2\2\u0b27\u0b29\7\u017b\2\2\u0b28\u0b27\3\2\2"+
		"\2\u0b28\u0b29\3\2\2\2\u0b29\u0b2a\3\2\2\2\u0b2a\u0b2b\7H\2\2\u0b2b\u0b2d"+
		"\7\u03d0\2\2\u0b2c\u0b2e\t\b\2\2\u0b2d\u0b2c\3\2\2\2\u0b2d\u0b2e\3\2\2"+
		"\2\u0b2e\u0b2f\3\2\2\2\u0b2f\u0b30\7M\2\2\u0b30\u0b31\7\u0095\2\2\u0b31"+
		"\u0b35\5\u01ea\u00f6\2\u0b32\u0b33\7\30\2\2\u0b33\u0b34\7\u0087\2\2\u0b34"+
		"\u0b36\5\u01f4\u00fb\2\u0b35\u0b32\3\2\2\2\u0b35\u0b36\3\2\2\2\u0b36\u0b3d"+
		"\3\2\2\2\u0b37\u0b38\7\u01e5\2\2\u0b38\u0b39\7\u0164\2\2\u0b39\u0b3a\7"+
		"\22\2\2\u0b3a\u0b3b\7\u03ba\2\2\u0b3b\u0b3c\7\u03d0\2\2\u0b3c\u0b3e\7"+
		"\u03b9\2\2\u0b3d\u0b37\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u0b43\3\2\2\2"+
		"\u0b3f\u0b40\7E\2\2\u0b40\u0b41\5\u0208\u0105\2\u0b41\u0b42\t%\2\2\u0b42"+
		"\u0b44\3\2\2\2\u0b43\u0b3f\3\2\2\2\u0b43\u0b44\3\2\2\2\u0b44\u0b50\3\2"+
		"\2\2\u0b45\u0b46\7\u03c1\2\2\u0b46\u0b4b\5\u00bc_\2\u0b47\u0b48\7\u03c3"+
		"\2\2\u0b48\u0b4a\5\u00bc_\2\u0b49\u0b47\3\2\2\2\u0b4a\u0b4d\3\2\2\2\u0b4b"+
		"\u0b49\3\2\2\2\u0b4b\u0b4c\3\2\2\2\u0b4c\u0b4e\3\2\2\2\u0b4d\u0b4b\3\2"+
		"\2\2\u0b4e\u0b4f\7\u03c2\2\2\u0b4f\u0b51\3\2\2\2\u0b50\u0b45\3\2\2\2\u0b50"+
		"\u0b51\3\2\2\2\u0b51\u0b5b\3\2\2\2\u0b52\u0b53\7\u0087\2\2\u0b53\u0b58"+
		"\5\u00ba^\2\u0b54\u0b55\7\u03c3\2\2\u0b55\u0b57\5\u00ba^\2\u0b56\u0b54"+
		"\3\2\2\2\u0b57\u0b5a\3\2\2\2\u0b58\u0b56\3\2\2\2\u0b58\u0b59\3\2\2\2\u0b59"+
		"\u0b5c\3\2\2\2\u0b5a\u0b58\3\2\2\2\u0b5b\u0b52\3\2\2\2\u0b5b\u0b5c\3\2"+
		"\2\2\u0b5c\u00b1\3\2\2\2\u0b5d\u0b5f\7}\2\2\u0b5e\u0b60\t&\2\2\u0b5f\u0b5e"+
		"\3\2\2\2\u0b5f\u0b60\3\2\2\2\u0b60\u0b62\3\2\2\2\u0b61\u0b63\7M\2\2\u0b62"+
		"\u0b61\3\2\2\2\u0b62\u0b63\3\2\2\2\u0b63\u0b64\3\2\2\2\u0b64\u0b6a\5\u01ea"+
		"\u00f6\2\u0b65\u0b66\7q\2\2\u0b66\u0b67\7\u03c1\2\2\u0b67\u0b68\5\u0222"+
		"\u0112\2\u0b68\u0b69\7\u03c2\2\2\u0b69\u0b6b\3\2\2\2\u0b6a\u0b65\3\2\2"+
		"\2\u0b6a\u0b6b\3\2\2\2\u0b6b\u0b7c\3\2\2\2\u0b6c\u0b6d\7\u03c1\2\2\u0b6d"+
		"\u0b6e\5\u0222\u0112\2\u0b6e\u0b6f\7\u03c2\2\2\u0b6f\u0b71\3\2\2\2\u0b70"+
		"\u0b6c\3\2\2\2\u0b70\u0b71\3\2\2\2\u0b71\u0b72\3\2\2\2\u0b72\u0b7d\5\u00b8"+
		"]\2\u0b73\u0b74\7\u0087\2\2\u0b74\u0b79\5\u00ba^\2\u0b75\u0b76\7\u03c3"+
		"\2\2\u0b76\u0b78\5\u00ba^\2\u0b77\u0b75\3\2\2\2\u0b78\u0b7b\3\2\2\2\u0b79"+
		"\u0b77\3\2\2\2\u0b79\u0b7a\3\2\2\2\u0b7a\u0b7d\3\2\2\2\u0b7b\u0b79\3\2"+
		"\2\2\u0b7c\u0b70\3\2\2\2\u0b7c\u0b73\3\2\2\2\u0b7d\u00b3\3\2\2\2\u0b7e"+
		"\u0b80\5\u00e4s\2\u0b7f\u0b81\5\u00be`\2\u0b80\u0b7f\3\2\2\2\u0b80\u0b81"+
		"\3\2\2\2\u0b81\u0bb6\3\2\2\2\u0b82\u0b84\5\u00e0q\2\u0b83\u0b85\5\u00be"+
		"`\2\u0b84\u0b83\3\2\2\2\u0b84\u0b85\3\2\2\2\u0b85\u0bb6\3\2\2\2\u0b86"+
		"\u0b88\5\u00e6t\2\u0b87\u0b89\5\u00eav\2\u0b88\u0b87\3\2\2\2\u0b89\u0b8a"+
		"\3\2\2\2\u0b8a\u0b88\3\2\2\2\u0b8a\u0b8b\3\2\2\2\u0b8b\u0b94\3\2\2\2\u0b8c"+
		"\u0b8e\7\u009d\2\2\u0b8d\u0b8f\t\'\2\2\u0b8e\u0b8d\3\2\2\2\u0b8e\u0b8f"+
		"\3\2\2\2\u0b8f\u0b92\3\2\2\2\u0b90\u0b93\5\u00e4s\2\u0b91\u0b93\5\u00e0"+
		"q\2\u0b92\u0b90\3\2\2\2\u0b92\u0b91\3\2\2\2\u0b93\u0b95\3\2\2\2\u0b94"+
		"\u0b8c\3\2\2\2\u0b94\u0b95\3\2\2\2\u0b95\u0b97\3\2\2\2\u0b96\u0b98\5\u00d0"+
		"i\2\u0b97\u0b96\3\2\2\2\u0b97\u0b98\3\2\2\2\u0b98\u0b9a\3\2\2\2\u0b99"+
		"\u0b9b\5\u00fc\177\2\u0b9a\u0b99\3\2\2\2\u0b9a\u0b9b\3\2\2\2\u0b9b\u0b9d"+
		"\3\2\2\2\u0b9c\u0b9e\5\u00be`\2\u0b9d\u0b9c\3\2\2\2\u0b9d\u0b9e\3\2\2"+
		"\2\u0b9e\u0bb6\3\2\2\2\u0b9f\u0ba1\5\u00e2r\2\u0ba0\u0ba2\5\u00e8u\2\u0ba1"+
		"\u0ba0\3\2\2\2\u0ba2\u0ba3\3\2\2\2\u0ba3\u0ba1\3\2\2\2\u0ba3\u0ba4\3\2"+
		"\2\2\u0ba4\u0baa\3\2\2\2\u0ba5\u0ba7\7\u009d\2\2\u0ba6\u0ba8\t\'\2\2\u0ba7"+
		"\u0ba6\3\2\2\2\u0ba7\u0ba8\3\2\2\2\u0ba8\u0ba9\3\2\2\2\u0ba9\u0bab\5\u00e0"+
		"q\2\u0baa\u0ba5\3\2\2\2\u0baa\u0bab\3\2\2\2\u0bab\u0bad\3\2\2\2\u0bac"+
		"\u0bae\5\u00d0i\2\u0bad\u0bac\3\2\2\2\u0bad\u0bae\3\2\2\2\u0bae\u0bb0"+
		"\3\2\2\2\u0baf\u0bb1\5\u00fc\177\2\u0bb0\u0baf\3\2\2\2\u0bb0\u0bb1\3\2"+
		"\2\2\u0bb1\u0bb3\3\2\2\2\u0bb2\u0bb4\5\u00be`\2\u0bb3\u0bb2\3\2\2\2\u0bb3"+
		"\u0bb4\3\2\2\2\u0bb4\u0bb6\3\2\2\2\u0bb5\u0b7e\3\2\2\2\u0bb5\u0b82\3\2"+
		"\2\2\u0bb5\u0b86\3\2\2\2\u0bb5\u0b9f\3\2\2\2\u0bb6\u00b5\3\2\2\2\u0bb7"+
		"\u0bba\5\u00ccg\2\u0bb8\u0bba\5\u00ceh\2\u0bb9\u0bb7\3\2\2\2\u0bb9\u0bb8"+
		"\3\2\2\2\u0bba\u00b7\3\2\2\2\u0bbb\u0bcb\5\u00b4[\2\u0bbc\u0bbd\t(\2\2"+
		"\u0bbd\u0bbe\7\u03c1\2\2\u0bbe\u0bbf\5\u022a\u0116\2\u0bbf\u0bc7\7\u03c2"+
		"\2\2\u0bc0\u0bc1\7\u03c3\2\2\u0bc1\u0bc2\7\u03c1\2\2\u0bc2\u0bc3\5\u022a"+
		"\u0116\2\u0bc3\u0bc4\7\u03c2\2\2\u0bc4\u0bc6\3\2\2\2\u0bc5\u0bc0\3\2\2"+
		"\2\u0bc6\u0bc9\3\2\2\2\u0bc7\u0bc5\3\2\2\2\u0bc7\u0bc8\3\2\2\2\u0bc8\u0bcb"+
		"\3\2\2\2\u0bc9\u0bc7\3\2\2\2\u0bca\u0bbb\3\2\2\2\u0bca\u0bbc\3\2\2\2\u0bcb"+
		"\u00b9\3\2\2\2\u0bcc\u0bcd\5\u01ec\u00f7\2\u0bcd\u0bd0\7\u03b8\2\2\u0bce"+
		"\u0bd1\5\u0250\u0129\2\u0bcf\u0bd1\7\'\2\2\u0bd0\u0bce\3\2\2\2\u0bd0\u0bcf"+
		"\3\2\2\2\u0bd1\u00bb\3\2\2\2\u0bd2\u0bd5\5\u0202\u0102\2\u0bd3\u0bd5\7"+
		"\u03db\2\2\u0bd4\u0bd2\3\2\2\2\u0bd4\u0bd3\3\2\2\2\u0bd5\u00bd\3\2\2\2"+
		"\u0bd6\u0bd7\7:\2\2\u0bd7\u0bdd\7\u00a1\2\2\u0bd8\u0bd9\7\\\2\2\u0bd9"+
		"\u0bda\7F\2\2\u0bda\u0bdb\7\u01ec\2\2\u0bdb\u0bdd\7\u019e\2\2\u0bdc\u0bd6"+
		"\3\2\2\2\u0bdc\u0bd8\3\2\2\2\u0bdd\u00bf\3\2\2\2\u0bde\u0be0\7)\2\2\u0bdf"+
		"\u0be1\7^\2\2\u0be0\u0bdf\3\2\2\2\u0be0\u0be1\3\2\2\2\u0be1\u0be3\3\2"+
		"\2\2\u0be2\u0be4\7\u01ca\2\2\u0be3\u0be2\3\2\2\2\u0be3\u0be4\3\2\2\2\u0be4"+
		"\u0be6\3\2\2\2\u0be5\u0be7\7E\2\2\u0be6\u0be5\3\2\2\2\u0be6\u0be7\3\2"+
		"\2\2\u0be7\u0be8\3\2\2\2\u0be8\u0be9\7=\2\2\u0be9\u0bef\5\u01ea\u00f6"+
		"\2\u0bea\u0beb\7q\2\2\u0beb\u0bec\7\u03c1\2\2\u0bec\u0bed\5\u0222\u0112"+
		"\2\u0bed\u0bee\7\u03c2\2\2\u0bee\u0bf0\3\2\2\2\u0bef\u0bea\3\2\2\2\u0bef"+
		"\u0bf0\3\2\2\2\u0bf0\u0bf3\3\2\2\2\u0bf1\u0bf2\7\u00a7\2\2\u0bf2\u0bf4"+
		"\5\u0250\u0129\2\u0bf3\u0bf1\3\2\2\2\u0bf3\u0bf4\3\2\2\2\u0bf4\u0bf6\3"+
		"\2\2\2\u0bf5\u0bf7\5\u00d0i\2\u0bf6\u0bf5\3\2\2\2\u0bf6\u0bf7\3\2\2\2"+
		"\u0bf7\u0bfa\3\2\2\2\u0bf8\u0bf9\7X\2\2\u0bf9\u0bfb\5\u0208\u0105\2\u0bfa"+
		"\u0bf8\3\2\2\2\u0bfa\u0bfb\3\2\2\2\u0bfb\u00c1\3\2\2\2\u0bfc\u0bfe\7)"+
		"\2\2\u0bfd\u0bff\7^\2\2\u0bfe\u0bfd\3\2\2\2\u0bfe\u0bff\3\2\2\2\u0bff"+
		"\u0c01\3\2\2\2\u0c00\u0c02\7\u01ca\2\2\u0c01\u0c00\3\2\2\2\u0c01\u0c02"+
		"\3\2\2\2\u0c02\u0c04\3\2\2\2\u0c03\u0c05\7E\2\2\u0c04\u0c03\3\2\2\2\u0c04"+
		"\u0c05\3\2\2\2\u0c05\u0c2d\3\2\2\2\u0c06\u0c09\5\u01ea\u00f6\2\u0c07\u0c08"+
		"\7\u03c0\2\2\u0c08\u0c0a\7\u03b0\2\2\u0c09\u0c07\3\2\2\2\u0c09\u0c0a\3"+
		"\2\2\2\u0c0a\u0c13\3\2\2\2\u0c0b\u0c0c\7\u03c3\2\2\u0c0c\u0c0f\5\u01ea"+
		"\u00f6\2\u0c0d\u0c0e\7\u03c0\2\2\u0c0e\u0c10\7\u03b0\2\2\u0c0f\u0c0d\3"+
		"\2\2\2\u0c0f\u0c10\3\2\2\2\u0c10\u0c12\3\2\2\2\u0c11\u0c0b\3\2\2\2\u0c12"+
		"\u0c15\3\2\2\2\u0c13\u0c11\3\2\2\2\u0c13\u0c14\3\2\2\2\u0c14\u0c16\3\2"+
		"\2\2\u0c15\u0c13\3\2\2\2\u0c16\u0c17\7=\2\2\u0c17\u0c18\5\u00d4k\2\u0c18"+
		"\u0c2e\3\2\2\2\u0c19\u0c1a\7=\2\2\u0c1a\u0c1d\5\u01ea\u00f6\2\u0c1b\u0c1c"+
		"\7\u03c0\2\2\u0c1c\u0c1e\7\u03b0\2\2\u0c1d\u0c1b\3\2\2\2\u0c1d\u0c1e\3"+
		"\2\2\2\u0c1e\u0c27\3\2\2\2\u0c1f\u0c20\7\u03c3\2\2\u0c20\u0c23\5\u01ea"+
		"\u00f6\2\u0c21\u0c22\7\u03c0\2\2\u0c22\u0c24\7\u03b0\2\2\u0c23\u0c21\3"+
		"\2\2\2\u0c23\u0c24\3\2\2\2\u0c24\u0c26\3\2\2\2\u0c25\u0c1f\3\2\2\2\u0c26"+
		"\u0c29\3\2\2\2\u0c27\u0c25\3\2\2\2\u0c27\u0c28\3\2\2\2\u0c28\u0c2a\3\2"+
		"\2\2\u0c29\u0c27\3\2\2\2\u0c2a\u0c2b\7\u00a4\2\2\u0c2b\u0c2c\5\u00d4k"+
		"\2\u0c2c\u0c2e\3\2\2\2\u0c2d\u0c06\3\2\2\2\u0c2d\u0c19\3\2\2\2\u0c2e\u0c31"+
		"\3\2\2\2\u0c2f\u0c30\7\u00a7\2\2\u0c30\u0c32\5\u0250\u0129\2\u0c31\u0c2f"+
		"\3\2\2\2\u0c31\u0c32\3\2\2\2\u0c32\u00c3\3\2\2\2\u0c33\u0c34\7\u015f\2"+
		"\2\u0c34\u0c35\5\u01ea\u00f6\2\u0c35\u0c3a\7\u01b1\2\2\u0c36\u0c38\7\r"+
		"\2\2\u0c37\u0c36\3\2\2\2\u0c37\u0c38\3\2\2\2\u0c38\u0c39\3\2\2\2\u0c39"+
		"\u0c3b\5\u0202\u0102\2\u0c3a\u0c37\3\2\2\2\u0c3a\u0c3b\3\2\2\2\u0c3b\u00c5"+
		"\3\2\2\2\u0c3c\u0c3d\7\u015f\2\2\u0c3d\u0c3e\5\u01ea\u00f6\2\u0c3e\u0c3f"+
		"\7v\2\2\u0c3f\u0c46\5\u0202\u0102\2\u0c40\u0c41\5\u0258\u012d\2\u0c41"+
		"\u0c42\7\u03c1\2\2\u0c42\u0c43\5\u022c\u0117\2\u0c43\u0c44\7\u03c2\2\2"+
		"\u0c44\u0c47\3\2\2\2\u0c45\u0c47\t)\2\2\u0c46\u0c40\3\2\2\2\u0c46\u0c45"+
		"\3\2\2\2\u0c47\u0c4a\3\2\2\2\u0c48\u0c49\7\u00a7\2\2\u0c49\u0c4b\5\u0250"+
		"\u0129\2\u0c4a\u0c48\3\2\2\2\u0c4a\u0c4b\3\2\2\2\u0c4b\u0c4e\3\2\2\2\u0c4c"+
		"\u0c4d\7X\2\2\u0c4d\u0c4f\5\u0208\u0105\2\u0c4e\u0c4c\3\2\2\2\u0c4e\u0c4f"+
		"\3\2\2\2\u0c4f\u00c7\3\2\2\2\u0c50\u0c51\7\u015f\2\2\u0c51\u0c52\5\u01ea"+
		"\u00f6\2\u0c52\u0c53\7v\2\2\u0c53\u0c56\t*\2\2\u0c54\u0c55\7\u00a7\2\2"+
		"\u0c55\u0c57\5\u0250\u0129\2\u0c56\u0c54\3\2\2\2\u0c56\u0c57\3\2\2\2\u0c57"+
		"\u0c5a\3\2\2\2\u0c58\u0c59\7X\2\2\u0c59\u0c5b\5\u0208\u0105\2\u0c5a\u0c58"+
		"\3\2\2\2\u0c5a\u0c5b\3\2\2\2\u0c5b\u00c9\3\2\2\2\u0c5c\u0c5d\7\u015f\2"+
		"\2\u0c5d\u0c5e\5\u01ea\u00f6\2\u0c5e\u0c5f\7\u011a\2\2\u0c5f\u00cb\3\2"+
		"\2\2\u0c60\u0c62\7\u00a1\2\2\u0c61\u0c63\7^\2\2\u0c62\u0c61\3\2\2\2\u0c62"+
		"\u0c63\3\2\2\2\u0c63\u0c65\3\2\2\2\u0c64\u0c66\7E\2\2\u0c65\u0c64\3\2"+
		"\2\2\u0c65\u0c66\3\2\2\2\u0c66\u0c67\3\2\2\2\u0c67\u0c6c\5\u01ea\u00f6"+
		"\2\u0c68\u0c6a\7\r\2\2\u0c69\u0c68\3\2\2\2\u0c69\u0c6a\3\2\2\2\u0c6a\u0c6b"+
		"\3\2\2\2\u0c6b\u0c6d\5\u0202\u0102\2\u0c6c\u0c69\3\2\2\2\u0c6c\u0c6d\3"+
		"\2\2\2\u0c6d\u0c6e\3\2\2\2\u0c6e\u0c6f\7\u0087\2\2\u0c6f\u0c74\5\u00ba"+
		"^\2\u0c70\u0c71\7\u03c3\2\2\u0c71\u0c73\5\u00ba^\2\u0c72\u0c70\3\2\2\2"+
		"\u0c73\u0c76\3\2\2\2\u0c74\u0c72\3\2\2\2\u0c74\u0c75\3\2\2\2\u0c75\u0c79"+
		"\3\2\2\2\u0c76\u0c74\3\2\2\2\u0c77\u0c78\7\u00a7\2\2\u0c78\u0c7a\5\u0250"+
		"\u0129\2\u0c79\u0c77\3\2\2\2\u0c79\u0c7a\3\2\2\2\u0c7a\u0c7c\3\2\2\2\u0c7b"+
		"\u0c7d\5\u00d0i\2\u0c7c\u0c7b\3\2\2\2\u0c7c\u0c7d\3\2\2\2\u0c7d\u0c7f"+
		"\3\2\2\2\u0c7e\u0c80\5\u00fc\177\2\u0c7f\u0c7e\3\2\2\2\u0c7f\u0c80\3\2"+
		"\2\2\u0c80\u00cd\3\2\2\2\u0c81\u0c83\7\u00a1\2\2\u0c82\u0c84\7^\2\2\u0c83"+
		"\u0c82\3\2\2\2\u0c83\u0c84\3\2\2\2\u0c84\u0c86\3\2\2\2\u0c85\u0c87\7E"+
		"\2\2\u0c86\u0c85\3\2\2\2\u0c86\u0c87\3\2\2\2\u0c87\u0c88\3\2\2\2\u0c88"+
		"\u0c89\5\u00d4k\2\u0c89\u0c8a\7\u0087\2\2\u0c8a\u0c8f\5\u00ba^\2\u0c8b"+
		"\u0c8c\7\u03c3\2\2\u0c8c\u0c8e\5\u00ba^\2\u0c8d\u0c8b\3\2\2\2\u0c8e\u0c91"+
		"\3\2\2\2\u0c8f\u0c8d\3\2\2\2\u0c8f\u0c90\3\2\2\2\u0c90\u0c94\3\2\2\2\u0c91"+
		"\u0c8f\3\2\2\2\u0c92\u0c93\7\u00a7\2\2\u0c93\u0c95\5\u0250\u0129\2\u0c94"+
		"\u0c92\3\2\2\2\u0c94\u0c95\3\2\2\2\u0c95\u00cf\3\2\2\2\u0c96\u0c97\7m"+
		"\2\2\u0c97\u0c98\7\22\2\2\u0c98\u0c9d\5\u00d2j\2\u0c99\u0c9a\7\u03c3\2"+
		"\2\u0c9a\u0c9c\5\u00d2j\2\u0c9b\u0c99\3\2\2\2\u0c9c\u0c9f\3\2\2\2\u0c9d"+
		"\u0c9b\3\2\2\2\u0c9d\u0c9e\3\2\2\2\u0c9e\u00d1\3\2\2\2\u0c9f\u0c9d\3\2"+
		"\2\2\u0ca0\u0ca2\5\u0250\u0129\2\u0ca1\u0ca3\t+\2\2\u0ca2\u0ca1\3\2\2"+
		"\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u00d3\3\2\2\2\u0ca4\u0ca9\5\u00d6l\2\u0ca5"+
		"\u0ca6\7\u03c3\2\2\u0ca6\u0ca8\5\u00d6l\2\u0ca7\u0ca5\3\2\2\2\u0ca8\u0cab"+
		"\3\2\2\2\u0ca9\u0ca7\3\2\2\2\u0ca9\u0caa\3\2\2\2\u0caa\u00d5\3\2\2\2\u0cab"+
		"\u0ca9\3\2\2\2\u0cac\u0cb0\5\u00d8m\2\u0cad\u0caf\5\u00dep\2\u0cae\u0cad"+
		"\3\2\2\2\u0caf\u0cb2\3\2\2\2\u0cb0\u0cae\3\2\2\2\u0cb0\u0cb1\3\2\2\2\u0cb1"+
		"\u0cbe\3\2\2\2\u0cb2\u0cb0\3\2\2\2\u0cb3\u0cb4\7\u03c1\2\2\u0cb4\u0cb8"+
		"\5\u00d8m\2\u0cb5\u0cb7\5\u00dep\2\u0cb6\u0cb5\3\2\2\2\u0cb7\u0cba\3\2"+
		"\2\2\u0cb8\u0cb6\3\2\2\2\u0cb8\u0cb9\3\2\2\2\u0cb9\u0cbb\3\2\2\2\u0cba"+
		"\u0cb8\3\2\2\2\u0cbb\u0cbc\7\u03c2\2\2\u0cbc\u0cbe\3\2\2\2\u0cbd\u0cac"+
		"\3\2\2\2\u0cbd\u0cb3\3\2\2\2\u0cbe\u00d7\3\2\2\2\u0cbf\u0cc5\5\u01ea\u00f6"+
		"\2\u0cc0\u0cc1\7q\2\2\u0cc1\u0cc2\7\u03c1\2\2\u0cc2\u0cc3\5\u0222\u0112"+
		"\2\u0cc3\u0cc4\7\u03c2\2\2\u0cc4\u0cc6\3\2\2\2\u0cc5\u0cc0\3\2\2\2\u0cc5"+
		"\u0cc6\3\2\2\2\u0cc6\u0ccb\3\2\2\2\u0cc7\u0cc9\7\r\2\2\u0cc8\u0cc7\3\2"+
		"\2\2\u0cc8\u0cc9\3\2\2\2\u0cc9\u0cca\3\2\2\2\u0cca\u0ccc\5\u0202\u0102"+
		"\2\u0ccb\u0cc8\3\2\2\2\u0ccb\u0ccc\3\2\2\2\u0ccc\u0cd5\3\2\2\2\u0ccd\u0cd2"+
		"\5\u00dan\2\u0cce\u0ccf\7\u03c3\2\2\u0ccf\u0cd1\5\u00dan\2\u0cd0\u0cce"+
		"\3\2\2\2\u0cd1\u0cd4\3\2\2\2\u0cd2\u0cd0\3\2\2\2\u0cd2\u0cd3\3\2\2\2\u0cd3"+
		"\u0cd6\3\2\2\2\u0cd4\u0cd2\3\2\2\2\u0cd5\u0ccd\3\2\2\2\u0cd5\u0cd6\3\2"+
		"\2\2\u0cd6\u0ce8\3\2\2\2\u0cd7\u0cdd\5\u00b4[\2\u0cd8\u0cd9\7\u03c1\2"+
		"\2\u0cd9\u0cda\5\u00b4[\2\u0cda\u0cdb\7\u03c2\2\2\u0cdb\u0cdd\3\2\2\2"+
		"\u0cdc\u0cd7\3\2\2\2\u0cdc\u0cd8\3\2\2\2\u0cdd\u0cdf\3\2\2\2\u0cde\u0ce0"+
		"\7\r\2\2\u0cdf\u0cde\3\2\2\2\u0cdf\u0ce0\3\2\2\2\u0ce0\u0ce1\3\2\2\2\u0ce1"+
		"\u0ce2\5\u0202\u0102\2\u0ce2\u0ce8\3\2\2\2\u0ce3\u0ce4\7\u03c1\2\2\u0ce4"+
		"\u0ce5\5\u00d4k\2\u0ce5\u0ce6\7\u03c2\2\2\u0ce6\u0ce8\3\2\2\2\u0ce7\u0cbf"+
		"\3\2\2\2\u0ce7\u0cdc\3\2\2\2\u0ce7\u0ce3\3\2\2\2\u0ce8\u00d9\3\2\2\2\u0ce9"+
		"\u0cea\t,\2\2\u0cea\u0ced\t\24\2\2\u0ceb\u0cec\7:\2\2\u0cec\u0cee\5\u00dc"+
		"o\2\u0ced\u0ceb\3\2\2\2\u0ced\u0cee\3\2\2\2\u0cee\u0cef\3\2\2\2\u0cef"+
		"\u0cf0\7\u03c1\2\2\u0cf0\u0cf1\5\u0222\u0112\2\u0cf1\u0cf2\7\u03c2\2\2"+
		"\u0cf2\u00db\3\2\2\2\u0cf3\u0cf9\7P\2\2\u0cf4\u0cf5\7m\2\2\u0cf5\u0cf9"+
		"\7\22\2\2\u0cf6\u0cf7\7A\2\2\u0cf7\u0cf9\7\22\2\2\u0cf8\u0cf3\3\2\2\2"+
		"\u0cf8\u0cf4\3\2\2\2\u0cf8\u0cf6\3\2\2\2\u0cf9\u00dd\3\2\2\2\u0cfa\u0cfc"+
		"\t-\2\2\u0cfb\u0cfa\3\2\2\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u0cfd\3\2\2\2\u0cfd"+
		"\u0cfe\7P\2\2\u0cfe\u0d06\5\u00d8m\2\u0cff\u0d00\7h\2\2\u0d00\u0d07\5"+
		"\u0250\u0129\2\u0d01\u0d02\7\u00a4\2\2\u0d02\u0d03\7\u03c1\2\2\u0d03\u0d04"+
		"\5\u0222\u0112\2\u0d04\u0d05\7\u03c2\2\2\u0d05\u0d07\3\2\2\2\u0d06\u0cff"+
		"\3\2\2\2\u0d06\u0d01\3\2\2\2\u0d06\u0d07\3\2\2\2\u0d07\u0d27\3\2\2\2\u0d08"+
		"\u0d09\7\u0094\2\2\u0d09\u0d0c\5\u00d8m\2\u0d0a\u0d0b\7h\2\2\u0d0b\u0d0d"+
		"\5\u0250\u0129\2\u0d0c\u0d0a\3\2\2\2\u0d0c\u0d0d\3\2\2\2\u0d0d\u0d27\3"+
		"\2\2\2\u0d0e\u0d10\t.\2\2\u0d0f\u0d11\7o\2\2\u0d10\u0d0f\3\2\2\2\u0d10"+
		"\u0d11\3\2\2\2\u0d11\u0d12\3\2\2\2\u0d12\u0d13\7P\2\2\u0d13\u0d1b\5\u00d8"+
		"m\2\u0d14\u0d15\7h\2\2\u0d15\u0d1c\5\u0250\u0129\2\u0d16\u0d17\7\u00a4"+
		"\2\2\u0d17\u0d18\7\u03c1\2\2\u0d18\u0d19\5\u0222\u0112\2\u0d19\u0d1a\7"+
		"\u03c2\2\2\u0d1a\u0d1c\3\2\2\2\u0d1b\u0d14\3\2\2\2\u0d1b\u0d16\3\2\2\2"+
		"\u0d1c\u0d27\3\2\2\2\u0d1d\u0d22\7d\2\2\u0d1e\u0d20\t.\2\2\u0d1f\u0d21"+
		"\7o\2\2\u0d20\u0d1f\3\2\2\2\u0d20\u0d21\3\2\2\2\u0d21\u0d23\3\2\2\2\u0d22"+
		"\u0d1e\3\2\2\2\u0d22\u0d23\3\2\2\2\u0d23\u0d24\3\2\2\2\u0d24\u0d25\7P"+
		"\2\2\u0d25\u0d27\5\u00d8m\2\u0d26\u0cfb\3\2\2\2\u0d26\u0d08\3\2\2\2\u0d26"+
		"\u0d0e\3\2\2\2\u0d26\u0d1d\3\2\2\2\u0d27\u00df\3\2\2\2\u0d28\u0d29\7\u03c1"+
		"\2\2\u0d29\u0d2a\5\u00e4s\2\u0d2a\u0d2b\7\u03c2\2\2\u0d2b\u0d31\3\2\2"+
		"\2\u0d2c\u0d2d\7\u03c1\2\2\u0d2d\u0d2e\5\u00e0q\2\u0d2e\u0d2f\7\u03c2"+
		"\2\2\u0d2f\u0d31\3\2\2\2\u0d30\u0d28\3\2\2\2\u0d30\u0d2c\3\2\2\2\u0d31"+
		"\u00e1\3\2\2\2\u0d32\u0d33\7\u03c1\2\2\u0d33\u0d34\5\u00e6t\2\u0d34\u0d35"+
		"\7\u03c2\2\2\u0d35\u0d3b\3\2\2\2\u0d36\u0d37\7\u03c1\2\2\u0d37\u0d38\5"+
		"\u00e2r\2\u0d38\u0d39\7\u03c2\2\2\u0d39\u0d3b\3\2\2\2\u0d3a\u0d32\3\2"+
		"\2\2\u0d3a\u0d36\3\2\2\2\u0d3b\u00e3\3\2\2\2\u0d3c\u0d40\7\u0086\2\2\u0d3d"+
		"\u0d3f\5\u00ecw\2\u0d3e\u0d3d\3\2\2\2\u0d3f\u0d42\3\2\2\2\u0d40\u0d3e"+
		"\3\2\2\2\u0d40\u0d41\3\2\2\2\u0d41\u0d43\3\2\2\2\u0d42\u0d40\3\2\2\2\u0d43"+
		"\u0d45\5\u00eex\2\u0d44\u0d46\5\u00f2z\2\u0d45\u0d44\3\2\2\2\u0d45\u0d46"+
		"\3\2\2\2\u0d46\u0d47\3\2\2\2\u0d47\u0d49\5\u00f8}\2\u0d48\u0d4a\5\u00d0"+
		"i\2\u0d49\u0d48\3\2\2\2\u0d49\u0d4a\3\2\2\2\u0d4a\u0d4c\3\2\2\2\u0d4b"+
		"\u0d4d\5\u00fc\177\2\u0d4c\u0d4b\3\2\2\2\u0d4c\u0d4d\3\2\2\2\u0d4d\u0d61"+
		"\3\2\2\2\u0d4e\u0d52\7\u0086\2\2\u0d4f\u0d51\5\u00ecw\2\u0d50\u0d4f\3"+
		"\2\2\2\u0d51\u0d54\3\2\2\2\u0d52\u0d50\3\2\2\2\u0d52\u0d53\3\2\2\2\u0d53"+
		"\u0d55\3\2\2\2\u0d54\u0d52\3\2\2\2\u0d55\u0d56\5\u00eex\2\u0d56\u0d58"+
		"\5\u00f8}\2\u0d57\u0d59\5\u00d0i\2\u0d58\u0d57\3\2\2\2\u0d58\u0d59\3\2"+
		"\2\2\u0d59\u0d5b\3\2\2\2\u0d5a\u0d5c\5\u00fc\177\2\u0d5b\u0d5a\3\2\2\2"+
		"\u0d5b\u0d5c\3\2\2\2\u0d5c\u0d5e\3\2\2\2\u0d5d\u0d5f\5\u00f2z\2\u0d5e"+
		"\u0d5d\3\2\2\2\u0d5e\u0d5f\3\2\2\2\u0d5f\u0d61\3\2\2\2\u0d60\u0d3c\3\2"+
		"\2\2\u0d60\u0d4e\3\2\2\2\u0d61\u00e5\3\2\2\2\u0d62\u0d66\7\u0086\2\2\u0d63"+
		"\u0d65\5\u00ecw\2\u0d64\u0d63\3\2\2\2\u0d65\u0d68\3\2\2\2\u0d66\u0d64"+
		"\3\2\2\2\u0d66\u0d67\3\2\2\2\u0d67\u0d69\3\2\2\2\u0d68\u0d66\3\2\2\2\u0d69"+
		"\u0d6a\5\u00eex\2\u0d6a\u0d6c\5\u00f8}\2\u0d6b\u0d6d\5\u00d0i\2\u0d6c"+
		"\u0d6b\3\2\2\2\u0d6c\u0d6d\3\2\2\2\u0d6d\u0d6f\3\2\2\2\u0d6e\u0d70\5\u00fc"+
		"\177\2\u0d6f\u0d6e\3\2\2\2\u0d6f\u0d70\3\2\2\2\u0d70\u00e7\3\2\2\2\u0d71"+
		"\u0d73\7\u009d\2\2\u0d72\u0d74\t\'\2\2\u0d73\u0d72\3\2\2\2\u0d73\u0d74"+
		"\3\2\2\2\u0d74\u0d75\3\2\2\2\u0d75\u0d76\5\u00e2r\2\u0d76\u00e9\3\2\2"+
		"\2\u0d77\u0d79\7\u009d\2\2\u0d78\u0d7a\t\'\2\2\u0d79\u0d78\3\2\2\2\u0d79"+
		"\u0d7a\3\2\2\2\u0d7a\u0d7d\3\2\2\2\u0d7b\u0d7e\5\u00e6t\2\u0d7c\u0d7e"+
		"\5\u00e2r\2\u0d7d\u0d7b\3\2\2\2\u0d7d\u0d7c\3\2\2\2\u0d7e\u00eb\3\2\2"+
		"\2\u0d7f\u0d88\t/\2\2\u0d80\u0d88\7C\2\2\u0d81\u0d88\7\u0094\2\2\u0d82"+
		"\u0d88\7\u0091\2\2\u0d83\u0d88\7\u008f\2\2\u0d84\u0d88\7\u01fb\2\2\u0d85"+
		"\u0d88\t\60\2\2\u0d86\u0d88\7\u0090\2\2\u0d87\u0d7f\3\2\2\2\u0d87\u0d80"+
		"\3\2\2\2\u0d87\u0d81\3\2\2\2\u0d87\u0d82\3\2\2\2\u0d87\u0d83\3\2\2\2\u0d87"+
		"\u0d84\3\2\2\2\u0d87\u0d85\3\2\2\2\u0d87\u0d86\3\2\2\2\u0d88\u00ed\3\2"+
		"\2\2\u0d89\u0d8c\7\u03b0\2\2\u0d8a\u0d8c\5\u00f0y\2\u0d8b\u0d89\3\2\2"+
		"\2\u0d8b\u0d8a\3\2\2\2\u0d8c\u0d91\3\2\2\2\u0d8d\u0d8e\7\u03c3\2\2\u0d8e"+
		"\u0d90\5\u00f0y\2\u0d8f\u0d8d\3\2\2\2\u0d90\u0d93\3\2\2\2\u0d91\u0d8f"+
		"\3\2\2\2\u0d91\u0d92\3\2\2\2\u0d92\u00ef\3\2\2\2\u0d93\u0d91\3\2\2\2\u0d94"+
		"\u0d95\5\u01e8\u00f5\2\u0d95\u0d96\7\u03c0\2\2\u0d96\u0d97\7\u03b0\2\2"+
		"\u0d97\u0db2\3\2\2\2\u0d98\u0d9d\5\u01ec\u00f7\2\u0d99\u0d9b\7\r\2\2\u0d9a"+
		"\u0d99\3\2\2\2\u0d9a\u0d9b\3\2\2\2\u0d9b\u0d9c\3\2\2\2\u0d9c\u0d9e\5\u0202"+
		"\u0102\2\u0d9d\u0d9a\3\2\2\2\u0d9d\u0d9e\3\2\2\2\u0d9e\u0db2\3\2\2\2\u0d9f"+
		"\u0da4\5\u023c\u011f\2\u0da0\u0da2\7\r\2\2\u0da1\u0da0\3\2\2\2\u0da1\u0da2"+
		"\3\2\2\2\u0da2\u0da3\3\2\2\2\u0da3\u0da5\5\u0202\u0102\2\u0da4\u0da1\3"+
		"\2\2\2\u0da4\u0da5\3\2\2\2\u0da5\u0db2\3\2\2\2\u0da6\u0da7\7\u03db\2\2"+
		"\u0da7\u0da9\7\u03a7\2\2\u0da8\u0da6\3\2\2\2\u0da8\u0da9\3\2\2\2\u0da9"+
		"\u0daa\3\2\2\2\u0daa\u0daf\5\u0250\u0129\2\u0dab\u0dad\7\r\2\2\u0dac\u0dab"+
		"\3\2\2\2\u0dac\u0dad\3\2\2\2\u0dad\u0dae\3\2\2\2\u0dae\u0db0\5\u0202\u0102"+
		"\2\u0daf\u0dac\3\2\2\2\u0daf\u0db0\3\2\2\2\u0db0\u0db2\3\2\2\2\u0db1\u0d94"+
		"\3\2\2\2\u0db1\u0d98\3\2\2\2\u0db1\u0d9f\3\2\2\2\u0db1\u0da8\3\2\2\2\u0db2"+
		"\u00f1\3\2\2\2\u0db3\u0db4\7M\2\2\u0db4\u0db9\5\u00bc_\2\u0db5\u0db6\7"+
		"\u03c3\2\2\u0db6\u0db8\5\u00bc_\2\u0db7\u0db5\3\2\2\2\u0db8\u0dbb\3\2"+
		"\2\2\u0db9\u0db7\3\2\2\2\u0db9\u0dba\3\2\2\2\u0dba\u0dd8\3\2\2\2\u0dbb"+
		"\u0db9\3\2\2\2\u0dbc\u0dbd\7M\2\2\u0dbd\u0dbe\7\u0139\2\2\u0dbe\u0dd8"+
		"\7\u03d0\2\2\u0dbf\u0dc0\7M\2\2\u0dc0\u0dc1\7p\2\2\u0dc1\u0dc5\7\u03d0"+
		"\2\2\u0dc2\u0dc3\7\30\2\2\u0dc3\u0dc4\7\u0087\2\2\u0dc4\u0dc6\5\u01f4"+
		"\u00fb\2\u0dc5\u0dc2\3\2\2\2\u0dc5\u0dc6\3\2\2\2\u0dc6\u0dcd\3\2\2\2\u0dc7"+
		"\u0dc9\t$\2\2\u0dc8\u0dca\5\u00f4{\2\u0dc9\u0dc8\3\2\2\2\u0dca\u0dcb\3"+
		"\2\2\2\u0dcb\u0dc9\3\2\2\2\u0dcb\u0dcc\3\2\2\2\u0dcc\u0dce\3\2\2\2\u0dcd"+
		"\u0dc7\3\2\2\2\u0dcd\u0dce\3\2\2\2\u0dce\u0dd5\3\2\2\2\u0dcf\u0dd1\7Z"+
		"\2\2\u0dd0\u0dd2\5\u00f6|\2\u0dd1\u0dd0\3\2\2\2\u0dd2\u0dd3\3\2\2\2\u0dd3"+
		"\u0dd1\3\2\2\2\u0dd3\u0dd4\3\2\2\2\u0dd4\u0dd6\3\2\2\2\u0dd5\u0dcf\3\2"+
		"\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6\u0dd8\3\2\2\2\u0dd7\u0db3\3\2\2\2\u0dd7"+
		"\u0dbc\3\2\2\2\u0dd7\u0dbf\3\2\2\2\u0dd8\u00f3\3\2\2\2\u0dd9\u0dda\7\u0096"+
		"\2\2\u0dda\u0ddb\7\22\2\2\u0ddb\u0de6\7\u03d0\2\2\u0ddc\u0dde\7k\2\2\u0ddd"+
		"\u0ddc\3\2\2\2\u0ddd\u0dde\3\2\2\2\u0dde\u0ddf\3\2\2\2\u0ddf\u0de0\7\63"+
		"\2\2\u0de0\u0de1\7\22\2\2\u0de1\u0de6\7\u03d0\2\2\u0de2\u0de3\7\64\2\2"+
		"\u0de3\u0de4\7\22\2\2\u0de4\u0de6\7\u03d0\2\2\u0de5\u0dd9\3\2\2\2\u0de5"+
		"\u0ddd\3\2\2\2\u0de5\u0de2\3\2\2\2\u0de6\u00f5\3\2\2\2\u0de7\u0de8\7\u0093"+
		"\2\2\u0de8\u0de9\7\22\2\2\u0de9\u0dee\7\u03d0\2\2\u0dea\u0deb\7\u0096"+
		"\2\2\u0deb\u0dec\7\22\2\2\u0dec\u0dee\7\u03d0\2\2\u0ded\u0de7\3\2\2\2"+
		"\u0ded\u0dea\3\2\2\2\u0dee\u00f7\3\2\2\2\u0def\u0df0\7=\2\2\u0df0\u0df3"+
		"\5\u00d4k\2\u0df1\u0df2\7\u00a7\2\2\u0df2\u0df4\5\u0250\u0129\2\u0df3"+
		"\u0df1\3\2\2\2\u0df3\u0df4\3\2\2\2\u0df4\u0e03\3\2\2\2\u0df5\u0df6\7A"+
		"\2\2\u0df6\u0df7\7\22\2\2\u0df7\u0dfc\5\u00fa~\2\u0df8\u0df9\7\u03c3\2"+
		"\2\u0df9\u0dfb\5\u00fa~\2\u0dfa\u0df8\3\2\2\2\u0dfb\u0dfe\3\2\2\2\u0dfc"+
		"\u0dfa\3\2\2\2\u0dfc\u0dfd\3\2\2\2\u0dfd\u0e01\3\2\2\2\u0dfe\u0dfc\3\2"+
		"\2\2\u0dff\u0e00\7\u00a9\2\2\u0e00\u0e02\7\u01e2\2\2\u0e01\u0dff\3\2\2"+
		"\2\u0e01\u0e02\3\2\2\2\u0e02\u0e04\3\2\2\2\u0e03\u0df5\3\2\2\2\u0e03\u0e04"+
		"\3\2\2\2\u0e04\u0e07\3\2\2\2\u0e05\u0e06\7B\2\2\u0e06\u0e08\5\u0250\u0129"+
		"\2\u0e07\u0e05\3\2\2\2\u0e07\u0e08\3\2\2\2\u0e08\u00f9\3\2\2\2\u0e09\u0e0b"+
		"\5\u0250\u0129\2\u0e0a\u0e0c\t+\2\2\u0e0b\u0e0a\3\2\2\2\u0e0b\u0e0c\3"+
		"\2\2\2\u0e0c\u00fb\3\2\2\2\u0e0d\u0e18\7X\2\2\u0e0e\u0e0f\5\u00fe\u0080"+
		"\2\u0e0f\u0e10\7\u03c3\2\2\u0e10\u0e12\3\2\2\2\u0e11\u0e0e\3\2\2\2\u0e11"+
		"\u0e12\3\2\2\2\u0e12\u0e13\3\2\2\2\u0e13\u0e19\5\u00fe\u0080\2\u0e14\u0e15"+
		"\5\u00fe\u0080\2\u0e15\u0e16\7\u01ab\2\2\u0e16\u0e17\5\u00fe\u0080\2\u0e17"+
		"\u0e19\3\2\2\2\u0e18\u0e11\3\2\2\2\u0e18\u0e14\3\2\2\2\u0e19\u00fd\3\2"+
		"\2\2\u0e1a\u0e1d\5\u0208\u0105\2\u0e1b\u0e1d\5\u01f2\u00fa\2\u0e1c\u0e1a"+
		"\3\2\2\2\u0e1c\u0e1b\3\2\2\2\u0e1d\u00ff\3\2\2\2\u0e1e\u0e1f\7\u01ff\2"+
		"\2\u0e1f\u0e28\7\u0214\2\2\u0e20\u0e25\5\u0116\u008c\2\u0e21\u0e22\7\u03c3"+
		"\2\2\u0e22\u0e24\5\u0116\u008c\2\u0e23\u0e21\3\2\2\2\u0e24\u0e27\3\2\2"+
		"\2\u0e25\u0e23\3\2\2\2\u0e25\u0e26\3\2\2\2\u0e26\u0e29\3\2\2\2\u0e27\u0e25"+
		"\3\2\2\2\u0e28\u0e20\3\2\2\2\u0e28\u0e29\3\2\2\2\u0e29\u0101\3\2\2\2\u0e2a"+
		"\u0e2c\7\u010a\2\2\u0e2b\u0e2d\7\u0229\2\2\u0e2c\u0e2b\3\2\2\2\u0e2c\u0e2d"+
		"\3\2\2\2\u0e2d\u0103\3\2\2\2\u0e2e\u0e30\7\u0120\2\2\u0e2f\u0e31\7\u0229"+
		"\2\2\u0e30\u0e2f\3\2\2\2\u0e30\u0e31\3\2\2\2\u0e31\u0e37\3\2\2\2\u0e32"+
		"\u0e34\7\f\2\2\u0e33\u0e35\7\u01a7\2\2\u0e34\u0e33\3\2\2\2\u0e34\u0e35"+
		"\3\2\2\2\u0e35\u0e36\3\2\2\2\u0e36\u0e38\7\u0113\2\2\u0e37\u0e32\3\2\2"+
		"\2\u0e37\u0e38\3\2\2\2\u0e38\u0e3d\3\2\2\2\u0e39\u0e3b\7\u01a7\2\2\u0e3a"+
		"\u0e39\3\2\2\2\u0e3a\u0e3b\3\2\2\2\u0e3b\u0e3c\3\2\2\2\u0e3c\u0e3e\7z"+
		"\2\2\u0e3d\u0e3a\3\2\2\2\u0e3d\u0e3e\3\2\2\2\u0e3e\u0105\3\2\2\2\u0e3f"+
		"\u0e41\7\u01e1\2\2\u0e40\u0e42\7\u0229\2\2\u0e41\u0e40\3\2\2\2\u0e41\u0e42"+
		"\3\2\2\2\u0e42\u0e48\3\2\2\2\u0e43\u0e45\7\f\2\2\u0e44\u0e46\7\u01a7\2"+
		"\2\u0e45\u0e44\3\2\2\2\u0e45\u0e46\3\2\2\2\u0e46\u0e47\3\2\2\2\u0e47\u0e49"+
		"\7\u0113\2\2\u0e48\u0e43\3\2\2\2\u0e48\u0e49\3\2\2\2\u0e49\u0e4e\3\2\2"+
		"\2\u0e4a\u0e4c\7\u01a7\2\2\u0e4b\u0e4a\3\2\2\2\u0e4b\u0e4c\3\2\2\2\u0e4c"+
		"\u0e4d\3\2\2\2\u0e4d\u0e4f\7z\2\2\u0e4e\u0e4b\3\2\2\2\u0e4e\u0e4f\3\2"+
		"\2\2\u0e4f\u0107\3\2\2\2\u0e50\u0e51\7\u01e7\2\2\u0e51\u0e52\5\u0202\u0102"+
		"\2\u0e52\u0109\3\2\2\2\u0e53\u0e55\7\u01e1\2\2\u0e54\u0e56\7\u0229\2\2"+
		"\u0e55\u0e54\3\2\2\2\u0e55\u0e56\3\2\2\2\u0e56\u0e57\3\2\2\2\u0e57\u0e59"+
		"\7\u0098\2\2\u0e58\u0e5a\7\u01e7\2\2\u0e59\u0e58\3\2\2\2\u0e59\u0e5a\3"+
		"\2\2\2\u0e5a\u0e5b\3\2\2\2\u0e5b\u0e5c\5\u0202\u0102\2\u0e5c\u010b\3\2"+
		"\2\2\u0e5d\u0e5e\7z\2\2\u0e5e\u0e5f\7\u01e7\2\2\u0e5f\u0e60\5\u0202\u0102"+
		"\2\u0e60\u010d\3\2\2\2\u0e61\u0e62\7\\\2\2\u0e62\u0e63\7\u023b\2\2\u0e63"+
		"\u0e68\5\u0118\u008d\2\u0e64\u0e65\7\u03c3\2\2\u0e65\u0e67\5\u0118\u008d"+
		"\2\u0e66\u0e64\3\2\2\2\u0e67\u0e6a\3\2\2\2\u0e68\u0e66\3\2\2\2\u0e68\u0e69"+
		"\3\2\2\2\u0e69\u010f\3\2\2\2\u0e6a\u0e68\3\2\2\2\u0e6b\u0e6c\7\u009f\2"+
		"\2\u0e6c\u0e6d\7\u023b\2\2\u0e6d\u0111\3\2\2\2\u0e6e\u0e6f\7\u0087\2\2"+
		"\u0e6f\u0e70\7\u0106\2\2\u0e70\u0e71\7\u03b8\2\2\u0e71\u0e72\t\30\2\2"+
		"\u0e72\u0113\3\2\2\2\u0e73\u0e75\7\u0087\2\2\u0e74\u0e76\t\61\2\2\u0e75"+
		"\u0e74\3\2\2\2\u0e75\u0e76\3\2\2\2\u0e76\u0e77\3\2\2\2\u0e77\u0e78\7\u0214"+
		"\2\2\u0e78\u0e7d\5\u011c\u008f\2\u0e79\u0e7a\7\u03c3\2\2\u0e7a\u0e7c\5"+
		"\u011c\u008f\2\u0e7b\u0e79\3\2\2\2\u0e7c\u0e7f\3\2\2\2\u0e7d\u0e7b\3\2"+
		"\2\2\u0e7d\u0e7e\3\2\2\2\u0e7e\u0115\3\2\2\2\u0e7f\u0e7d\3\2\2\2\u0e80"+
		"\u0e81\7\u00a9\2\2\u0e81\u0e82\7\u0127\2\2\u0e82\u0e88\7\u01f2\2\2\u0e83"+
		"\u0e84\7v\2\2\u0e84\u0e88\7\u00aa\2\2\u0e85\u0e86\7v\2\2\u0e86\u0e88\7"+
		"\u01b0\2\2\u0e87\u0e80\3\2\2\2\u0e87\u0e83\3\2\2\2\u0e87\u0e85\3\2\2\2"+
		"\u0e88\u0117\3\2\2\2\u0e89\u0e8e\5\u01ea\u00f6\2\u0e8a\u0e8c\7\r\2\2\u0e8b"+
		"\u0e8a\3\2\2\2\u0e8b\u0e8c\3\2\2\2\u0e8c\u0e8d\3\2\2\2\u0e8d\u0e8f\5\u0202"+
		"\u0102\2\u0e8e\u0e8b\3\2\2\2\u0e8e\u0e8f\3\2\2\2\u0e8f\u0e90\3\2\2\2\u0e90"+
		"\u0e91\5\u011a\u008e\2\u0e91\u0119\3\2\2\2\u0e92\u0e94\7v\2\2\u0e93\u0e95"+
		"\7\u017b\2\2\u0e94\u0e93\3\2\2\2\u0e94\u0e95\3\2\2\2\u0e95\u0e9b\3\2\2"+
		"\2\u0e96\u0e98\7^\2\2\u0e97\u0e96\3\2\2\2\u0e97\u0e98\3\2\2\2\u0e98\u0e99"+
		"\3\2\2\2\u0e99\u0e9b\7\u00aa\2\2\u0e9a\u0e92\3\2\2\2\u0e9a\u0e97\3\2\2"+
		"\2\u0e9b\u011b\3\2\2\2\u0e9c\u0e9d\7\u0171\2\2\u0e9d\u0e9e\7\u0179\2\2"+
		"\u0e9e\u0ea4\5\u011e\u0090\2\u0e9f\u0ea0\7v\2\2\u0ea0\u0ea4\7\u00aa\2"+
		"\2\u0ea1\u0ea2\7v\2\2\u0ea2\u0ea4\7\u01b0\2\2\u0ea3\u0e9c\3\2\2\2\u0ea3"+
		"\u0e9f\3\2\2\2\u0ea3\u0ea1\3\2\2\2\u0ea4\u011d\3\2\2\2\u0ea5\u0ea6\7\u0278"+
		"\2\2\u0ea6\u0ead\7v\2\2\u0ea7\u0ea8\7v\2\2\u0ea8\u0ead\7\u0279\2\2\u0ea9"+
		"\u0eaa\7v\2\2\u0eaa\u0ead\7\u027a\2\2\u0eab\u0ead\7\u027b\2\2\u0eac\u0ea5"+
		"\3\2\2\2\u0eac\u0ea7\3\2\2\2\u0eac\u0ea9\3\2\2\2\u0eac\u0eab\3\2\2\2\u0ead"+
		"\u011f\3\2\2\2\u0eae\u0eaf\7\27\2\2\u0eaf\u0eb0\7\u017e\2\2\u0eb0\u0eb1"+
		"\7\u0098\2\2\u0eb1\u0eb6\5\u0132\u009a\2\u0eb2\u0eb3\7\u03c3\2\2\u0eb3"+
		"\u0eb5\5\u0132\u009a\2\u0eb4\u0eb2\3\2\2\2\u0eb5\u0eb8\3\2\2\2\u0eb6\u0eb4"+
		"\3\2\2\2\u0eb6\u0eb7\3\2\2\2\u0eb7\u0eba\3\2\2\2\u0eb8\u0eb6\3\2\2\2\u0eb9"+
		"\u0ebb\5\u013a\u009e\2\u0eba\u0eb9\3\2\2\2\u0eba\u0ebb\3\2\2\2\u0ebb\u0121"+
		"\3\2\2\2\u0ebc\u0ebd\7\27\2\2\u0ebd\u0ebe\7\u01dd\2\2\u0ebe\u0ebf\7\u0153"+
		"\2\2\u0ebf\u0ec4\5\u013c\u009f\2\u0ec0\u0ec1\7\u03c3\2\2\u0ec1\u0ec3\5"+
		"\u013c\u009f\2\u0ec2\u0ec0\3\2\2\2\u0ec3\u0ec6\3\2\2\2\u0ec4\u0ec2\3\2"+
		"\2\2\u0ec4\u0ec5\3\2\2\2\u0ec5\u0123\3\2\2\2\u0ec6\u0ec4\3\2\2\2\u0ec7"+
		"\u0ec8\7t\2\2\u0ec8\u0ec9\t\62\2\2\u0ec9\u0ece\7\u017d\2\2\u0eca\u0ecb"+
		"\7\u0098\2\2\u0ecb\u0ecf\7\u03d0\2\2\u0ecc\u0ecd\7\17\2\2\u0ecd\u0ecf"+
		"\7\u03d0\2\2\u0ece\u0eca\3\2\2\2\u0ece\u0ecc\3\2\2\2\u0ecf\u0125\3\2\2"+
		"\2\u0ed0\u0ed1\7\u01de\2\2\u0ed1\u0ed2\7\u017e\2\2\u0ed2\u0127\3\2\2\2"+
		"\u0ed3\u0ed4\7\u01de\2\2\u0ed4\u0ed6\7\u01f0\2\2\u0ed5\u0ed7\7\b\2\2\u0ed6"+
		"\u0ed5\3\2\2\2\u0ed6\u0ed7\3\2\2\2\u0ed7\u0ed9\3\2\2\2\u0ed8\u0eda\5\u013a"+
		"\u009e\2\u0ed9\u0ed8\3\2\2\2\u0ed9\u0eda\3\2\2\2\u0eda\u0129\3\2\2\2\u0edb"+
		"\u0edc\7\u01ff\2\2\u0edc\u0ee5\7\u01f0\2\2\u0edd\u0ee2\5\u0140\u00a1\2"+
		"\u0ede\u0edf\7\u03c3\2\2\u0edf\u0ee1\5\u0140\u00a1\2\u0ee0\u0ede\3\2\2"+
		"\2\u0ee1\u0ee4\3\2\2\2\u0ee2\u0ee0\3\2\2\2\u0ee2\u0ee3\3\2\2\2\u0ee3\u0ee6"+
		"\3\2\2\2\u0ee4\u0ee2\3\2\2\2\u0ee5\u0edd\3\2\2\2\u0ee5\u0ee6\3\2\2\2\u0ee6"+
		"\u0ee9\3\2\2\2\u0ee7\u0ee8\7\u021c\2\2\u0ee8\u0eea\5\u0142\u00a2\2\u0ee9"+
		"\u0ee7\3\2\2\2\u0ee9\u0eea\3\2\2\2\u0eea\u0eee\3\2\2\2\u0eeb\u0eed\5\u0144"+
		"\u00a3\2\u0eec\u0eeb\3\2\2\2\u0eed\u0ef0\3\2\2\2\u0eee\u0eec\3\2\2\2\u0eee"+
		"\u0eef\3\2\2\2\u0eef\u0ef2\3\2\2\2\u0ef0\u0eee\3\2\2\2\u0ef1\u0ef3\5\u013a"+
		"\u009e\2\u0ef2\u0ef1\3\2\2\2\u0ef2\u0ef3\3\2\2\2\u0ef3\u012b\3\2\2\2\u0ef4"+
		"\u0ef5\7\u0205\2\2\u0ef5\u0efe\7\u01f0\2\2\u0ef6\u0efb\5\u0140\u00a1\2"+
		"\u0ef7\u0ef8\7\u03c3\2\2\u0ef8\u0efa\5\u0140\u00a1\2\u0ef9\u0ef7\3\2\2"+
		"\2\u0efa\u0efd\3\2\2\2\u0efb\u0ef9\3\2\2\2\u0efb\u0efc\3\2\2\2\u0efc\u0eff"+
		"\3\2\2\2\u0efd\u0efb\3\2\2\2\u0efe\u0ef6\3\2\2\2\u0efe\u0eff\3\2\2\2\u0eff"+
		"\u012d\3\2\2\2\u0f00\u0f01\7\u01ff\2\2\u0f01\u0f02\7\u015e\2\2\u0f02\u012f"+
		"\3\2\2\2\u0f03\u0f04\7\u0205\2\2\u0f04\u0f05\7\u015e\2\2\u0f05\u0131\3"+
		"\2\2\2\u0f06\u0f07\5\u0134\u009b\2\u0f07\u0f08\7\u03b8\2\2\u0f08\u0f09"+
		"\7\u03d0\2\2\u0f09\u0f24\3\2\2\2\u0f0a\u0f0b\5\u0136\u009c\2\u0f0b\u0f0c"+
		"\7\u03b8\2\2\u0f0c\u0f0d\5\u0208\u0105\2\u0f0d\u0f24\3\2\2\2\u0f0e\u0f0f"+
		"\5\u0138\u009d\2\u0f0f\u0f10\7\u03b8\2\2\u0f10\u0f11\t\30\2\2\u0f11\u0f24"+
		"\3\2\2\2\u0f12\u0f13\7\u0182\2\2\u0f13\u0f14\7\u03b8\2\2\u0f14\u0f24\7"+
		"\u03d3\2\2\u0f15\u0f16\7\u0165\2\2\u0f16\u0f17\7\u03b8\2\2\u0f17\u0f20"+
		"\7\u03c1\2\2\u0f18\u0f1d\5\u0202\u0102\2\u0f19\u0f1a\7\u03c3\2\2\u0f1a"+
		"\u0f1c\5\u0202\u0102\2\u0f1b\u0f19\3\2\2\2\u0f1c\u0f1f\3\2\2\2\u0f1d\u0f1b"+
		"\3\2\2\2\u0f1d\u0f1e\3\2\2\2\u0f1e\u0f21\3\2\2\2\u0f1f\u0f1d\3\2\2\2\u0f20"+
		"\u0f18\3\2\2\2\u0f20\u0f21\3\2\2\2\u0f21\u0f22\3\2\2\2\u0f22\u0f24\7\u03c2"+
		"\2\2\u0f23\u0f06\3\2\2\2\u0f23\u0f0a\3\2\2\2\u0f23\u0f0e\3\2\2\2\u0f23"+
		"\u0f12\3\2\2\2\u0f23\u0f15\3\2\2\2\u0f24\u0133\3\2\2\2\u0f25\u0f26\t\63"+
		"\2\2\u0f26\u0135\3\2\2\2\u0f27\u0f28\t\64\2\2\u0f28\u0137\3\2\2\2\u0f29"+
		"\u0f2a\t\65\2\2\u0f2a\u0139\3\2\2\2\u0f2b\u0f2c\7:\2\2\u0f2c\u0f2d\7\u0115"+
		"\2\2\u0f2d\u0f2e\7\u03d0\2\2\u0f2e\u013b\3\2\2\2\u0f2f\u0f30\7\u01d6\2"+
		"\2\u0f30\u0f31\7\u03b8\2\2\u0f31\u0f32\7\u03c1\2\2\u0f32\u0f33\5\u0222"+
		"\u0112\2\u0f33\u0f34\7\u03c2\2\2\u0f34\u0f61\3\2\2\2\u0f35\u0f36\7\u01d8"+
		"\2\2\u0f36\u0f37\7\u03b8\2\2\u0f37\u0f38\7\u03c1\2\2\u0f38\u0f39\5\u0222"+
		"\u0112\2\u0f39\u0f3a\7\u03c2\2\2\u0f3a\u0f61\3\2\2\2\u0f3b\u0f3c\7\u01d7"+
		"\2\2\u0f3c\u0f3d\7\u03b8\2\2\u0f3d\u0f3e\7\u03c1\2\2\u0f3e\u0f3f\5\u0224"+
		"\u0113\2\u0f3f\u0f40\7\u03c2\2\2\u0f40\u0f61\3\2\2\2\u0f41\u0f42\7\u01d9"+
		"\2\2\u0f42\u0f43\7\u03b8\2\2\u0f43\u0f44\7\u03c1\2\2\u0f44\u0f45\5\u0224"+
		"\u0113\2\u0f45\u0f46\7\u03c2\2\2\u0f46\u0f61\3\2\2\2\u0f47\u0f48\7\u01db"+
		"\2\2\u0f48\u0f49\7\u03b8\2\2\u0f49\u0f4a\7\u03c1\2\2\u0f4a\u0f4b\5\u022e"+
		"\u0118\2\u0f4b\u0f4c\7\u03c2\2\2\u0f4c\u0f61\3\2\2\2\u0f4d\u0f4e\7\u01dc"+
		"\2\2\u0f4e\u0f4f\7\u03b8\2\2\u0f4f\u0f50\7\u03c1\2\2\u0f50\u0f51\5\u022e"+
		"\u0118\2\u0f51\u0f52\7\u03c2\2\2\u0f52\u0f61\3\2\2\2\u0f53\u0f54\7\u01da"+
		"\2\2\u0f54\u0f55\7\u03b8\2\2\u0f55\u0f56\7\u03c1\2\2\u0f56\u0f5b\5\u013e"+
		"\u00a0\2\u0f57\u0f58\7\u03c3\2\2\u0f58\u0f5a\5\u013e\u00a0\2\u0f59\u0f57"+
		"\3\2\2\2\u0f5a\u0f5d\3\2\2\2\u0f5b\u0f59\3\2\2\2\u0f5b\u0f5c\3\2\2\2\u0f5c"+
		"\u0f5e\3\2\2\2\u0f5d\u0f5b\3\2\2\2\u0f5e\u0f5f\7\u03c2\2\2\u0f5f\u0f61"+
		"\3\2\2\2\u0f60\u0f2f\3\2\2\2\u0f60\u0f35\3\2\2\2\u0f60\u0f3b\3\2\2\2\u0f60"+
		"\u0f41\3\2\2\2\u0f60\u0f47\3\2\2\2\u0f60\u0f4d\3\2\2\2\u0f60\u0f53\3\2"+
		"\2\2\u0f61\u013d\3\2\2\2\u0f62\u0f63\7\u03c1\2\2\u0f63\u0f64\5\u01ea\u00f6"+
		"\2\u0f64\u0f65\7\u03c3\2\2\u0f65\u0f66\5\u01ea\u00f6\2\u0f66\u0f67\7\u03c2"+
		"\2\2\u0f67\u013f\3\2\2\2\u0f68\u0f69\t\66\2\2\u0f69\u0141\3\2\2\2\u0f6a"+
		"\u0f6b\t\67\2\2\u0f6b\u0f6c\7\u03b8\2\2\u0f6c\u0f7d\5\u0146\u00a4\2\u0f6d"+
		"\u0f6e\7\u0184\2\2\u0f6e\u0f6f\7\u03b8\2\2\u0f6f\u0f70\7\u03d0\2\2\u0f70"+
		"\u0f71\7\u03c3\2\2\u0f71\u0f72\7\u0185\2\2\u0f72\u0f73\7\u03b8\2\2\u0f73"+
		"\u0f7d\5\u0208\u0105\2\u0f74\u0f75\7\u01d0\2\2\u0f75\u0f76\7\u03b8\2\2"+
		"\u0f76\u0f77\7\u03d0\2\2\u0f77\u0f78\7\u03c3\2\2\u0f78\u0f79\7\u01d1\2"+
		"\2\u0f79\u0f7a\7\u03b8\2\2\u0f7a\u0f7d\5\u0208\u0105\2\u0f7b\u0f7d\7\u01f9"+
		"\2\2\u0f7c\u0f6a\3\2\2\2\u0f7c\u0f6d\3\2\2\2\u0f7c\u0f74\3\2\2\2\u0f7c"+
		"\u0f7b\3\2\2\2\u0f7d\u0143\3\2\2\2\u0f7e\u0f7f\7\u021e\2\2\u0f7f\u0f80"+
		"\7\u03b8\2\2\u0f80\u0f8b\7\u03d0\2\2\u0f81\u0f82\7\u01bb\2\2\u0f82\u0f83"+
		"\7\u03b8\2\2\u0f83\u0f8b\7\u03d0\2\2\u0f84\u0f85\7\u0130\2\2\u0f85\u0f86"+
		"\7\u03b8\2\2\u0f86\u0f8b\7\u03d0\2\2\u0f87\u0f88\7\u01be\2\2\u0f88\u0f89"+
		"\7\u03b8\2\2\u0f89\u0f8b\7\u03d0\2\2\u0f8a\u0f7e\3\2\2\2\u0f8a\u0f81\3"+
		"\2\2\2\u0f8a\u0f84\3\2\2\2\u0f8a\u0f87\3\2\2\2\u0f8b\u0145\3\2\2\2\u0f8c"+
		"\u0f91\5\u01fa\u00fe\2\u0f8d\u0f8e\7\u03c3\2\2\u0f8e\u0f90\5\u01fa\u00fe"+
		"\2\u0f8f\u0f8d\3\2\2\2\u0f90\u0f93\3\2\2\2\u0f91\u0f8f\3\2\2\2\u0f91\u0f92"+
		"\3\2\2\2\u0f92\u0f96\3\2\2\2\u0f93\u0f91\3\2\2\2\u0f94\u0f96\7\u03d0\2"+
		"\2\u0f95\u0f8c\3\2\2\2\u0f95\u0f94\3\2\2\2\u0f96\u0147\3\2\2\2\u0f97\u0f98"+
		"\7\u022c\2\2\u0f98\u0f99\t8\2\2\u0f99\u0f9b\5\u01fc\u00ff\2\u0f9a\u0f9c"+
		"\t9\2\2\u0f9b\u0f9a\3\2\2\2\u0f9b\u0f9c\3\2\2\2\u0f9c\u0149\3\2\2\2\u0f9d"+
		"\u0f9e\7\u022c\2\2\u0f9e\u0f9f\7\u013e\2\2\u0f9f\u0fa5\5\u01fc\u00ff\2"+
		"\u0fa0\u0fa3\7\u020c\2\2\u0fa1\u0fa2\7:\2\2\u0fa2\u0fa4\7\u019c\2\2\u0fa3"+
		"\u0fa1\3\2\2\2\u0fa3\u0fa4\3\2\2\2\u0fa4\u0fa6\3\2\2\2\u0fa5\u0fa0\3\2"+
		"\2\2\u0fa5\u0fa6\3\2\2\2\u0fa6\u014b\3\2\2\2\u0fa7\u0fa8\7\u022c\2\2\u0fa8"+
		"\u0fa9\7\u01c2\2\2\u0fa9\u0faa\5\u01fc\u00ff\2\u0faa\u014d\3\2\2\2\u0fab"+
		"\u0fac\7\u022c\2\2\u0fac\u0fad\7\u0120\2\2\u0fad\u0fb0\5\u01fc\u00ff\2"+
		"\u0fae\u0faf\7\u01ae\2\2\u0faf\u0fb1\7\u01bc\2\2\u0fb0\u0fae\3\2\2\2\u0fb0"+
		"\u0fb1\3\2\2\2\u0fb1\u014f\3\2\2\2\u0fb2\u0fb3\7\u022c\2\2\u0fb3\u0fb4"+
		"\7\u01e1\2\2\u0fb4\u0fb5\5\u01fc\u00ff\2\u0fb5\u0151\3\2\2\2\u0fb6\u0fb7"+
		"\7\u022c\2\2\u0fb7\u0fba\7\u01cc\2\2\u0fb8\u0fb9\7\37\2\2\u0fb9\u0fbb"+
		"\5\u01fc\u00ff\2\u0fba\u0fb8\3\2\2\2\u0fba\u0fbb\3\2\2\2\u0fbb\u0153\3"+
		"\2\2\2\u0fbc\u0fbd\7\u01c2\2\2\u0fbd\u0fbe\5\u0202\u0102\2\u0fbe\u0fc1"+
		"\7=\2\2\u0fbf\u0fc2\7\u03d0\2\2\u0fc0\u0fc2\7\u03db\2\2\u0fc1\u0fbf\3"+
		"\2\2\2\u0fc1\u0fc0\3\2\2\2\u0fc2\u0155\3\2\2\2\u0fc3\u0fc4\7\u023d\2\2"+
		"\u0fc4\u0fc7\5\u0202\u0102\2\u0fc5\u0fc6\7\u00a4\2\2\u0fc6\u0fc8\5\u0230"+
		"\u0119\2\u0fc7\u0fc5\3\2\2\2\u0fc7\u0fc8\3\2\2\2\u0fc8\u0157\3\2\2\2\u0fc9"+
		"\u0fca\t:\2\2\u0fca\u0fcb\7\u01c2\2\2\u0fcb\u0fcc\5\u0202\u0102\2\u0fcc"+
		"\u0159\3\2\2\2\u0fcd\u0fd0\5\u015c\u00af\2\u0fce\u0fd0\5\6\4\2\u0fcf\u0fcd"+
		"\3\2\2\2\u0fcf\u0fce\3\2\2\2\u0fd0\u015b\3\2\2\2\u0fd1\u0fd2\5\u0202\u0102"+
		"\2\u0fd2\u0fd3\7\u03cc\2\2\u0fd3\u0fd5\3\2\2\2\u0fd4\u0fd1\3\2\2\2\u0fd4"+
		"\u0fd5\3\2\2\2\u0fd5\u0fd6\3\2\2\2\u0fd6\u0ffd\7\u010a\2\2\u0fd7\u0fd8"+
		"\5\u0170\u00b9\2\u0fd8\u0fd9\7\u03c4\2\2\u0fd9\u0fdb\3\2\2\2\u0fda\u0fd7"+
		"\3\2\2\2\u0fdb\u0fde\3\2\2\2\u0fdc\u0fda\3\2\2\2\u0fdc\u0fdd\3\2\2\2\u0fdd"+
		"\u0fe4\3\2\2\2\u0fde\u0fdc\3\2\2\2\u0fdf\u0fe0\5\u0172\u00ba\2\u0fe0\u0fe1"+
		"\7\u03c4\2\2\u0fe1\u0fe3\3\2\2\2\u0fe2\u0fdf\3\2\2\2\u0fe3\u0fe6\3\2\2"+
		"\2\u0fe4\u0fe2\3\2\2\2\u0fe4\u0fe5\3\2\2\2\u0fe5\u0fec\3\2\2\2\u0fe6\u0fe4"+
		"\3\2\2\2\u0fe7\u0fe8\5\u0174\u00bb\2\u0fe8\u0fe9\7\u03c4\2\2\u0fe9\u0feb"+
		"\3\2\2\2\u0fea\u0fe7\3\2\2\2\u0feb\u0fee\3\2\2\2\u0fec\u0fea\3\2\2\2\u0fec"+
		"\u0fed\3\2\2\2\u0fed\u0ff4\3\2\2\2\u0fee\u0fec\3\2\2\2\u0fef\u0ff0\5\u0176"+
		"\u00bc\2\u0ff0\u0ff1\7\u03c4\2\2\u0ff1\u0ff3\3\2\2\2\u0ff2\u0fef\3\2\2"+
		"\2\u0ff3\u0ff6\3\2\2\2\u0ff4\u0ff2\3\2\2\2\u0ff4\u0ff5\3\2\2\2\u0ff5\u0ffa"+
		"\3\2\2\2\u0ff6\u0ff4\3\2\2\2\u0ff7\u0ff9\5\u017a\u00be\2\u0ff8\u0ff7\3"+
		"\2\2\2\u0ff9\u0ffc\3\2\2\2\u0ffa\u0ff8\3\2\2\2\u0ffa\u0ffb\3\2\2\2\u0ffb"+
		"\u0ffe\3\2\2\2\u0ffc\u0ffa\3\2\2\2\u0ffd\u0fdc\3\2\2\2\u0ffd\u0ffe\3\2"+
		"\2\2\u0ffe\u0fff\3\2\2\2\u0fff\u1001\7\u013e\2\2\u1000\u1002\5\u0202\u0102"+
		"\2\u1001\u1000\3\2\2\2\u1001\u1002\3\2\2\2\u1002\u015d\3\2\2\2\u1003\u1006"+
		"\7\25\2\2\u1004\u1007\5\u0202\u0102\2\u1005\u1007\5\u0250\u0129\2\u1006"+
		"\u1004\3\2\2\2\u1006\u1005\3\2\2\2\u1006\u1007\3\2\2\2\u1007\u1009\3\2"+
		"\2\2\u1008\u100a\5\u017c\u00bf\2\u1009\u1008\3\2\2\2\u100a\u100b\3\2\2"+
		"\2\u100b\u1009\3\2\2\2\u100b\u100c\3\2\2\2\u100c\u1013\3\2\2\2\u100d\u100f"+
		"\7\61\2\2\u100e\u1010\5\u017a\u00be\2\u100f\u100e\3\2\2\2\u1010\u1011"+
		"\3\2\2\2\u1011\u100f\3\2\2\2\u1011\u1012\3\2\2\2\u1012\u1014\3\2\2\2\u1013"+
		"\u100d\3\2\2\2\u1013\u1014\3\2\2\2\u1014\u1015\3\2\2\2\u1015\u1016\7\u013e"+
		"\2\2\u1016\u1017\7\25\2\2\u1017\u015f\3\2\2\2\u1018\u1019\7D\2\2\u1019"+
		"\u101a\5\u0250\u0129\2\u101a\u101c\7\u0097\2\2\u101b\u101d\5\u017a\u00be"+
		"\2\u101c\u101b\3\2\2\2\u101d\u101e\3\2\2\2\u101e\u101c\3\2\2\2\u101e\u101f"+
		"\3\2\2\2\u101f\u1023\3\2\2\2\u1020\u1022\5\u017e\u00c0\2\u1021\u1020\3"+
		"\2\2\2\u1022\u1025\3\2\2\2\u1023\u1021\3\2\2\2\u1023\u1024\3\2\2\2\u1024"+
		"\u102c\3\2\2\2\u1025\u1023\3\2\2\2\u1026\u1028\7\61\2\2\u1027\u1029\5"+
		"\u017a\u00be\2\u1028\u1027\3\2\2\2\u1029\u102a\3\2\2\2\u102a\u1028\3\2"+
		"\2\2\u102a\u102b\3\2\2\2\u102b\u102d\3\2\2\2\u102c\u1026\3\2\2\2\u102c"+
		"\u102d\3\2\2\2\u102d\u102e\3\2\2\2\u102e\u102f\7\u013e\2\2\u102f\u1030"+
		"\7D\2\2\u1030\u0161\3\2\2\2\u1031\u1032\7O\2\2\u1032\u1033\5\u0202\u0102"+
		"\2\u1033\u0163\3\2\2\2\u1034\u1035\7U\2\2\u1035\u1036\5\u0202\u0102\2"+
		"\u1036\u0165\3\2\2\2\u1037\u1038\5\u0202\u0102\2\u1038\u1039\7\u03cc\2"+
		"\2\u1039\u103b\3\2\2\2\u103a\u1037\3\2\2\2\u103a\u103b\3\2\2\2\u103b\u103c"+
		"\3\2\2\2\u103c\u103e\7]\2\2\u103d\u103f\5\u017a\u00be\2\u103e\u103d\3"+
		"\2\2\2\u103f\u1040\3\2\2\2\u1040\u103e\3\2\2\2\u1040\u1041\3\2\2\2\u1041"+
		"\u1042\3\2\2\2\u1042\u1043\7\u013e\2\2\u1043\u1045\7]\2\2\u1044\u1046"+
		"\5\u0202\u0102\2\u1045\u1044\3\2\2\2\u1045\u1046\3\2\2\2\u1046\u0167\3"+
		"\2\2\2\u1047\u1048\5\u0202\u0102\2\u1048\u1049\7\u03cc\2\2\u1049\u104b"+
		"\3\2\2\2\u104a\u1047\3\2\2\2\u104a\u104b\3\2\2\2\u104b\u104c\3\2\2\2\u104c"+
		"\u104e\7|\2\2\u104d\u104f\5\u017a\u00be\2\u104e\u104d\3\2\2\2\u104f\u1050"+
		"\3\2\2\2\u1050\u104e\3\2\2\2\u1050\u1051\3\2\2\2\u1051\u1052\3\2\2\2\u1052"+
		"\u1053\7\u021c\2\2\u1053\u1054\5\u0250\u0129\2\u1054\u1055\7\u013e\2\2"+
		"\u1055\u1057\7|\2\2\u1056\u1058\5\u0202\u0102\2\u1057\u1056\3\2\2\2\u1057"+
		"\u1058\3\2\2\2\u1058\u0169\3\2\2\2\u1059\u105a\7\u0080\2\2\u105a\u105b"+
		"\5\u0250\u0129\2\u105b\u016b\3\2\2\2\u105c\u105d\5\u0202\u0102\2\u105d"+
		"\u105e\7\u03cc\2\2\u105e\u1060\3\2\2\2\u105f\u105c\3\2\2\2\u105f\u1060"+
		"\3\2\2\2\u1060\u1061\3\2\2\2\u1061\u1062\7\u00a8\2\2\u1062\u1063\5\u0250"+
		"\u0129\2\u1063\u1065\7\u0138\2\2\u1064\u1066\5\u017a\u00be\2\u1065\u1064"+
		"\3\2\2\2\u1066\u1067\3\2\2\2\u1067\u1065\3\2\2\2\u1067\u1068\3\2\2\2\u1068"+
		"\u1069\3\2\2\2\u1069\u106a\7\u013e\2\2\u106a\u106c\7\u00a8\2\2\u106b\u106d"+
		"\5\u0202\u0102\2\u106c\u106b\3\2\2\2\u106c\u106d\3\2\2\2\u106d\u016d\3"+
		"\2\2\2\u106e\u106f\7\u011a\2\2\u106f\u107e\5\u0202\u0102\2\u1070\u1075"+
		"\79\2\2\u1071\u1073\7\u01a6\2\2\u1072\u1071\3\2\2\2\u1072\u1073\3\2\2"+
		"\2\u1073\u1074\3\2\2\2\u1074\u1076\7=\2\2\u1075\u1072\3\2\2\2\u1075\u1076"+
		"\3\2\2\2\u1076\u1077\3\2\2\2\u1077\u1078\5\u0202\u0102\2\u1078\u1079\7"+
		"M\2\2\u1079\u107a\5\u0222\u0112\2\u107a\u107e\3\2\2\2\u107b\u107c\7\u01b1"+
		"\2\2\u107c\u107e\5\u0202\u0102\2\u107d\u106e\3\2\2\2\u107d\u1070\3\2\2"+
		"\2\u107d\u107b\3\2\2\2\u107e\u016f\3\2\2\2\u107f\u1080\7&\2\2\u1080\u1081"+
		"\5\u0222\u0112\2\u1081\u1084\5\u0216\u010c\2\u1082\u1083\7\'\2\2\u1083"+
		"\u1085\5\u0232\u011a\2\u1084\u1082\3\2\2\2\u1084\u1085\3\2\2\2\u1085\u0171"+
		"\3\2\2\2\u1086\u1087\7&\2\2\u1087\u1088\5\u0202\u0102\2\u1088\u1089\7"+
		"\34\2\2\u1089\u1090\7:\2\2\u108a\u1091\5\u0208\u0105\2\u108b\u108d\7\u008d"+
		"\2\2\u108c\u108e\7\u0222\2\2\u108d\u108c\3\2\2\2\u108d\u108e\3\2\2\2\u108e"+
		"\u108f\3\2\2\2\u108f\u1091\7\u03d0\2\2\u1090\u108a\3\2\2\2\u1090\u108b"+
		"\3\2\2\2\u1091\u0173\3\2\2\2\u1092\u1093\7&\2\2\u1093\u1094\5\u0202\u0102"+
		"\2\u1094\u1095\7#\2\2\u1095\u1096\7:\2\2\u1096\u1097\5\u00b4[\2\u1097"+
		"\u0175\3\2\2\2\u1098\u1099\7&\2\2\u1099\u109a\t;\2\2\u109a\u109b\7\u015f"+
		"\2\2\u109b\u109c\7:\2\2\u109c\u10a1\5\u0178\u00bd\2\u109d\u109e\7\u03c3"+
		"\2\2\u109e\u10a0\5\u0178\u00bd\2\u109f\u109d\3\2\2\2\u10a0\u10a3\3\2\2"+
		"\2\u10a1\u109f\3\2\2\2\u10a1\u10a2\3\2\2\2\u10a2\u10a4\3\2\2\2\u10a3\u10a1"+
		"\3\2\2\2\u10a4\u10a5\5\u015a\u00ae\2\u10a5\u0177\3\2\2\2\u10a6\u10b2\5"+
		"\u0208\u0105\2\u10a7\u10a9\7\u008d\2\2\u10a8\u10aa\7\u0222\2\2\u10a9\u10a8"+
		"\3\2\2\2\u10a9\u10aa\3\2\2\2\u10aa\u10ab\3\2\2\2\u10ab\u10b2\7\u03d0\2"+
		"\2\u10ac\u10b2\5\u0202\u0102\2\u10ad\u10b2\7\u008e\2\2\u10ae\u10af\7e"+
		"\2\2\u10af\u10b2\7\u0158\2\2\u10b0\u10b2\7\u008c\2\2\u10b1\u10a6\3\2\2"+
		"\2\u10b1\u10a7\3\2\2\2\u10b1\u10ac\3\2\2\2\u10b1\u10ad\3\2\2\2\u10b1\u10ae"+
		"\3\2\2\2\u10b1\u10b0\3\2\2\2\u10b2\u0179\3\2\2\2\u10b3\u10b6\5\24\13\2"+
		"\u10b4\u10b6\5\6\4\2\u10b5\u10b3\3\2\2\2\u10b5\u10b4\3\2\2\2\u10b6\u10b7"+
		"\3\2\2\2\u10b7\u10b8\7\u03c4\2\2\u10b8\u017b\3\2\2\2\u10b9\u10bc\7\u00a6"+
		"\2\2\u10ba\u10bd\5\u0214\u010b\2\u10bb\u10bd\5\u0250\u0129\2\u10bc\u10ba"+
		"\3\2\2\2\u10bc\u10bb\3\2\2\2\u10bd\u10be\3\2\2\2\u10be\u10c0\7\u0097\2"+
		"\2\u10bf\u10c1\5\u017a\u00be\2\u10c0\u10bf\3\2\2\2\u10c1\u10c2\3\2\2\2"+
		"\u10c2\u10c0\3\2\2\2\u10c2\u10c3\3\2\2\2\u10c3\u017d\3\2\2\2\u10c4\u10c5"+
		"\7\62\2\2\u10c5\u10c6\5\u0250\u0129\2\u10c6\u10c8\7\u0097\2\2\u10c7\u10c9"+
		"\5\u017a\u00be\2\u10c8\u10c7\3\2\2\2\u10c9\u10ca\3\2\2\2\u10ca\u10c8\3"+
		"\2\2\2\u10ca\u10cb\3\2\2\2\u10cb\u017f\3\2\2\2\u10cc\u10cd\7\t\2\2\u10cd"+
		"\u10ce\7\u021e\2\2\u10ce";
	private static final String _serializedATNSegment2 =
		"\u10d3\5\u0192\u00ca\2\u10cf\u10d0\7\u03c3\2\2\u10d0\u10d2\5\u0192\u00ca"+
		"\2\u10d1\u10cf\3\2\2\2\u10d2\u10d5\3\2\2\2\u10d3\u10d1\3\2\2\2\u10d3\u10d4"+
		"\3\2\2\2\u10d4\u1103\3\2\2\2\u10d5\u10d3\3\2\2\2\u10d6\u10d7\7\t\2\2\u10d7"+
		"\u10d9\7\u021e\2\2\u10d8\u10da\5\u0238\u011d\2\u10d9\u10d8\3\2\2\2\u10d9"+
		"\u10da\3\2\2\2\u10da\u10db\3\2\2\2\u10db\u10e0\5\u0194\u00cb\2\u10dc\u10dd"+
		"\7\u03c3\2\2\u10dd\u10df\5\u0194\u00cb\2\u10de\u10dc\3\2\2\2\u10df\u10e2"+
		"\3\2\2\2\u10e0\u10de\3\2\2\2\u10e0\u10e1\3\2\2\2\u10e1\u10f1\3\2\2\2\u10e2"+
		"\u10e0\3\2\2\2\u10e3\u10ef\7~\2\2\u10e4\u10f0\7\u01a9\2\2\u10e5\u10ec"+
		"\5\u0196\u00cc\2\u10e6\u10e8\7\f\2\2\u10e7\u10e6\3\2\2\2\u10e7\u10e8\3"+
		"\2\2\2\u10e8\u10e9\3\2\2\2\u10e9\u10eb\5\u0196\u00cc\2\u10ea\u10e7\3\2"+
		"\2\2\u10eb\u10ee\3\2\2\2\u10ec\u10ea\3\2\2\2\u10ec\u10ed\3\2\2\2\u10ed"+
		"\u10f0\3\2\2\2\u10ee\u10ec\3\2\2\2\u10ef\u10e4\3\2\2\2\u10ef\u10e5\3\2"+
		"\2\2\u10f0\u10f2\3\2\2\2\u10f1\u10e3\3\2\2\2\u10f1\u10f2\3\2\2\2\u10f2"+
		"\u10f9\3\2\2\2\u10f3\u10f5\7\u00a9\2\2\u10f4\u10f6\5\u0198\u00cd\2\u10f5"+
		"\u10f4\3\2\2\2\u10f6\u10f7\3\2\2\2\u10f7\u10f5\3\2\2\2\u10f7\u10f8\3\2"+
		"\2\2\u10f8\u10fa\3\2\2\2\u10f9\u10f3\3\2\2\2\u10f9\u10fa\3\2\2\2\u10fa"+
		"\u10ff\3\2\2\2\u10fb\u10fe\5\u019a\u00ce\2\u10fc\u10fe\5\u019c\u00cf\2"+
		"\u10fd\u10fb\3\2\2\2\u10fd\u10fc\3\2\2\2\u10fe\u1101\3\2\2\2\u10ff\u10fd"+
		"\3\2\2\2\u10ff\u1100\3\2\2\2\u1100\u1103\3\2\2\2\u1101\u10ff\3\2\2\2\u1102"+
		"\u10cc\3\2\2\2\u1102\u10d6\3\2\2\2\u1103\u0181\3\2\2\2\u1104\u1105\7 "+
		"\2\2\u1105\u1106\7\u021e\2\2\u1106\u110b\5\u0194\u00cb\2\u1107\u1108\7"+
		"\u03c3\2\2\u1108\u110a\5\u0194\u00cb\2\u1109\u1107\3\2\2\2\u110a\u110d"+
		"\3\2\2\2\u110b\u1109\3\2\2\2\u110b\u110c\3\2\2\2\u110c\u113b\3\2\2\2\u110d"+
		"\u110b\3\2\2\2\u110e\u110f\7 \2\2\u110f\u1111\7\u021e\2\2\u1110\u1112"+
		"\5\u023a\u011e\2\u1111\u1110\3\2\2\2\u1111\u1112\3\2\2\2\u1112\u1113\3"+
		"\2\2\2\u1113\u1118\5\u0194\u00cb\2\u1114\u1115\7\u03c3\2\2\u1115\u1117"+
		"\5\u0194\u00cb\2\u1116\u1114\3\2\2\2\u1117\u111a\3\2\2\2\u1118\u1116\3"+
		"\2\2\2\u1118\u1119\3\2\2\2\u1119\u1129\3\2\2\2\u111a\u1118\3\2\2\2\u111b"+
		"\u1127\7~\2\2\u111c\u1128\7\u01a9\2\2\u111d\u1124\5\u0196\u00cc\2\u111e"+
		"\u1120\7\f\2\2\u111f\u111e\3\2\2\2\u111f\u1120\3\2\2\2\u1120\u1121\3\2"+
		"\2\2\u1121\u1123\5\u0196\u00cc\2\u1122\u111f\3\2\2\2\u1123\u1126\3\2\2"+
		"\2\u1124\u1122\3\2\2\2\u1124\u1125\3\2\2\2\u1125\u1128\3\2\2\2\u1126\u1124"+
		"\3\2\2\2\u1127\u111c\3\2\2\2\u1127\u111d\3\2\2\2\u1128\u112a\3\2\2\2\u1129"+
		"\u111b\3\2\2\2\u1129\u112a\3\2\2\2\u112a\u1131\3\2\2\2\u112b\u112d\7\u00a9"+
		"\2\2\u112c\u112e\5\u0198\u00cd\2\u112d\u112c\3\2\2\2\u112e\u112f\3\2\2"+
		"\2\u112f\u112d\3\2\2\2\u112f\u1130\3\2\2\2\u1130\u1132\3\2\2\2\u1131\u112b"+
		"\3\2\2\2\u1131\u1132\3\2\2\2\u1132\u1137\3\2\2\2\u1133\u1136\5\u019a\u00ce"+
		"\2\u1134\u1136\5\u019c\u00cf\2\u1135\u1133\3\2\2\2\u1135\u1134\3\2\2\2"+
		"\u1136\u1139\3\2\2\2\u1137\u1135\3\2\2\2\u1137\u1138\3\2\2\2\u1138\u113b"+
		"\3\2\2\2\u1139\u1137\3\2\2\2\u113a\u1104\3\2\2\2\u113a\u110e\3\2\2\2\u113b"+
		"\u0183\3\2\2\2\u113c\u113d\7/\2\2\u113d\u113f\7\u021e\2\2\u113e\u1140"+
		"\5\u0238\u011d\2\u113f\u113e\3\2\2\2\u113f\u1140\3\2\2\2\u1140\u1141\3"+
		"\2\2\2\u1141\u1146\5\u01f0\u00f9\2\u1142\u1143\7\u03c3\2\2\u1143\u1145"+
		"\5\u01f0\u00f9\2\u1144\u1142\3\2\2\2\u1145\u1148\3\2\2\2\u1146\u1144\3"+
		"\2\2\2\u1146\u1147\3\2\2\2\u1147\u0185\3\2\2\2\u1148\u1146\3\2\2\2\u1149"+
		"\u114a\7@\2\2\u114a\u114f\5\u019e\u00d0\2\u114b\u114c\7\u03c3\2\2\u114c"+
		"\u114e\5\u019e\u00d0\2\u114d\u114b\3\2\2\2\u114e\u1151\3\2\2\2\u114f\u114d"+
		"\3\2\2\2\u114f\u1150\3\2\2\2\u1150\u1152\3\2\2\2\u1151\u114f\3\2\2\2\u1152"+
		"\u1154\7h\2\2\u1153\u1155\t<\2\2\u1154\u1153\3\2\2\2\u1154\u1155\3\2\2"+
		"\2\u1155\u1156\3\2\2\2\u1156\u1157\5\u01a2\u00d2\2\u1157\u1158\7\u0098"+
		"\2\2\u1158\u115d\5\u0194\u00cb\2\u1159\u115a\7\u03c3\2\2\u115a\u115c\5"+
		"\u0194\u00cb\2\u115b\u1159\3\2\2\2\u115c\u115f\3\2\2\2\u115d\u115b\3\2"+
		"\2\2\u115d\u115e\3\2\2\2\u115e\u116e\3\2\2\2\u115f\u115d\3\2\2\2\u1160"+
		"\u116c\7~\2\2\u1161\u116d\7\u01a9\2\2\u1162\u1169\5\u0196\u00cc\2\u1163"+
		"\u1165\7\f\2\2\u1164\u1163\3\2\2\2\u1164\u1165\3\2\2\2\u1165\u1166\3\2"+
		"\2\2\u1166\u1168\5\u0196\u00cc\2\u1167\u1164\3\2\2\2\u1168\u116b\3\2\2"+
		"\2\u1169\u1167\3\2\2\2\u1169\u116a\3\2\2\2\u116a\u116d\3\2\2\2\u116b\u1169"+
		"\3\2\2\2\u116c\u1161\3\2\2\2\u116c\u1162\3\2\2\2\u116d\u116f\3\2\2\2\u116e"+
		"\u1160\3\2\2\2\u116e\u116f\3\2\2\2\u116f\u1179\3\2\2\2\u1170\u1176\7\u00a9"+
		"\2\2\u1171\u1172\7@\2\2\u1172\u1175\7j\2\2\u1173\u1175\5\u0198\u00cd\2"+
		"\u1174\u1171\3\2\2\2\u1174\u1173\3\2\2\2\u1175\u1178\3\2\2\2\u1176\u1174"+
		"\3\2\2\2\u1176\u1177\3\2\2\2\u1177\u117a\3\2\2\2\u1178\u1176\3\2\2\2\u1179"+
		"\u1170\3\2\2\2\u1179\u117a\3\2\2\2\u117a\u0187\3\2\2\2\u117b\u117c\7@"+
		"\2\2\u117c\u117d\7\u01c8\2\2\u117d\u117e\7h\2\2\u117e\u117f\5\u01f0\u00f9"+
		"\2\u117f\u1180\7\u0098\2\2\u1180\u1185\5\u01f0\u00f9\2\u1181\u1182\7\u03c3"+
		"\2\2\u1182\u1184\5\u01f0\u00f9\2\u1183\u1181\3\2\2\2\u1184\u1187\3\2\2"+
		"\2\u1185\u1183\3\2\2\2\u1185\u1186\3\2\2\2\u1186\u118b\3\2\2\2\u1187\u1185"+
		"\3\2\2\2\u1188\u1189\7\u00a9\2\2\u1189\u118a\7@\2\2\u118a\u118c\7j\2\2"+
		"\u118b\u1188\3\2\2\2\u118b\u118c\3\2\2\2\u118c\u0189\3\2\2\2\u118d\u118e"+
		"\7{\2\2\u118e\u118f\7\u021e\2\2\u118f\u1194\5\u01a4\u00d3\2\u1190\u1191"+
		"\7\u03c3\2\2\u1191\u1193\5\u01a4\u00d3\2\u1192\u1190\3\2\2\2\u1193\u1196"+
		"\3\2\2\2\u1194\u1192\3\2\2\2\u1194\u1195\3\2\2\2\u1195\u018b\3\2\2\2\u1196"+
		"\u1194\3\2\2\2\u1197\u1198\7\u0081\2\2\u1198\u119d\5\u019e\u00d0\2\u1199"+
		"\u119a\7\u03c3\2\2\u119a\u119c\5\u019e\u00d0\2\u119b\u1199\3\2\2\2\u119c"+
		"\u119f\3\2\2\2\u119d\u119b\3\2\2\2\u119d\u119e\3\2\2\2\u119e\u11a0\3\2"+
		"\2\2\u119f\u119d\3\2\2\2\u11a0\u11a2\7h\2\2\u11a1\u11a3\t<\2\2\u11a2\u11a1"+
		"\3\2\2\2\u11a2\u11a3\3\2\2\2\u11a3\u11a4\3\2\2\2\u11a4\u11a5\5\u01a2\u00d2"+
		"\2\u11a5\u11a6\7=\2\2\u11a6\u11ab\5\u01f0\u00f9\2\u11a7\u11a8\7\u03c3"+
		"\2\2\u11a8\u11aa\5\u01f0\u00f9\2\u11a9\u11a7\3\2\2\2\u11aa\u11ad\3\2\2"+
		"\2\u11ab\u11a9\3\2\2\2\u11ab\u11ac\3\2\2\2\u11ac\u11c0\3\2\2\2\u11ad\u11ab"+
		"\3\2\2\2\u11ae\u11af\7\u0081\2\2\u11af\u11b1\7\b\2\2\u11b0\u11b2\7\u0243"+
		"\2\2\u11b1\u11b0\3\2\2\2\u11b1\u11b2\3\2\2\2\u11b2\u11b3\3\2\2\2\u11b3"+
		"\u11b4\7\u03c3\2\2\u11b4\u11b5\7@\2\2\u11b5\u11b6\7j\2\2\u11b6\u11b7\7"+
		"=\2\2\u11b7\u11bc\5\u01f0\u00f9\2\u11b8\u11b9\7\u03c3\2\2\u11b9\u11bb"+
		"\5\u01f0\u00f9\2\u11ba\u11b8\3\2\2\2\u11bb\u11be\3\2\2\2\u11bc\u11ba\3"+
		"\2\2\2\u11bc\u11bd\3\2\2\2\u11bd\u11c0\3\2\2\2\u11be\u11bc\3\2\2\2\u11bf"+
		"\u1197\3\2\2\2\u11bf\u11ae\3\2\2\2\u11c0\u018d\3\2\2\2\u11c1\u11c2\7\u0081"+
		"\2\2\u11c2\u11c3\7\u01c8\2\2\u11c3\u11c4\7h\2\2\u11c4\u11c5\5\u01f0\u00f9"+
		"\2\u11c5\u11c6\7=\2\2\u11c6\u11cb\5\u01f0\u00f9\2\u11c7\u11c8\7\u03c3"+
		"\2\2\u11c8\u11ca\5\u01f0\u00f9\2\u11c9\u11c7\3\2\2\2\u11ca\u11cd\3\2\2"+
		"\2\u11cb\u11c9\3\2\2\2\u11cb\u11cc\3\2\2\2\u11cc\u018f\3\2\2\2\u11cd\u11cb"+
		"\3\2\2\2\u11ce\u11cf\7\u0087\2\2\u11cf\u11d2\7\u01bb\2\2\u11d0\u11d1\7"+
		":\2\2\u11d1\u11d3\5\u01f0\u00f9\2\u11d2\u11d0\3\2\2\2\u11d2\u11d3\3\2"+
		"\2\2\u11d3\u11d4\3\2\2\2\u11d4\u11d7\7\u03b8\2\2\u11d5\u11d8\5\u024a\u0126"+
		"\2\u11d6\u11d8\7\u03d0\2\2\u11d7\u11d5\3\2\2\2\u11d7\u11d6\3\2\2\2\u11d8"+
		"\u0191\3\2\2\2\u11d9\u11da\5\u01f0\u00f9\2\u11da\u11db\5\u019a\u00ce\2"+
		"\u11db\u0193\3\2\2\2\u11dc\u11dd\5\u01f0\u00f9\2\u11dd\u11de\7\u0164\2"+
		"\2\u11de\u11df\7\22\2\2\u11df\u11e0\7\u01bb\2\2\u11e0\u11e1\7\u03d0\2"+
		"\2\u11e1\u11f5\3\2\2\2\u11e2\u11e3\5\u01f0\u00f9\2\u11e3\u11e6\7\u0164"+
		"\2\2\u11e4\u11e5\7\u00a9\2\2\u11e5\u11e7\5\u0200\u0101\2\u11e6\u11e4\3"+
		"\2\2\2\u11e6\u11e7\3\2\2\2\u11e7\u11e8\3\2\2\2\u11e8\u11e9\7\22\2\2\u11e9"+
		"\u11ea\7\u03d0\2\2\u11ea\u11f5\3\2\2\2\u11eb\u11ec\5\u01f0\u00f9\2\u11ec"+
		"\u11ed\7\u0164\2\2\u11ed\u11ee\7\u00a9\2\2\u11ee\u11f1\5\u0200\u0101\2"+
		"\u11ef\u11f0\7\r\2\2\u11f0\u11f2\7\u03d0\2\2\u11f1\u11ef\3\2\2\2\u11f1"+
		"\u11f2\3\2\2\2\u11f2\u11f5\3\2\2\2\u11f3\u11f5\5\u01f0\u00f9\2\u11f4\u11dc"+
		"\3\2\2\2\u11f4\u11e2\3\2\2\2\u11f4\u11eb\3\2\2\2\u11f4\u11f3\3\2\2\2\u11f5"+
		"\u0195\3\2\2\2\u11f6\u11ff\7\u0092\2\2\u11f7\u11ff\7\u022b\2\2\u11f8\u11f9"+
		"\7\u0118\2\2\u11f9\u11ff\7\u03d0\2\2\u11fa\u11fb\7\u0172\2\2\u11fb\u11ff"+
		"\7\u03d0\2\2\u11fc\u11fd\7\u0209\2\2\u11fd\u11ff\7\u03d0\2\2\u11fe\u11f6"+
		"\3\2\2\2\u11fe\u11f7\3\2\2\2\u11fe\u11f8\3\2\2\2\u11fe\u11fa\3\2\2\2\u11fe"+
		"\u11fc\3\2\2\2\u11ff\u0197\3\2\2\2\u1200\u1201\7\u0194\2\2\u1201\u1209"+
		"\5\u0208\u0105\2\u1202\u1203\7\u0197\2\2\u1203\u1209\5\u0208\u0105\2\u1204"+
		"\u1205\7\u0193\2\2\u1205\u1209\5\u0208\u0105\2\u1206\u1207\7\u0198\2\2"+
		"\u1207\u1209\5\u0208\u0105\2\u1208\u1200\3\2\2\2\u1208\u1202\3\2\2\2\u1208"+
		"\u1204\3\2\2\2\u1208\u1206\3\2\2\2\u1209\u0199\3\2\2\2\u120a\u120b\7\u01bb"+
		"\2\2\u120b\u1212\7\u014b\2\2\u120c\u1213\7\'\2\2\u120d\u1213\7\u01a5\2"+
		"\2\u120e\u120f\7L\2\2\u120f\u1210\5\u0208\u0105\2\u1210\u1211\7\u0235"+
		"\2\2\u1211\u1213\3\2\2\2\u1212\u120c\3\2\2\2\u1212\u120d\3\2\2\2\u1212"+
		"\u120e\3\2\2\2\u1212\u1213\3\2\2\2\u1213\u019b\3\2\2\2\u1214\u1215\7\u00fe"+
		"\2\2\u1215\u1216\t=\2\2\u1216\u019d\3\2\2\2\u1217\u121c\5\u01a0\u00d1"+
		"\2\u1218\u1219\7\u03c1\2\2\u1219\u121a\5\u0222\u0112\2\u121a\u121b\7\u03c2"+
		"\2\2\u121b\u121d\3\2\2\2\u121c\u1218\3\2\2\2\u121c\u121d\3\2\2\2\u121d"+
		"\u019f\3\2\2\2\u121e\u1220\7\b\2\2\u121f\u1221\7\u0243\2\2\u1220\u121f"+
		"\3\2\2\2\u1220\u1221\3\2\2\2\u1221\u1249\3\2\2\2\u1222\u1224\7\t\2\2\u1223"+
		"\u1225\7\u023c\2\2\u1224\u1223\3\2\2\2\u1224\u1225\3\2\2\2\u1225\u1249"+
		"\3\2\2\2\u1226\u122d\7 \2\2\u1227\u1228\7\u0210\2\2\u1228\u122e\7\u023b"+
		"\2\2\u1229\u122e\7\u023c\2\2\u122a\u122e\7\u0224\2\2\u122b\u122e\7\u021e"+
		"\2\2\u122c\u122e\7\u020f\2\2\u122d\u1227\3\2\2\2\u122d\u1229\3\2\2\2\u122d"+
		"\u122a\3\2\2\2\u122d\u122b\3\2\2\2\u122d\u122c\3\2\2\2\u122d\u122e\3\2"+
		"\2\2\u122e\u1249\3\2\2\2\u122f\u1249\7)\2\2\u1230\u1249\7/\2\2\u1231\u1249"+
		"\7\u0146\2\2\u1232\u1249\7\u023d\2\2\u1233\u1249\7\u023e\2\2\u1234\u1235"+
		"\7@\2\2\u1235\u1249\7j\2\2\u1236\u1249\7G\2\2\u1237\u1249\7K\2\2\u1238"+
		"\u1239\7\\\2\2\u1239\u1249\7\u023b\2\2\u123a\u1249\7\u023f\2\2\u123b\u1249"+
		"\7\u01c8\2\2\u123c\u1249\7x\2\2\u123d\u1249\7\u0240\2\2\u123e\u123f\7"+
		"\u01dd\2\2\u123f\u1249\t>\2\2\u1240\u1249\7\u0086\2\2\u1241\u1242\7\u0089"+
		"\2\2\u1242\u1249\t?\2\2\u1243\u1249\7\u0241\2\2\u1244\u1249\7\u0242\2"+
		"\2\u1245\u1249\7\u009a\2\2\u1246\u1249\7\u00a1\2\2\u1247\u1249\7\u00a2"+
		"\2\2\u1248\u121e\3\2\2\2\u1248\u1222\3\2\2\2\u1248\u1226\3\2\2\2\u1248"+
		"\u122f\3\2\2\2\u1248\u1230\3\2\2\2\u1248\u1231\3\2\2\2\u1248\u1232\3\2"+
		"\2\2\u1248\u1233\3\2\2\2\u1248\u1234\3\2\2\2\u1248\u1236\3\2\2\2\u1248"+
		"\u1237\3\2\2\2\u1248\u1238\3\2\2\2\u1248\u123a\3\2\2\2\u1248\u123b\3\2"+
		"\2\2\u1248\u123c\3\2\2\2\u1248\u123d\3\2\2\2\u1248\u123e\3\2\2\2\u1248"+
		"\u1240\3\2\2\2\u1248\u1241\3\2\2\2\u1248\u1243\3\2\2\2\u1248\u1244\3\2"+
		"\2\2\u1248\u1245\3\2\2\2\u1248\u1246\3\2\2\2\u1248\u1247\3\2\2\2\u1249"+
		"\u01a1\3\2\2\2\u124a\u125b\7\u03b0\2\2\u124b\u124c\7\u03b0\2\2\u124c\u124d"+
		"\7\u03c0\2\2\u124d\u125b\7\u03b0\2\2\u124e\u124f\5\u0202\u0102\2\u124f"+
		"\u1250\7\u03c0\2\2\u1250\u1251\7\u03b0\2\2\u1251\u125b\3\2\2\2\u1252\u1253"+
		"\5\u0202\u0102\2\u1253\u1254\7\u03c0\2\2\u1254\u1255\5\u0202\u0102\2\u1255"+
		"\u125b\3\2\2\2\u1256\u1257\5\u0202\u0102\2\u1257\u1258\5\u0206\u0104\2"+
		"\u1258\u125b\3\2\2\2\u1259\u125b\5\u0202\u0102\2\u125a\u124a\3\2\2\2\u125a"+
		"\u124b\3\2\2\2\u125a\u124e\3\2\2\2\u125a\u1252\3\2\2\2\u125a\u1256\3\2"+
		"\2\2\u125a\u1259\3\2\2\2\u125b\u01a3\3\2\2\2\u125c\u125d\5\u01f0\u00f9"+
		"\2\u125d\u125e\7\u0098\2\2\u125e\u125f\5\u01f0\u00f9\2\u125f\u01a5\3\2"+
		"\2\2\u1260\u1262\7\13\2\2\u1261\u1263\t@\2\2\u1262\u1261\3\2\2\2\u1262"+
		"\u1263\3\2\2\2\u1263\u1264\3\2\2\2\u1264\u1265\7\u0095\2\2\u1265\u1266"+
		"\5\u0224\u0113\2\u1266\u01a7\3\2\2\2\u1267\u1268\7\31\2\2\u1268\u1269"+
		"\7\u0095\2\2\u1269\u126d\5\u0224\u0113\2\u126a\u126c\5\u01b0\u00d9\2\u126b"+
		"\u126a\3\2\2\2\u126c\u126f\3\2\2\2\u126d\u126b\3\2\2\2\u126d\u126e\3\2"+
		"\2\2\u126e\u01a9\3\2\2\2\u126f\u126d\3\2\2\2\u1270\u1271\7\u0116\2\2\u1271"+
		"\u1272\7\u0095\2\2\u1272\u1274\5\u0224\u0113\2\u1273\u1275\tA\2\2\u1274"+
		"\u1273\3\2\2\2\u1274\u1275\3\2\2\2\u1275\u01ab\3\2\2\2\u1276\u1278\7i"+
		"\2\2\u1277\u1279\t@\2\2\u1278\u1277\3\2\2\2\u1278\u1279\3\2\2\2\u1279"+
		"\u127a\3\2\2\2\u127a\u127b\7\u0095\2\2\u127b\u127c\5\u0224\u0113\2\u127c"+
		"\u01ad\3\2\2\2\u127d\u127f\7\u01d5\2\2\u127e\u1280\t@\2\2\u127f\u127e"+
		"\3\2\2\2\u127f\u1280\3\2\2\2\u1280\u1281\3\2\2\2\u1281\u1282\7\u0095\2"+
		"\2\u1282\u1284\5\u0224\u0113\2\u1283\u1285\7\u01ca\2\2\u1284\u1283\3\2"+
		"\2\2\u1284\u1285\3\2\2\2\u1285\u1287\3\2\2\2\u1286\u1288\7\u014d\2\2\u1287"+
		"\u1286\3\2\2\2\u1287\u1288\3\2\2\2\u1288\u128a\3\2\2\2\u1289\u128b\7\u021f"+
		"\2\2\u128a\u1289\3\2\2\2\u128a\u128b\3\2\2\2\u128b\u01af\3\2\2\2\u128c"+
		"\u128d\7:\2\2\u128d\u1294\7\u021d\2\2\u128e\u1294\7\u01ca\2\2\u128f\u1294"+
		"\7\u014f\2\2\u1290\u1294\7\u0199\2\2\u1291\u1294\7\u014d\2\2\u1292\u1294"+
		"\7\u0114\2\2\u1293\u128c\3\2\2\2\u1293\u128e\3\2\2\2\u1293\u128f\3\2\2"+
		"\2\u1293\u1290\3\2\2\2\u1293\u1291\3\2\2\2\u1293\u1292\3\2\2\2\u1294\u01b1"+
		"\3\2\2\2\u1295\u1297\7 \2\2\u1296\u1298\7\u0101\2\2\u1297\u1296\3\2\2"+
		"\2\u1297\u1298\3\2\2\2\u1298\u1299\3\2\2\2\u1299\u129a\7\u015a\2\2\u129a"+
		"\u129b\5\u0202\u0102\2\u129b\u129c\7\u01e0\2\2\u129c\u129d\tB\2\2\u129d"+
		"\u129e\7\u01f5\2\2\u129e\u129f\7\u03d0\2\2\u129f\u01b3\3\2\2\2\u12a0\u12a1"+
		"\7\u016b\2\2\u12a1\u12a2\7\u01bd\2\2\u12a2\u12a3\5\u0202\u0102\2\u12a3"+
		"\u12a4\7\u01f5\2\2\u12a4\u12a5\7\u03d0\2\2\u12a5\u01b5\3\2\2\2\u12a6\u12a7"+
		"\7\u021a\2\2\u12a7\u12a8\7\u01bd\2\2\u12a8\u12a9\5\u0202\u0102\2\u12a9"+
		"\u01b7\3\2\2\2\u12aa\u12ab\7\u0087\2\2\u12ab\u12ac\5\u01bc\u00df\2\u12ac"+
		"\u12ad\tC\2\2\u12ad\u12b5\5\u0250\u0129\2\u12ae\u12af\7\u03c3\2\2\u12af"+
		"\u12b0\5\u01bc\u00df\2\u12b0\u12b1\tC\2\2\u12b1\u12b2\5\u0250\u0129\2"+
		"\u12b2\u12b4\3\2\2\2\u12b3\u12ae\3\2\2\2\u12b4\u12b7\3\2\2\2\u12b5\u12b3"+
		"\3\2\2\2\u12b5\u12b6\3\2\2\2\u12b6\u12d5\3\2\2\2\u12b7\u12b5\3\2\2\2\u12b8"+
		"\u12bc\7\u0087\2\2\u12b9\u12ba\7\30\2\2\u12ba\u12bd\7\u0087\2\2\u12bb"+
		"\u12bd\7\u02a1\2\2\u12bc\u12b9\3\2\2\2\u12bc\u12bb\3\2\2\2\u12bd\u12c0"+
		"\3\2\2\2\u12be\u12c1\5\u01f4\u00fb\2\u12bf\u12c1\7\'\2\2\u12c0\u12be\3"+
		"\2\2\2\u12c0\u12bf\3\2\2\2\u12c1\u12d5\3\2\2\2\u12c2\u12c3\7\u0087\2\2"+
		"\u12c3\u12ca\7\u01a3\2\2\u12c4\u12c7\5\u01f4\u00fb\2\u12c5\u12c6\7\32"+
		"\2\2\u12c6\u12c8\5\u01f6\u00fc\2\u12c7\u12c5\3\2\2\2\u12c7\u12c8\3\2\2"+
		"\2\u12c8\u12cb\3\2\2\2\u12c9\u12cb\7\'\2\2\u12ca\u12c4\3\2\2\2\u12ca\u12c9"+
		"\3\2\2\2\u12cb\u12d5\3\2\2\2\u12cc\u12d5\5\u0190\u00c9\2\u12cd\u12d5\5"+
		"\u0114\u008b\2\u12ce\u12d5\5\u0112\u008a\2\u12cf\u12d0\7\u0087\2\2\u12d0"+
		"\u12d1\5\u01e8\u00f5\2\u12d1\u12d2\tC\2\2\u12d2\u12d3\5\u0250\u0129\2"+
		"\u12d3\u12d5\3\2\2\2\u12d4\u12aa\3\2\2\2\u12d4\u12b8\3\2\2\2\u12d4\u12c2"+
		"\3\2\2\2\u12d4\u12cc\3\2\2\2\u12d4\u12cd\3\2\2\2\u12d4\u12ce\3\2\2\2\u12d4"+
		"\u12cf\3\2\2\2\u12d5\u01b9\3\2\2\2\u12d6\u12d7\7\u0089\2\2\u12d7\u12d8"+
		"\t\62\2\2\u12d8\u136e\7\u017d\2\2\u12d9\u12da\7\u0089\2\2\u12da\u12db"+
		"\tD\2\2\u12db\u12de\7\u0147\2\2\u12dc\u12dd\7F\2\2\u12dd\u12df\7\u03d0"+
		"\2\2\u12de\u12dc\3\2\2\2\u12de\u12df\3\2\2\2\u12df\u12e2\3\2\2\2\u12e0"+
		"\u12e1\7=\2\2\u12e1\u12e3\5\u0208\u0105\2\u12e2\u12e0\3\2\2\2\u12e2\u12e3"+
		"\3\2\2\2\u12e3\u12eb\3\2\2\2\u12e4\u12e8\7X\2\2\u12e5\u12e6\5\u0208\u0105"+
		"\2\u12e6\u12e7\7\u03c3\2\2\u12e7\u12e9\3\2\2\2\u12e8\u12e5\3\2\2\2\u12e8"+
		"\u12e9\3\2\2\2\u12e9\u12ea\3\2\2\2\u12ea\u12ec\5\u0208\u0105\2\u12eb\u12e4"+
		"\3\2\2\2\u12eb\u12ec\3\2\2\2\u12ec\u136e\3\2\2\2\u12ed\u12ee\7\u0089\2"+
		"\2\u12ee\u12f0\5\u01be\u00e0\2\u12ef\u12f1\5\u01c0\u00e1\2\u12f0\u12ef"+
		"\3\2\2\2\u12f0\u12f1\3\2\2\2\u12f1\u136e\3\2\2\2\u12f2\u12f4\7\u0089\2"+
		"\2\u12f3\u12f5\7\u0159\2\2\u12f4\u12f3\3\2\2\2\u12f4\u12f5\3\2\2\2\u12f5"+
		"\u12f6\3\2\2\2\u12f6\u12f7\t$\2\2\u12f7\u12f8\tE\2\2\u12f8\u12fb\5\u01ea"+
		"\u00f6\2\u12f9\u12fa\tE\2\2\u12fa\u12fc\5\u0202\u0102\2\u12fb\u12f9\3"+
		"\2\2\2\u12fb\u12fc\3\2\2\2\u12fc\u12fe\3\2\2\2\u12fd\u12ff\5\u01c0\u00e1"+
		"\2\u12fe\u12fd\3\2\2\2\u12fe\u12ff\3\2\2\2\u12ff\u136e\3\2\2\2\u1300\u1301"+
		"\7\u0089\2\2\u1301\u1302\7 \2\2\u1302\u1304\t\2\2\2\u1303\u1305\5\u023a"+
		"\u011e\2\u1304\u1303\3\2\2\2\u1304\u1305\3\2\2\2\u1305\u1306\3\2\2\2\u1306"+
		"\u136e\5\u0202\u0102\2\u1307\u1308\7\u0089\2\2\u1308\u1309\7 \2\2\u1309"+
		"\u130a\tF\2\2\u130a\u136e\5\u01e8\u00f5\2\u130b\u130c\7\u0089\2\2\u130c"+
		"\u130d\7 \2\2\u130d\u130e\7\u021e\2\2\u130e\u136e\5\u01f0\u00f9\2\u130f"+
		"\u1310\7\u0089\2\2\u1310\u1311\7\u0140\2\2\u1311\u1312\5\u01f8\u00fd\2"+
		"\u1312\u1313\tG\2\2\u1313\u136e\3\2\2\2\u1314\u1315\7\u0089\2\2\u1315"+
		"\u136e\5\u01c2\u00e2\2\u1316\u1317\7\u0089\2\2\u1317\u1318\tH\2\2\u1318"+
		"\u131c\7X\2\2\u1319\u131a\5\u0208\u0105\2\u131a\u131b\7\u03c3\2\2\u131b"+
		"\u131d\3\2\2\2\u131c\u1319\3\2\2\2\u131c\u131d\3\2\2\2\u131d\u131e\3\2"+
		"\2\2\u131e\u136e\5\u0208\u0105\2\u131f\u1320\7\u0089\2\2\u1320\u1321\7"+
		"\u00df\2\2\u1321\u1322\7\u03c1\2\2\u1322\u1323\7\u03b0\2\2\u1323\u1324"+
		"\7\u03c2\2\2\u1324\u136e\tH\2\2\u1325\u1326\7\u0089\2\2\u1326\u1329\5"+
		"\u01c4\u00e3\2\u1327\u1328\tE\2\2\u1328\u132a\5\u0202\u0102\2\u1329\u1327"+
		"\3\2\2\2\u1329\u132a\3\2\2\2\u132a\u132c\3\2\2\2\u132b\u132d\5\u01c0\u00e1"+
		"\2\u132c\u132b\3\2\2\2\u132c\u132d\3\2\2\2\u132d\u136e\3\2\2\2\u132e\u132f"+
		"\7\u0089\2\2\u132f\u1330\tI\2\2\u1330\u1331\7\u011c\2\2\u1331\u136e\5"+
		"\u01e8\u00f5\2\u1332\u1333\7\u0089\2\2\u1333\u1336\7\u015d\2\2\u1334\u1335"+
		"\7:\2\2\u1335\u1337\5\u01f0\u00f9\2\u1336\u1334\3\2\2\2\u1336\u1337\3"+
		"\2\2\2\u1337\u136e\3\2\2\2\u1338\u1339\7\u0089\2\2\u1339\u133a\tJ\2\2"+
		"\u133a\u133b\tE\2\2\u133b\u133e\5\u01ea\u00f6\2\u133c\u133d\tE\2\2\u133d"+
		"\u133f\5\u0202\u0102\2\u133e\u133c\3\2\2\2\u133e\u133f\3\2\2\2\u133f\u1342"+
		"\3\2\2\2\u1340\u1341\7\u00a7\2\2\u1341\u1343\5\u0250\u0129\2\u1342\u1340"+
		"\3\2\2\2\u1342\u1343\3\2\2\2\u1343\u136e\3\2\2\2\u1344\u1345\7\u0089\2"+
		"\2\u1345\u1346\7\u01b1\2\2\u1346\u1349\7\u023b\2\2\u1347\u1348\tE\2\2"+
		"\u1348\u134a\5\u0202\u0102\2\u1349\u1347\3\2\2\2\u1349\u134a\3\2\2\2\u134a"+
		"\u134c\3\2\2\2\u134b\u134d\5\u01c0\u00e1\2\u134c\u134b\3\2\2\2\u134c\u134d"+
		"\3\2\2\2\u134d\u136e\3\2\2\2\u134e\u134f\7\u0089\2\2\u134f\u1350\7\u01c6"+
		"\2\2\u1350\u1355\5\u01c6\u00e4\2\u1351\u1352\7\u03c3\2\2\u1352\u1354\5"+
		"\u01c6\u00e4\2\u1353\u1351\3\2\2\2\u1354\u1357\3\2\2\2\u1355\u1353\3\2"+
		"\2\2\u1355\u1356\3\2\2\2\u1356\u135b\3\2\2\2\u1357\u1355\3\2\2\2\u1358"+
		"\u1359\7:\2\2\u1359\u135a\7\u01c9\2\2\u135a\u135c\5\u0208\u0105\2\u135b"+
		"\u1358\3\2\2\2\u135b\u135c\3\2\2\2\u135c\u135d\3\2\2\2\u135d\u1361\7X"+
		"\2\2\u135e\u135f\5\u0208\u0105\2\u135f\u1360\7\u03c3\2\2\u1360\u1362\3"+
		"\2\2\2\u1361\u135e\3\2\2\2\u1361\u1362\3\2\2\2\u1362\u1363\3\2\2\2\u1363"+
		"\u1364\5\u0208\u0105\2\u1364\u136e\3\2\2\2\u1365\u1366\7\u0089\2\2\u1366"+
		"\u1367\7\u01f0\2\2\u1367\u136b\7\u0204\2\2\u1368\u1369\7:\2\2\u1369\u136a"+
		"\7\u0115\2\2\u136a\u136c\7\u03d0\2\2\u136b\u1368\3\2\2\2\u136b\u136c\3"+
		"\2\2\2\u136c\u136e\3\2\2\2\u136d\u12d6\3\2\2\2\u136d\u12d9\3\2\2\2\u136d"+
		"\u12ed\3\2\2\2\u136d\u12f2\3\2\2\2\u136d\u1300\3\2\2\2\u136d\u1307\3\2"+
		"\2\2\u136d\u130b\3\2\2\2\u136d\u130f\3\2\2\2\u136d\u1314\3\2\2\2\u136d"+
		"\u1316\3\2\2\2\u136d\u131f\3\2\2\2\u136d\u1325\3\2\2\2\u136d\u132e\3\2"+
		"\2\2\u136d\u1332\3\2\2\2\u136d\u1338\3\2\2\2\u136d\u1344\3\2\2\2\u136d"+
		"\u134e\3\2\2\2\u136d\u1365\3\2\2\2\u136e\u01bb\3\2\2\2\u136f\u137a\7\u03db"+
		"\2\2\u1370\u137a\7\u03dc\2\2\u1371\u1372\7\u03c5\2\2\u1372\u1374\7\u03c5"+
		"\2\2\u1373\u1371\3\2\2\2\u1373\u1374\3\2\2\2\u1374\u1375\3\2\2\2\u1375"+
		"\u1377\tK\2\2\u1376\u1373\3\2\2\2\u1376\u1377\3\2\2\2\u1377\u1378\3\2"+
		"\2\2\u1378\u137a\5\u0202\u0102\2\u1379\u136f\3\2\2\2\u1379\u1370\3\2\2"+
		"\2\u1379\u1376\3\2\2\2\u137a\u01bd\3\2\2\2\u137b\u137c\7\30\2\2\u137c"+
		"\u1389\7\u0087\2\2\u137d\u1389\7\u02a4\2\2\u137e\u1389\7%\2\2\u137f\u1389"+
		"\7\u0085\2\2\u1380\u1381\7\u015a\2\2\u1381\u1389\7\u0204\2\2\u1382\u1383"+
		"\7s\2\2\u1383\u1389\7\u0204\2\2\u1384\u1386\t\61\2\2\u1385\u1384\3\2\2"+
		"\2\u1385\u1386\3\2\2\2\u1386\u1387\3\2\2\2\u1387\u1389\tL\2\2\u1388\u137b"+
		"\3\2\2\2\u1388\u137d\3\2\2\2\u1388\u137e\3\2\2\2\u1388\u137f\3\2\2\2\u1388"+
		"\u1380\3\2\2\2\u1388\u1382\3\2\2\2\u1388\u1385\3\2\2\2\u1389\u01bf\3\2"+
		"\2\2\u138a\u138b\7W\2\2\u138b\u138f\7\u03d0\2\2\u138c\u138d\7\u00a7\2"+
		"\2\u138d\u138f\5\u0250\u0129\2\u138e\u138a\3\2\2\2\u138e\u138c\3\2\2\2"+
		"\u138f\u01c1\3\2\2\2\u1390\u1392\7\u0206\2\2\u1391\u1390\3\2\2\2\u1391"+
		"\u1392\3\2\2\2\u1392\u1393\3\2\2\2\u1393\u13a2\7\u0141\2\2\u1394\u1395"+
		"\7\u017e\2\2\u1395\u13a2\7\u0204\2\2\u1396\u13a2\7\u01bf\2\2\u1397\u13a2"+
		"\7\u0243\2\2\u1398\u139a\7\u0159\2\2\u1399\u1398\3\2\2\2\u1399\u139a\3"+
		"\2\2\2\u139a\u139b\3\2\2\2\u139b\u13a2\7\u01c5\2\2\u139c\u13a2\7\u01c7"+
		"\2\2\u139d\u139e\7\u01f0\2\2\u139e\u13a2\7\u0163\2\2\u139f\u13a2\7\u0105"+
		"\2\2\u13a0\u13a2\7\u012a\2\2\u13a1\u1391\3\2\2\2\u13a1\u1394\3\2\2\2\u13a1"+
		"\u1396\3\2\2\2\u13a1\u1397\3\2\2\2\u13a1\u1399\3\2\2\2\u13a1\u139c\3\2"+
		"\2\2\u13a1\u139d\3\2\2\2\u13a1\u139f\3\2\2\2\u13a1\u13a0\3\2\2\2\u13a2"+
		"\u01c3\3\2\2\2\u13a3\u13ac\7\u0147\2\2\u13a4\u13a5\7\u0095\2\2\u13a5\u13ac"+
		"\7\u0204\2\2\u13a6\u13a8\7\u0159\2\2\u13a7\u13a6\3\2\2\2\u13a7\u13a8\3"+
		"\2\2\2\u13a8\u13a9\3\2\2\2\u13a9\u13ac\7\u023b\2\2\u13aa\u13ac\7\u0215"+
		"\2\2\u13ab\u13a3\3\2\2\2\u13ab\u13a4\3\2\2\2\u13ab\u13a7\3\2\2\2\u13ab"+
		"\u13aa\3\2\2\2\u13ac\u01c5\3\2\2\2\u13ad\u13ba\7\b\2\2\u13ae\u13af\7\u010d"+
		"\2\2\u13af\u13ba\7\u016e\2\2\u13b0\u13b1\7\u0129\2\2\u13b1\u13ba\7\u020e"+
		"\2\2\u13b2\u13ba\7\u012c\2\2\u13b3\u13ba\7\u0170\2\2\u13b4\u13ba\7\u0271"+
		"\2\2\u13b5\u13b6\7\u01b6\2\2\u13b6\u13ba\7\u0150\2\2\u13b7\u13ba\7\u01f7"+
		"\2\2\u13b8\u13ba\7\u020d\2\2\u13b9\u13ad\3\2\2\2\u13b9\u13ae\3\2\2\2\u13b9"+
		"\u13b0\3\2\2\2\u13b9\u13b2\3\2\2\2\u13b9\u13b3\3\2\2\2\u13b9\u13b4\3\2"+
		"\2\2\u13b9\u13b5\3\2\2\2\u13b9\u13b7\3\2\2\2\u13b9\u13b8\3\2\2\2\u13ba"+
		"\u01c7\3\2\2\2\u13bb\u13bc\7\u010b\2\2\u13bc\u13bd\7\u03d0\2\2\u13bd\u01c9"+
		"\3\2\2\2\u13be\u13bf\7\u0111\2\2\u13bf\u13c0\7G\2\2\u13c0\u13c5\5\u01d6"+
		"\u00ec\2\u13c1\u13c2\7\u03c3\2\2\u13c2\u13c4\5\u01d6\u00ec\2\u13c3\u13c1"+
		"\3\2\2\2\u13c4\u13c7\3\2\2\2\u13c5\u13c3\3\2\2\2\u13c5\u13c6\3\2\2\2\u13c6"+
		"\u13cf\3\2\2\2\u13c7\u13c5\3\2\2\2\u13c8\u13c9\7q\2\2\u13c9\u13cc\7\u03c1"+
		"\2\2\u13ca\u13cd\5\u0222\u0112\2\u13cb\u13cd\7\b\2\2\u13cc\u13ca\3\2\2"+
		"\2\u13cc\u13cb\3\2\2\2\u13cd\u13ce\3\2\2\2\u13ce\u13d0\7\u03c2\2\2\u13cf"+
		"\u13c8\3\2\2\2\u13cf\u13d0\3\2\2\2\u13d0\u13d1\3\2\2\2\u13d1\u13d2\7F"+
		"\2\2\u13d2\u13d3\5\u0202\u0102\2\u13d3\u01cb\3\2\2\2\u13d4\u13d6\7\u0156"+
		"\2\2\u13d5\u13d7\t@\2\2\u13d6\u13d5\3\2\2\2\u13d6\u13d7\3\2\2\2\u13d7"+
		"\u13d8\3\2\2\2\u13d8\u13dd\5\u01d8\u00ed\2\u13d9\u13da\7\u03c3\2\2\u13da"+
		"\u13dc\5\u01d8\u00ed\2\u13db\u13d9\3\2\2\2\u13dc\u13df\3\2\2\2\u13dd\u13db"+
		"\3\2\2\2\u13dd\u13de\3\2\2\2\u13de\u01cd\3\2\2\2\u13df\u13dd\3\2\2\2\u13e0"+
		"\u13e2\7S\2\2\u13e1\u13e3\tM\2\2\u13e2\u13e1\3\2\2\2\u13e2\u13e3\3\2\2"+
		"\2\u13e3\u13e5\3\2\2\2\u13e4\u13e6\5\u0208\u0105\2\u13e5\u13e4\3\2\2\2"+
		"\u13e6\u13e7\3\2\2\2\u13e7\u13e5\3\2\2\2\u13e7\u13e8\3\2\2\2\u13e8\u01cf"+
		"\3\2\2\2\u13e9\u13ea\7[\2\2\u13ea\u13eb\7G\2\2\u13eb\u13ec\7M\2\2\u13ec"+
		"\u13ed\7\u0111\2\2\u13ed\u13f2\5\u01dc\u00ef\2\u13ee\u13ef\7\u03c3\2\2"+
		"\u13ef\u13f1\5\u01dc\u00ef\2\u13f0\u13ee\3\2\2\2\u13f1\u13f4\3\2\2\2\u13f2"+
		"\u13f0\3\2\2\2\u13f2\u13f3\3\2\2\2\u13f3\u01d1\3\2\2\2\u13f4\u13f2\3\2"+
		"\2\2\u13f5\u13f6\7\u01de\2\2\u13f6\u13f7\7\u01c9\2\2\u13f7\u13f8\7\u0111"+
		"\2\2\u13f8\u01d3\3\2\2\2\u13f9\u13fa\7\u0241\2\2\u13fa\u01d5\3\2\2\2\u13fb"+
		"\u1403\5\u01ea\u00f6\2\u13fc\u13fe\t\24\2\2\u13fd\u13fc\3\2\2\2\u13fd"+
		"\u13fe\3\2\2\2\u13fe\u13ff\3\2\2\2\u13ff\u1400\7\u03c1\2\2\u1400\u1401"+
		"\5\u0222\u0112\2\u1401\u1402\7\u03c2\2\2\u1402\u1404\3\2\2\2\u1403\u13fd"+
		"\3\2\2\2\u1403\u1404\3\2\2\2\u1404\u01d7\3\2\2\2\u1405\u1418\7\u0133\2"+
		"\2\u1406\u1418\7\u0163\2\2\u1407\u1409\tN\2\2\u1408\u1407\3\2\2\2\u1408"+
		"\u1409\3\2\2\2\u1409\u140a\3\2\2\2\u140a\u1418\7\u017d\2\2\u140b\u1418"+
		"\7\u01b2\2\2\u140c\u1418\7\u0243\2\2\u140d\u140e\7\u01c9\2\2\u140e\u1418"+
		"\7\u0111\2\2\u140f\u1418\7\u0204\2\2\u1410\u1418\7\u0220\2\2\u1411\u1415"+
		"\7\u023b\2\2\u1412\u1413\7\u00a9\2\2\u1413\u1414\7v\2\2\u1414\u1416\7"+
		"\\\2\2\u1415\u1412\3\2\2\2\u1415\u1416\3\2\2\2\u1416\u1418\3\2\2\2\u1417"+
		"\u1405\3\2\2\2\u1417\u1406\3\2\2\2\u1417\u1408\3\2\2\2\u1417\u140b\3\2"+
		"\2\2\u1417\u140c\3\2\2\2\u1417\u140d\3\2\2\2\u1417\u140f\3\2\2\2\u1417"+
		"\u1410\3\2\2\2\u1417\u1411\3\2\2\2\u1418\u1424\3\2\2\2\u1419\u141a\7\u01cf"+
		"\2\2\u141a\u141c\7\u017d\2\2\u141b\u141d\5\u013a\u009e\2\u141c\u141b\3"+
		"\2\2\2\u141c\u141d\3\2\2\2\u141d\u1424\3\2\2\2\u141e\u141f\7\u023b\2\2"+
		"\u141f\u1421\5\u0224\u0113\2\u1420\u1422\5\u01da\u00ee\2\u1421\u1420\3"+
		"\2\2\2\u1421\u1422\3\2\2\2\u1422\u1424\3\2\2\2\u1423\u1417\3\2\2\2\u1423"+
		"\u1419\3\2\2\2\u1423\u141e\3\2\2\2\u1424\u01d9\3\2\2\2\u1425\u1426\7\u00a9"+
		"\2\2\u1426\u1427\7v\2\2\u1427\u142b\7\\\2\2\u1428\u1429\7:\2\2\u1429\u142b"+
		"\7\u014c\2\2\u142a\u1425\3\2\2\2\u142a\u1428\3\2\2\2\u142b\u01db\3\2\2"+
		"\2\u142c\u1434\5\u01ea\u00f6\2\u142d\u142e\7q\2\2\u142e\u1431\7\u03c1"+
		"\2\2\u142f\u1432\5\u0222\u0112\2\u1430\u1432\7\b\2\2\u1431\u142f\3\2\2"+
		"\2\u1431\u1430\3\2\2\2\u1432\u1433\3\2\2\2\u1433\u1435\7\u03c2\2\2\u1434"+
		"\u142d\3\2\2\2\u1434\u1435\3\2\2\2\u1435\u143d\3\2\2\2\u1436\u1438\t\24"+
		"\2\2\u1437\u1436\3\2\2\2\u1437\u1438\3\2\2\2\u1438\u1439\3\2\2\2\u1439"+
		"\u143a\7\u03c1\2\2\u143a\u143b\5\u0222\u0112\2\u143b\u143c\7\u03c2\2\2"+
		"\u143c\u143e\3\2\2\2\u143d\u1437\3\2\2\2\u143d\u143e\3\2\2\2\u143e\u1441"+
		"\3\2\2\2\u143f\u1440\7E\2\2\u1440\u1442\7\u0177\2\2\u1441\u143f\3\2\2"+
		"\2\u1441\u1442\3\2\2\2\u1442\u01dd\3\2\2\2\u1443\u1444\tO\2\2\u1444\u1447"+
		"\5\u01ea\u00f6\2\u1445\u1448\5\u0202\u0102\2\u1446\u1448\7\u03d0\2\2\u1447"+
		"\u1445\3\2\2\2\u1447\u1446\3\2\2\2\u1447\u1448\3\2\2\2\u1448\u01df\3\2"+
		"\2\2\u1449\u144d\tO\2\2\u144a\u144b\tP\2\2\u144b\u144c\7\u03b8\2\2\u144c"+
		"\u144e\tQ\2\2\u144d\u144a\3\2\2\2\u144d\u144e\3\2\2\2\u144e\u144f\3\2"+
		"\2\2\u144f\u1450\5\u01e6\u00f4\2\u1450\u01e1\3\2\2\2\u1451\u1452\7\u0161"+
		"\2\2\u1452\u1453\7\u03d0\2\2\u1453\u01e3\3\2\2\2\u1454\u1455\7\u00a3\2"+
		"\2\u1455\u1456\5\u0202\u0102\2\u1456\u01e5\3\2\2\2\u1457\u145d\5\u00b4"+
		"[\2\u1458\u145d\5\u00a6T\2\u1459\u145d\5\u00acW\2\u145a\u145d\5\u00b2"+
		"Z\2\u145b\u145d\5\u00b6\\\2\u145c\u1457\3\2\2\2\u145c\u1458\3\2\2\2\u145c"+
		"\u1459\3\2\2\2\u145c\u145a\3\2\2\2\u145c\u145b\3\2\2\2\u145d\u1462\3\2"+
		"\2\2\u145e\u145f\7:\2\2\u145f\u1460\7\u0126\2\2\u1460\u1462\5\u0202\u0102"+
		"\2\u1461\u145c\3\2\2\2\u1461\u145e\3\2\2\2\u1462\u01e7\3\2\2\2\u1463\u1467"+
		"\5\u0202\u0102\2\u1464\u1468\7\u03d7\2\2\u1465\u1466\7\u03c0\2\2\u1466"+
		"\u1468\5\u0202\u0102\2\u1467\u1464\3\2\2\2\u1467\u1465\3\2\2\2\u1467\u1468"+
		"\3\2\2\2\u1468\u01e9\3\2\2\2\u1469\u146a\5\u01e8\u00f5\2\u146a\u01eb\3"+
		"\2\2\2\u146b\u1470\5\u0202\u0102\2\u146c\u146e\5\u0206\u0104\2\u146d\u146f"+
		"\5\u0206\u0104\2\u146e\u146d\3\2\2\2\u146e\u146f\3\2\2\2\u146f\u1471\3"+
		"\2\2\2\u1470\u146c\3\2\2\2\u1470\u1471\3\2\2\2\u1471\u01ed\3\2\2\2\u1472"+
		"\u1475\5\u0202\u0102\2\u1473\u1475\7\u03d0\2\2\u1474\u1472\3\2\2\2\u1474"+
		"\u1473\3\2\2\2\u1475\u147a\3\2\2\2\u1476\u1477\7\u03c1\2\2\u1477\u1478"+
		"\5\u0208\u0105\2\u1478\u1479\7\u03c2\2\2\u1479\u147b\3\2\2\2\u147a\u1476"+
		"\3\2\2\2\u147a\u147b\3\2\2\2\u147b\u147d\3\2\2\2\u147c\u147e\t+\2\2\u147d"+
		"\u147c\3\2\2\2\u147d\u147e\3\2\2\2\u147e\u01ef\3\2\2\2\u147f\u1480\tR"+
		"\2\2\u1480\u01f1\3\2\2\2\u1481\u1482\tS\2\2\u1482\u01f3\3\2\2\2\u1483"+
		"\u1488\7\u00c3\2\2\u1484\u1488\5\u0260\u0131\2\u1485\u1488\7\u03d0\2\2"+
		"\u1486\u1488\7\u03cd\2\2\u1487\u1483\3\2\2\2\u1487\u1484\3\2\2\2\u1487"+
		"\u1485\3\2\2\2\u1487\u1486\3\2\2\2\u1488\u01f5\3\2\2\2\u1489\u148c\5\u0202"+
		"\u0102\2\u148a\u148c\7\u03d0\2\2\u148b\u1489\3\2\2\2\u148b\u148a\3\2\2"+
		"\2\u148c\u01f7\3\2\2\2\u148d\u148e\tT\2\2\u148e\u01f9\3\2\2\2\u148f\u1490"+
		"\5\u0208\u0105\2\u1490\u1491\7\u03b5\2\2\u1491\u1492\5\u0208\u0105\2\u1492"+
		"\u1493\7\u03b5\2\2\u1493\u1494\5\u0208\u0105\2\u1494\u1495\7\u03b5\2\2"+
		"\u1495\u1496\5\u0208\u0105\2\u1496\u1497\7\u03b5\2\2\u1497\u149d\5\u0208"+
		"\u0105\2\u1498\u1499\7\u03cc\2\2\u1499\u149a\5\u0208\u0105\2\u149a\u149b"+
		"\7\u03b5\2\2\u149b\u149c\5\u0208\u0105\2\u149c\u149e\3\2\2\2\u149d\u1498"+
		"\3\2\2\2\u149e\u149f\3\2\2\2\u149f\u149d\3\2\2\2\u149f\u14a0\3\2\2\2\u14a0"+
		"\u01fb\3\2\2\2\u14a1\u14a8\5\u01fe\u0100\2\u14a2\u14a3\7\u03c3\2\2\u14a3"+
		"\u14a6\5\u01fe\u0100\2\u14a4\u14a5\7\u03c3\2\2\u14a5\u14a7\5\u0208\u0105"+
		"\2\u14a6\u14a4\3\2\2\2\u14a6\u14a7\3\2\2\2\u14a7\u14a9\3\2\2\2\u14a8\u14a2"+
		"\3\2\2\2\u14a8\u14a9\3\2\2\2\u14a9\u01fd\3\2\2\2\u14aa\u14b2\7\u03d0\2"+
		"\2\u14ab\u14b2\7\u03d5\2\2\u14ac\u14ae\7\u03d2\2\2\u14ad\u14ac\3\2\2\2"+
		"\u14ae\u14af\3\2\2\2\u14af\u14ad\3\2\2\2\u14af\u14b0\3\2\2\2\u14b0\u14b2"+
		"\3\2\2\2\u14b1\u14aa\3\2\2\2\u14b1\u14ab\3\2\2\2\u14b1\u14ad\3\2\2\2\u14b2"+
		"\u01ff\3\2\2\2\u14b3\u14b6\5\u0202\u0102\2\u14b4\u14b6\7\u03d0\2\2\u14b5"+
		"\u14b3\3\2\2\2\u14b5\u14b4\3\2\2\2\u14b6\u0201\3\2\2\2\u14b7\u14bb\5\u0204"+
		"\u0103\2\u14b8\u14bb\7\u03d9\2\2\u14b9\u14bb\7\u03cd\2\2\u14ba\u14b7\3"+
		"\2\2\2\u14ba\u14b8\3\2\2\2\u14ba\u14b9\3\2\2\2\u14bb\u0203\3\2\2\2\u14bc"+
		"\u14c6\7\u03d8\2\2\u14bd\u14c6\5\u0260\u0131\2\u14be\u14c6\5\u0262\u0132"+
		"\2\u14bf\u14c6\5\u01f8\u00fd\2\u14c0\u14c6\5\u0264\u0133\2\u14c1\u14c6"+
		"\5\u0266\u0134\2\u14c2\u14c6\5\u0268\u0135\2\u14c3\u14c6\5\u026a\u0136"+
		"\2\u14c4\u14c6\5\u026c\u0137\2\u14c5\u14bc\3\2\2\2\u14c5\u14bd\3\2\2\2"+
		"\u14c5\u14be\3\2\2\2\u14c5\u14bf\3\2\2\2\u14c5\u14c0\3\2\2\2\u14c5\u14c1"+
		"\3\2\2\2\u14c5\u14c2\3\2\2\2\u14c5\u14c3\3\2\2\2\u14c5\u14c4\3\2\2\2\u14c6"+
		"\u0205\3\2\2\2\u14c7\u14cb\7\u03d7\2\2\u14c8\u14c9\7\u03c0\2\2\u14c9\u14cb"+
		"\5\u0202\u0102\2\u14ca\u14c7\3\2\2\2\u14ca\u14c8\3\2\2\2\u14cb\u0207\3"+
		"\2\2\2\u14cc\u14cd\tU\2\2\u14cd\u0209\3\2\2\2\u14ce\u14d1\7\u03ce\2\2"+
		"\u14cf\u14d1\5\u0208\u0105\2\u14d0\u14ce\3\2\2\2\u14d0\u14cf\3\2\2\2\u14d1"+
		"\u020b\3\2\2\2\u14d2\u14d4\7\u03d6\2\2\u14d3\u14d2\3\2\2\2\u14d3\u14d4"+
		"\3\2\2\2\u14d4\u14d5\3\2\2\2\u14d5\u14d8\7\u03d0\2\2\u14d6\u14d8\7\u03cf"+
		"\2\2\u14d7\u14d3\3\2\2\2\u14d7\u14d6\3\2\2\2\u14d8\u14da\3\2\2\2\u14d9"+
		"\u14db\7\u03d0\2\2\u14da\u14d9\3\2\2\2\u14db\u14dc\3\2\2\2\u14dc\u14da"+
		"\3\2\2\2\u14dc\u14dd\3\2\2\2\u14dd\u14ea\3\2\2\2\u14de\u14e0\7\u03d6\2"+
		"\2\u14df\u14de\3\2\2\2\u14df\u14e0\3\2\2\2\u14e0\u14e1\3\2\2\2\u14e1\u14e4"+
		"\7\u03d0\2\2\u14e2\u14e4\7\u03cf\2\2\u14e3\u14df\3\2\2\2\u14e3\u14e2\3"+
		"\2\2\2\u14e4\u14e7\3\2\2\2\u14e5\u14e6\7\32\2\2\u14e6\u14e8\5\u01f6\u00fc"+
		"\2\u14e7\u14e5\3\2\2\2\u14e7\u14e8\3\2\2\2\u14e8\u14ea\3\2\2\2\u14e9\u14d7"+
		"\3\2\2\2\u14e9\u14e3\3\2\2\2\u14ea\u020d\3\2\2\2\u14eb\u14ec\tV\2\2\u14ec"+
		"\u020f\3\2\2\2\u14ed\u14ef\7\u03d6\2\2\u14ee\u14ed\3\2\2\2\u14ee\u14ef"+
		"\3\2\2\2\u14ef\u14f0\3\2\2\2\u14f0\u14f1\7\u03d2\2\2\u14f1\u0211\3\2\2"+
		"\2\u14f2\u14f4\7e\2\2\u14f3\u14f2\3\2\2\2\u14f3\u14f4\3\2\2\2\u14f4\u14f5"+
		"\3\2\2\2\u14f5\u14f6\tW\2\2\u14f6\u0213\3\2\2\2\u14f7\u1503\5\u020c\u0107"+
		"\2\u14f8\u1503\5\u0208\u0105\2\u14f9\u14fa\7\u03b5\2\2\u14fa\u1503\5\u0208"+
		"\u0105\2\u14fb\u1503\5\u0210\u0109\2\u14fc\u1503\7\u03d3\2\2\u14fd\u1503"+
		"\7\u03d5\2\2\u14fe\u1500\7e\2\2\u14ff\u14fe\3\2\2\2\u14ff\u1500\3\2\2"+
		"\2\u1500\u1501\3\2\2\2\u1501\u1503\tW\2\2\u1502\u14f7\3\2\2\2\u1502\u14f8"+
		"\3\2\2\2\u1502\u14f9\3\2\2\2\u1502\u14fb\3\2\2\2\u1502\u14fc\3\2\2\2\u1502"+
		"\u14fd\3\2\2\2\u1502\u14ff\3\2\2\2\u1503\u0215\3\2\2\2\u1504\u1506\tX"+
		"\2\2\u1505\u1507\5\u021c\u010f\2\u1506\u1505\3\2\2\2\u1506\u1507\3\2\2"+
		"\2\u1507\u1509\3\2\2\2\u1508\u150a\7\u00c3\2\2\u1509\u1508\3\2\2\2\u1509"+
		"\u150a\3\2\2\2\u150a\u1511\3\2\2\2\u150b\u150c\7\30\2\2\u150c\u150f\7"+
		"\u0087\2\2\u150d\u150f\7\u02a1\2\2\u150e\u150b\3\2\2\2\u150e\u150d\3\2"+
		"\2\2\u150f\u1510\3\2\2\2\u1510\u1512\5\u01f4\u00fb\2\u1511\u150e\3\2\2"+
		"\2\u1511\u1512\3\2\2\2\u1512\u1515\3\2\2\2\u1513\u1514\7\32\2\2\u1514"+
		"\u1516\5\u01f6\u00fc\2\u1515\u1513\3\2\2\2\u1515\u1516\3\2\2\2\u1516\u156f"+
		"\3\2\2\2\u1517\u1518\7\u00c2\2\2\u1518\u151a\tY\2\2\u1519\u151b\5\u021c"+
		"\u010f\2\u151a\u1519\3\2\2\2\u151a\u151b\3\2\2\2\u151b\u151d\3\2\2\2\u151c"+
		"\u151e\7\u00c3\2\2\u151d\u151c\3\2\2\2\u151d\u151e\3\2\2\2\u151e\u156f"+
		"\3\2\2\2\u151f\u1520\7\u01a4\2\2\u1520\u1522\7\u00c0\2\2\u1521\u1523\5"+
		"\u021c\u010f\2\u1522\u1521\3\2\2\2\u1522\u1523\3\2\2\2\u1523\u1525\3\2"+
		"\2\2\u1524\u1526\7\u00c3\2\2\u1525\u1524\3\2\2\2\u1525\u1526\3\2\2\2\u1526"+
		"\u156f\3\2\2\2\u1527\u1528\7\u00c2\2\2\u1528\u1529\tZ\2\2\u1529\u152b"+
		"\7\u00ce\2\2\u152a\u152c\5\u021c\u010f\2\u152b\u152a\3\2\2\2\u152b\u152c"+
		"\3\2\2\2\u152c\u152e\3\2\2\2\u152d\u152f\7\u00c3\2\2\u152e\u152d\3\2\2"+
		"\2\u152e\u152f\3\2\2\2\u152f\u156f\3\2\2\2\u1530\u1532\t[\2\2\u1531\u1533"+
		"\5\u021c\u010f\2\u1532\u1531\3\2\2\2\u1532\u1533\3\2\2\2\u1533\u1535\3"+
		"\2\2\2\u1534\u1536\t\\\2\2\u1535\u1534\3\2\2\2\u1535\u1536\3\2\2\2\u1536"+
		"\u1538\3\2\2\2\u1537\u1539\7\u00ac\2\2\u1538\u1537\3\2\2\2\u1538\u1539"+
		"\3\2\2\2\u1539\u156f\3\2\2\2\u153a\u153c\7\u00b3\2\2\u153b\u153d\5\u021e"+
		"\u0110\2\u153c\u153b\3\2\2\2\u153c\u153d\3\2\2\2\u153d\u153f\3\2\2\2\u153e"+
		"\u1540\t\\\2\2\u153f\u153e\3\2\2\2\u153f\u1540\3\2\2\2\u1540\u1542\3\2"+
		"\2\2\u1541\u1543\7\u00ac\2\2\u1542\u1541\3\2\2\2\u1542\u1543\3\2\2\2\u1543"+
		"\u156f\3\2\2\2\u1544\u1546\7\u00b4\2\2\u1545\u1547\7\u00b5\2\2\u1546\u1545"+
		"\3\2\2\2\u1546\u1547\3\2\2\2\u1547\u1549\3\2\2\2\u1548\u154a\5\u021e\u0110"+
		"\2\u1549\u1548\3\2\2\2\u1549\u154a\3\2\2\2\u154a\u154c\3\2\2\2\u154b\u154d"+
		"\t\\\2\2\u154c\u154b\3\2\2\2\u154c\u154d\3\2\2\2\u154d\u154f\3\2\2\2\u154e"+
		"\u1550\7\u00ac\2\2\u154f\u154e\3\2\2\2\u154f\u1550\3\2\2\2\u1550\u156f"+
		"\3\2\2\2\u1551\u1553\t]\2\2\u1552\u1554\5\u0220\u0111\2\u1553\u1552\3"+
		"\2\2\2\u1553\u1554\3\2\2\2\u1554\u1556\3\2\2\2\u1555\u1557\t\\\2\2\u1556"+
		"\u1555\3\2\2\2\u1556\u1557\3\2\2\2\u1557\u1559\3\2\2\2\u1558\u155a\7\u00ac"+
		"\2\2\u1559\u1558\3\2\2\2\u1559\u155a\3\2\2\2\u155a\u156f\3\2\2\2\u155b"+
		"\u156f\t^\2\2\u155c\u155e\t_\2\2\u155d\u155f\5\u021c\u010f\2\u155e\u155d"+
		"\3\2\2\2\u155e\u155f\3\2\2\2\u155f\u156f\3\2\2\2\u1560\u1561\t`\2\2\u1561"+
		"\u1563\5\u0218\u010d\2\u1562\u1564\7\u00c3\2\2\u1563\u1562\3\2\2\2\u1563"+
		"\u1564\3\2\2\2\u1564\u156b\3\2\2\2\u1565\u1566\7\30\2\2\u1566\u1569\7"+
		"\u0087\2\2\u1567\u1569\7\u02a1\2\2\u1568\u1565\3\2\2\2\u1568\u1567\3\2"+
		"\2\2\u1569\u156a\3\2\2\2\u156a\u156c\5\u01f4\u00fb\2\u156b\u1568\3\2\2"+
		"\2\u156b\u156c\3\2\2\2\u156c\u156f\3\2\2\2\u156d\u156f\ta\2\2\u156e\u1504"+
		"\3\2\2\2\u156e\u1517\3\2\2\2\u156e\u151f\3\2\2\2\u156e\u1527\3\2\2\2\u156e"+
		"\u1530\3\2\2\2\u156e\u153a\3\2\2\2\u156e\u1544\3\2\2\2\u156e\u1551\3\2"+
		"\2\2\u156e\u155b\3\2\2\2\u156e\u155c\3\2\2\2\u156e\u1560\3\2\2\2\u156e"+
		"\u156d\3\2\2\2\u156f\u0217\3\2\2\2\u1570\u1571\7\u03c1\2\2\u1571\u1576"+
		"\7\u03d0\2\2\u1572\u1573\7\u03c3\2\2\u1573\u1575\7\u03d0\2\2\u1574\u1572"+
		"\3\2\2\2\u1575\u1578\3\2\2\2\u1576\u1574\3\2\2\2\u1576\u1577\3\2\2\2\u1577"+
		"\u1579\3\2\2\2\u1578\u1576\3\2\2\2\u1579\u157a\7\u03c2\2\2\u157a\u0219"+
		"\3\2\2\2\u157b\u157d\tb\2\2\u157c\u157e\5\u021c\u010f\2\u157d\u157c\3"+
		"\2\2\2\u157d\u157e\3\2\2\2\u157e\u1595\3\2\2\2\u157f\u1581\7\u00bf\2\2"+
		"\u1580\u1582\5\u021c\u010f\2\u1581\u1580\3\2\2\2\u1581\u1582\3\2\2\2\u1582"+
		"\u1589\3\2\2\2\u1583\u1584\7\30\2\2\u1584\u1587\7\u0087\2\2\u1585\u1587"+
		"\7\u02a1\2\2\u1586\u1583\3\2\2\2\u1586\u1585\3\2\2\2\u1587\u1588\3\2\2"+
		"\2\u1588\u158a\5\u01f4\u00fb\2\u1589\u1586\3\2\2\2\u1589\u158a\3\2\2\2"+
		"\u158a\u1595\3\2\2\2\u158b\u1595\tc\2\2\u158c\u158e\7\u00b7\2\2\u158d"+
		"\u158f\5\u021e\u0110\2\u158e\u158d\3\2\2\2\u158e\u158f\3\2\2\2\u158f\u1595"+
		"\3\2\2\2\u1590\u1592\t\\\2\2\u1591\u1593\7\u00b1\2\2\u1592\u1591\3\2\2"+
		"\2\u1592\u1593\3\2\2\2\u1593\u1595\3\2\2\2\u1594\u157b\3\2\2\2\u1594\u157f"+
		"\3\2\2\2\u1594\u158b\3\2\2\2\u1594\u158c\3\2\2\2\u1594\u1590\3\2\2\2\u1595"+
		"\u021b\3\2\2\2\u1596\u1597\7\u03c1\2\2\u1597\u1598\5\u0208\u0105\2\u1598"+
		"\u1599\7\u03c2\2\2\u1599\u021d\3\2\2\2\u159a\u159b\7\u03c1\2\2\u159b\u159c"+
		"\5\u0208\u0105\2\u159c\u159d\7\u03c3\2\2\u159d\u159e\5\u0208\u0105\2\u159e"+
		"\u159f\7\u03c2\2\2\u159f\u021f\3\2\2\2\u15a0\u15a1\7\u03c1\2\2\u15a1\u15a4"+
		"\5\u0208\u0105\2\u15a2\u15a3\7\u03c3\2\2\u15a3\u15a5\5\u0208\u0105\2\u15a4"+
		"\u15a2\3\2\2\2\u15a4\u15a5\3\2\2\2\u15a5\u15a6\3\2\2\2\u15a6\u15a7\7\u03c2"+
		"\2\2\u15a7\u0221\3\2\2\2\u15a8\u15ad\5\u0202\u0102\2\u15a9\u15aa\7\u03c3"+
		"\2\2\u15aa\u15ac\5\u0202\u0102\2\u15ab\u15a9\3\2\2\2\u15ac\u15af\3\2\2"+
		"\2\u15ad\u15ab\3\2\2\2\u15ad\u15ae\3\2\2\2\u15ae\u0223\3\2\2\2\u15af\u15ad"+
		"\3\2\2\2\u15b0\u15b5\5\u01ea\u00f6\2\u15b1\u15b2\7\u03c3\2\2\u15b2\u15b4"+
		"\5\u01ea\u00f6\2\u15b3\u15b1\3\2\2\2\u15b4\u15b7\3\2\2\2\u15b5\u15b3\3"+
		"\2\2\2\u15b5\u15b6\3\2\2\2\u15b6\u0225\3\2\2\2\u15b7\u15b5\3\2\2\2\u15b8"+
		"\u15b9\7\u03c1\2\2\u15b9\u15be\5\u01ee\u00f8\2\u15ba\u15bb\7\u03c3\2\2"+
		"\u15bb\u15bd\5\u01ee\u00f8\2\u15bc\u15ba\3\2\2\2\u15bd\u15c0\3\2\2\2\u15be"+
		"\u15bc\3\2\2\2\u15be\u15bf\3\2\2\2\u15bf\u15c1\3\2\2\2\u15c0\u15be\3\2"+
		"\2\2\u15c1\u15c2\7\u03c2\2\2\u15c2\u0227\3\2\2\2\u15c3\u15c8\5\u0250\u0129"+
		"\2\u15c4\u15c5\7\u03c3\2\2\u15c5\u15c7\5\u0250\u0129\2\u15c6\u15c4\3\2"+
		"\2\2\u15c7\u15ca\3\2\2\2\u15c8\u15c6\3\2\2\2\u15c8\u15c9\3\2\2\2\u15c9"+
		"\u0229\3\2\2\2\u15ca\u15c8\3\2\2\2\u15cb\u15d0\5\u0236\u011c\2\u15cc\u15cd"+
		"\7\u03c3\2\2\u15cd\u15cf\5\u0236\u011c\2\u15ce\u15cc\3\2\2\2\u15cf\u15d2"+
		"\3\2\2\2\u15d0\u15ce\3\2\2\2\u15d0\u15d1\3\2\2\2\u15d1\u022b\3\2\2\2\u15d2"+
		"\u15d0\3\2\2\2\u15d3\u15d8\5\u0214\u010b\2\u15d4\u15d5\7\u03c3\2\2\u15d5"+
		"\u15d7\5\u0214\u010b\2\u15d6\u15d4\3\2\2\2\u15d7\u15da\3\2\2\2\u15d8\u15d6"+
		"\3\2\2\2\u15d8\u15d9\3\2\2\2\u15d9\u022d\3\2\2\2\u15da\u15d8\3\2\2\2\u15db"+
		"\u15e0\7\u03d0\2\2\u15dc\u15dd\7\u03c3\2\2\u15dd\u15df\7\u03d0\2\2\u15de"+
		"\u15dc\3\2\2\2\u15df\u15e2\3\2\2\2\u15e0\u15de\3\2\2\2\u15e0\u15e1\3\2"+
		"\2\2\u15e1\u022f\3\2\2\2\u15e2\u15e0\3\2\2\2\u15e3\u15e8\7\u03db\2\2\u15e4"+
		"\u15e5\7\u03c3\2\2\u15e5\u15e7\7\u03db\2\2\u15e6\u15e4\3\2\2\2\u15e7\u15ea"+
		"\3\2\2\2\u15e8\u15e6\3\2\2\2\u15e8\u15e9\3\2\2\2\u15e9\u0231\3\2\2\2\u15ea"+
		"\u15e8\3\2\2\2\u15eb\u15f7\7g\2\2\u15ec\u15ee\5\u0256\u012c\2\u15ed\u15ec"+
		"\3\2\2\2\u15ed\u15ee\3\2\2\2\u15ee\u15ef\3\2\2\2\u15ef\u15f7\5\u0214\u010b"+
		"\2\u15f0\u15f4\5\u0234\u011b\2\u15f1\u15f2\7h\2\2\u15f2\u15f3\7\u00a1"+
		"\2\2\u15f3\u15f5\5\u0234\u011b\2\u15f4\u15f1\3\2\2\2\u15f4\u15f5\3\2\2"+
		"\2\u15f5\u15f7\3\2\2\2\u15f6\u15eb\3\2\2\2\u15f6\u15ed\3\2\2\2\u15f6\u15f0"+
		"\3\2\2\2\u15f7\u0233\3\2\2\2\u15f8\u15fe\td\2\2\u15f9\u15fb\7\u03c1\2"+
		"\2\u15fa\u15fc\5\u0208\u0105\2\u15fb\u15fa\3\2\2\2\u15fb\u15fc\3\2\2\2"+
		"\u15fc\u15fd\3\2\2\2\u15fd\u15ff\7\u03c2\2\2\u15fe\u15f9\3\2\2\2\u15fe"+
		"\u15ff\3\2\2\2\u15ff\u1607\3\2\2\2\u1600\u1601\7\u00f5\2\2\u1601\u1603"+
		"\7\u03c1\2\2\u1602\u1604\5\u0208\u0105\2\u1603\u1602\3\2\2\2\u1603\u1604"+
		"\3\2\2\2\u1604\u1605\3\2\2\2\u1605\u1607\7\u03c2\2\2\u1606\u15f8\3\2\2"+
		"\2\u1606\u1600\3\2\2\2\u1607\u0235\3\2\2\2\u1608\u160b\5\u0250\u0129\2"+
		"\u1609\u160b\7\'\2\2\u160a\u1608\3\2\2\2\u160a\u1609\3\2\2\2\u160b\u0237"+
		"\3\2\2\2\u160c\u160d\7D\2\2\u160d\u160e\7\65\2\2\u160e\u0239\3\2\2\2\u160f"+
		"\u1610\7D\2\2\u1610\u1611\7e\2\2\u1611\u1612\7\65\2\2\u1612\u023b\3\2"+
		"\2\2\u1613\u1625\5\u023e\u0120\2\u1614\u1625\5\u0246\u0124\2\u1615\u1616"+
		"\5\u0248\u0125\2\u1616\u1618\7\u03c1\2\2\u1617\u1619\5\u024c\u0127\2\u1618"+
		"\u1617\3\2\2\2\u1618\u1619\3\2\2\2\u1619\u161a\3\2\2\2\u161a\u161b\7\u03c2"+
		"\2\2\u161b\u1625\3\2\2\2\u161c\u1625\5\u024a\u0126\2\u161d\u161e\7\u00f8"+
		"\2\2\u161e\u161f\7\u03c1\2\2\u161f\u1620\5\u01ec\u00f7\2\u1620\u1621\7"+
		"\u03c3\2\2\u1621\u1622\5\u024e\u0128\2\u1622\u1623\7\u03c2\2\2\u1623\u1625"+
		"\3\2\2\2\u1624\u1613\3\2\2\2\u1624\u1614\3\2\2\2\u1624\u1615\3\2\2\2\u1624"+
		"\u161c\3\2\2\2\u1624\u161d\3\2\2\2\u1625\u023d\3\2\2\2\u1626\u16c4\te"+
		"\2\2\u1627\u1628\7\37\2\2\u1628\u1629\7\u03c1\2\2\u1629\u162a\5\u0250"+
		"\u0129\2\u162a\u162b\7\u03c3\2\2\u162b\u162c\5\u021a\u010e\2\u162c\u162d"+
		"\7\u03c2\2\2\u162d\u16c4\3\2\2\2\u162e\u162f\7\37\2\2\u162f\u1630\7\u03c1"+
		"\2\2\u1630\u1631\5\u0250\u0129\2\u1631\u1632\7\u00a4\2\2\u1632\u1633\5"+
		"\u01f4\u00fb\2\u1633\u1634\7\u03c2\2\2\u1634\u16c4\3\2\2\2\u1635\u1636"+
		"\7\26\2\2\u1636\u1637\7\u03c1\2\2\u1637\u1638\5\u0250\u0129\2\u1638\u1639"+
		"\7\r\2\2\u1639\u163a\5\u021a\u010e\2\u163a\u163b\7\u03c2\2\2\u163b\u16c4"+
		"\3\2\2\2\u163c\u163d\7\u00a5\2\2\u163d\u163e\7\u03c1\2\2\u163e\u163f\5"+
		"\u01ec\u00f7\2\u163f\u1640\7\u03c2\2\2\u1640\u16c4\3\2\2\2\u1641\u1642"+
		"\7\25\2\2\u1642\u1644\5\u0250\u0129\2\u1643\u1645\5\u0240\u0121\2\u1644"+
		"\u1643\3\2\2\2\u1645\u1646\3\2\2\2\u1646\u1644\3\2\2\2\u1646\u1647\3\2"+
		"\2\2\u1647\u164a\3\2\2\2\u1648\u1649\7\61\2\2\u1649\u164b\5\u024e\u0128"+
		"\2\u164a\u1648\3\2\2\2\u164a\u164b\3\2\2\2\u164b\u164c\3\2\2\2\u164c\u164d"+
		"\7\u013e\2\2\u164d\u16c4\3\2\2\2\u164e\u1650\7\25\2\2\u164f\u1651\5\u0240"+
		"\u0121\2\u1650\u164f\3\2\2\2\u1651\u1652\3\2\2\2\u1652\u1650\3\2\2\2\u1652"+
		"\u1653\3\2\2\2\u1653\u1656\3\2\2\2\u1654\u1655\7\61\2\2\u1655\u1657\5"+
		"\u024e\u0128\2\u1656\u1654\3\2\2\2\u1656\u1657\3\2\2\2\u1657\u1658\3\2"+
		"\2\2\u1658\u1659\7\u013e\2\2\u1659\u16c4\3\2\2\2\u165a\u165b\7\u00bf\2"+
		"\2\u165b\u165c\7\u03c1\2\2\u165c\u165f\5\u024c\u0127\2\u165d\u165e\7\u00a4"+
		"\2\2\u165e\u1660\5\u01f4\u00fb\2\u165f\u165d\3\2\2\2\u165f\u1660\3\2\2"+
		"\2\u1660\u1661\3\2\2\2\u1661\u1662\7\u03c2\2\2\u1662\u16c4\3\2\2\2\u1663"+
		"\u1664\7\u00f6\2\2\u1664\u1667\7\u03c1\2\2\u1665\u1668\5\u020c\u0107\2"+
		"\u1666\u1668\5\u0250\u0129\2\u1667\u1665\3\2\2\2\u1667\u1666\3\2\2\2\u1668"+
		"\u1669\3\2\2\2\u1669\u166c\7F\2\2\u166a\u166d\5\u020c\u0107\2\u166b\u166d"+
		"\5\u0250\u0129\2\u166c\u166a\3\2\2\2\u166c\u166b\3\2\2\2\u166d\u166e\3"+
		"\2\2\2\u166e\u166f\7\u03c2\2\2\u166f\u16c4\3\2\2\2\u1670\u1671\tf\2\2"+
		"\u1671\u1674\7\u03c1\2\2\u1672\u1675\5\u020c\u0107\2\u1673\u1675\5\u0250"+
		"\u0129\2\u1674\u1672\3\2\2\2\u1674\u1673\3\2\2\2\u1675\u1676\3\2\2\2\u1676"+
		"\u1679\7=\2\2\u1677\u167a\5\u0208\u0105\2\u1678\u167a\5\u0250\u0129\2"+
		"\u1679\u1677\3\2\2\2\u1679\u1678\3\2\2\2\u167a\u1680\3\2\2\2\u167b\u167e"+
		"\7:\2\2\u167c\u167f\5\u0208\u0105\2\u167d\u167f\5\u0250\u0129\2\u167e"+
		"\u167c\3\2\2\2\u167e\u167d\3\2\2\2\u167f\u1681\3\2\2\2\u1680\u167b\3\2"+
		"\2\2\u1680\u1681\3\2\2\2\u1681\u1682\3\2\2\2\u1682\u1683\7\u03c2\2\2\u1683"+
		"\u16c4\3\2\2\2\u1684\u1685\7\u00fa\2\2\u1685\u1686\7\u03c1\2\2\u1686\u1689"+
		"\tg\2\2\u1687\u168a\5\u020c\u0107\2\u1688\u168a\5\u0250\u0129\2\u1689"+
		"\u1687\3\2\2\2\u1689\u1688\3\2\2\2\u1689\u168a\3\2\2\2\u168a\u168b\3\2"+
		"\2\2\u168b\u168e\7=\2\2\u168c\u168f\5\u020c\u0107\2\u168d\u168f\5\u0250"+
		"\u0129\2\u168e\u168c\3\2\2\2\u168e\u168d\3\2\2\2\u168f\u1690\3\2\2\2\u1690"+
		"\u1691\7\u03c2\2\2\u1691\u16c4\3\2\2\2\u1692\u1693\7\u00fa\2\2\u1693\u1696"+
		"\7\u03c1\2\2\u1694\u1697\5\u020c\u0107\2\u1695\u1697\5\u0250\u0129\2\u1696"+
		"\u1694\3\2\2\2\u1696\u1695\3\2\2\2\u1697\u1698\3\2\2\2\u1698\u169b\7="+
		"\2\2\u1699\u169c\5\u020c\u0107\2\u169a\u169c\5\u0250\u0129\2\u169b\u1699"+
		"\3\2\2\2\u169b\u169a\3\2\2\2\u169c\u169d\3\2\2\2\u169d\u169e\7\u03c2\2"+
		"\2\u169e\u16c4\3\2\2\2\u169f\u16a0\7\u03a2\2\2\u16a0\u16a3\7\u03c1\2\2"+
		"\u16a1\u16a4\5\u020c\u0107\2\u16a2\u16a4\5\u0250\u0129\2\u16a3\u16a1\3"+
		"\2\2\2\u16a3\u16a2\3\2\2\2\u16a4\u16ab\3\2\2\2\u16a5\u16a6\7\r\2\2\u16a6"+
		"\u16a7\th\2\2\u16a7\u16a8\7\u03c1\2\2\u16a8\u16a9\5\u0208\u0105\2\u16a9"+
		"\u16aa\7\u03c2\2\2\u16aa\u16ac\3\2\2\2\u16ab\u16a5\3\2\2\2\u16ab\u16ac"+
		"\3\2\2\2\u16ac\u16ae\3\2\2\2\u16ad\u16af\5\u0242\u0122\2\u16ae\u16ad\3"+
		"\2\2\2\u16ae\u16af\3\2\2\2\u16af\u16b0\3\2\2\2\u16b0\u16b1\7\u03c2\2\2"+
		"\u16b1\u16c4\3\2\2\2\u16b2\u16b3\7\u00f3\2\2\u16b3\u16b4\7\u03c1\2\2\u16b4"+
		"\u16b5\5<\37\2\u16b5\u16b8\7=\2\2\u16b6\u16b9\5\u020c\u0107\2\u16b7\u16b9"+
		"\5\u0250\u0129\2\u16b8\u16b6\3\2\2\2\u16b8\u16b7\3\2\2\2\u16b9\u16ba\3"+
		"\2\2\2\u16ba\u16bb\7\u03c2\2\2\u16bb\u16c4\3\2\2\2\u16bc\u16bd\7\u02db"+
		"\2\2\u16bd\u16be\7\u03c1\2\2\u16be\u16bf\tc\2\2\u16bf\u16c0\7\u03c3\2"+
		"\2\u16c0\u16c1\5\u020c\u0107\2\u16c1\u16c2\7\u03c2\2\2\u16c2\u16c4\3\2"+
		"\2\2\u16c3\u1626\3\2\2\2\u16c3\u1627\3\2\2\2\u16c3\u162e\3\2\2\2\u16c3"+
		"\u1635\3\2\2\2\u16c3\u163c\3\2\2\2\u16c3\u1641\3\2\2\2\u16c3\u164e\3\2"+
		"\2\2\u16c3\u165a\3\2\2\2\u16c3\u1663\3\2\2\2\u16c3\u1670\3\2\2\2\u16c3"+
		"\u1684\3\2\2\2\u16c3\u1692\3\2\2\2\u16c3\u169f\3\2\2\2\u16c3\u16b2\3\2"+
		"\2\2\u16c3\u16bc\3\2\2\2\u16c4\u023f\3\2\2\2\u16c5\u16c6\7\u00a6\2\2\u16c6"+
		"\u16c7\5\u024e\u0128\2\u16c7\u16c8\7\u0097\2\2\u16c8\u16c9\5\u024e\u0128"+
		"\2\u16c9\u0241\3\2\2\2\u16ca\u16cb\7\u0179\2\2\u16cb\u16d0\5\u0244\u0123"+
		"\2\u16cc\u16cd\7\u03c3\2\2\u16cd\u16cf\5\u0244\u0123\2\u16ce\u16cc\3\2"+
		"\2\2\u16cf\u16d2\3\2\2\2\u16d0\u16ce\3\2\2\2\u16d0\u16d1\3\2\2\2\u16d1"+
		"\u16d9\3\2\2\2\u16d2\u16d0\3\2\2\2\u16d3\u16d4\7\u0179\2\2\u16d4\u16d5"+
		"\5\u0208\u0105\2\u16d5\u16d6\7\u03b5\2\2\u16d6\u16d7\5\u0208\u0105\2\u16d7"+
		"\u16d9\3\2\2\2\u16d8\u16ca\3\2\2\2\u16d8\u16d3\3\2\2\2\u16d9\u0243\3\2"+
		"\2\2\u16da\u16dc\5\u0208\u0105\2\u16db\u16dd\ti\2\2\u16dc\u16db\3\2\2"+
		"\2\u16dc\u16dd\3\2\2\2\u16dd\u0245\3\2\2\2\u16de\u16df\tj\2\2\u16df\u16e1"+
		"\7\u03c1\2\2\u16e0\u16e2\t\'\2\2\u16e1\u16e0\3\2\2\2\u16e1\u16e2\3\2\2"+
		"\2\u16e2\u16e3\3\2\2\2\u16e3\u16e4\5\u024e\u0128\2\u16e4\u16e5\7\u03c2"+
		"\2\2\u16e5\u1717\3\2\2\2\u16e6\u16e7\7\u00df\2\2\u16e7\u16ed\7\u03c1\2"+
		"\2\u16e8\u16ee\7\u03b0\2\2\u16e9\u16eb\7\b\2\2\u16ea\u16e9\3\2\2\2\u16ea"+
		"\u16eb\3\2\2\2\u16eb\u16ec\3\2\2\2\u16ec\u16ee\5\u024e\u0128\2\u16ed\u16e8"+
		"\3\2\2\2\u16ed\u16ea\3\2\2\2\u16ee\u16ef\3\2\2\2\u16ef\u1717\7\u03c2\2"+
		"\2\u16f0\u16f1\7\u00df\2\2\u16f1\u16f2\7\u03c1\2\2\u16f2\u16f3\7-\2\2"+
		"\u16f3\u16f4\5\u024c\u0127\2\u16f4\u16f5\7\u03c2\2\2\u16f5\u1717\3\2\2"+
		"\2\u16f6\u16f7\tk\2\2\u16f7\u16f9\7\u03c1\2\2\u16f8\u16fa\7\b\2\2\u16f9"+
		"\u16f8\3\2\2\2\u16f9\u16fa\3\2\2\2\u16fa\u16fb\3\2\2\2\u16fb\u16fc\5\u024e"+
		"\u0128\2\u16fc\u16fd\7\u03c2\2\2\u16fd\u1717\3\2\2\2\u16fe\u16ff\7\u00e0"+
		"\2\2\u16ff\u1701\7\u03c1\2\2\u1700\u1702\7-\2\2\u1701\u1700\3\2\2\2\u1701"+
		"\u1702\3\2\2\2\u1702\u1703\3\2\2\2\u1703\u170e\5\u024c\u0127\2\u1704\u1705"+
		"\7m\2\2\u1705\u1706\7\22\2\2\u1706\u170b\5\u00d2j\2\u1707\u1708\7\u03c3"+
		"\2\2\u1708\u170a\5\u00d2j\2\u1709\u1707\3\2\2\2\u170a\u170d\3\2\2\2\u170b"+
		"\u1709\3\2\2\2\u170b\u170c\3\2\2\2\u170c\u170f\3\2\2\2\u170d\u170b\3\2"+
		"\2\2\u170e\u1704\3\2\2\2\u170e\u170f\3\2\2\2\u170f\u1712\3\2\2\2\u1710"+
		"\u1711\7\u0088\2\2\u1711\u1713\7\u03d0\2\2\u1712\u1710\3\2\2\2\u1712\u1713"+
		"\3\2\2\2\u1713\u1714\3\2\2\2\u1714\u1715\7\u03c2\2\2\u1715\u1717\3\2\2"+
		"\2\u1716\u16de\3\2\2\2\u1716\u16e6\3\2\2\2\u1716\u16f0\3\2\2\2\u1716\u16f6"+
		"\3\2\2\2\u1716\u16fe\3\2\2\2\u1717\u0247\3\2\2\2\u1718\u172f\5\u026c\u0137"+
		"\2\u1719\u172f\7\u0245\2\2\u171a\u172f\7\u00ef\2\2\u171b\u172f\7\u00eb"+
		"\2\2\u171c\u172f\7\u00ec\2\2\u171d\u172f\7\u00ed\2\2\u171e\u172f\7\u00f0"+
		"\2\2\u171f\u172f\7\u00f1\2\2\u1720\u172f\7\u00f2\2\2\u1721\u172f\7D\2"+
		"\2\u1722\u172f\7K\2\2\u1723\u172f\7\u00ee\2\2\u1724\u172f\7\u00f4\2\2"+
		"\u1725\u172f\7\u019b\2\2\u1726\u172f\7\u00f5\2\2\u1727\u172f\7}\2\2\u1728"+
		"\u172f\7\u00f7\2\2\u1729\u172f\7\u00f9\2\2\u172a\u172f\7\u00fa\2\2\u172b"+
		"\u172f\7\u00fb\2\2\u172c\u172f\7\u00fc\2\2\u172d\u172f\7\u00fd\2\2\u172e"+
		"\u1718\3\2\2\2\u172e\u1719\3\2\2\2\u172e\u171a\3\2\2\2\u172e\u171b\3\2"+
		"\2\2\u172e\u171c\3\2\2\2\u172e\u171d\3\2\2\2\u172e\u171e\3\2\2\2\u172e"+
		"\u171f\3\2\2\2\u172e\u1720\3\2\2\2\u172e\u1721\3\2\2\2\u172e\u1722\3\2"+
		"\2\2\u172e\u1723\3\2\2\2\u172e\u1724\3\2\2\2\u172e\u1725\3\2\2\2\u172e"+
		"\u1726\3\2\2\2\u172e\u1727\3\2\2\2\u172e\u1728\3\2\2\2\u172e\u1729\3\2"+
		"\2\2\u172e\u172a\3\2\2\2\u172e\u172b\3\2\2\2\u172e\u172c\3\2\2\2\u172e"+
		"\u172d\3\2\2\2\u172f\u0249\3\2\2\2\u1730\u1731\tl\2\2\u1731\u1732\7\u03c1"+
		"\2\2\u1732\u1733\5\u024e\u0128\2\u1733\u1734\7\u03c2\2\2\u1734\u024b\3"+
		"\2\2\2\u1735\u173a\5\u0214\u010b\2\u1736\u173a\5\u01ec\u00f7\2\u1737\u173a"+
		"\5\u023c\u011f\2\u1738\u173a\5\u0250\u0129\2\u1739\u1735\3\2\2\2\u1739"+
		"\u1736\3\2\2\2\u1739\u1737\3\2\2\2\u1739\u1738\3\2\2\2\u173a\u1744\3\2"+
		"\2\2\u173b\u1740\7\u03c3\2\2\u173c\u1741\5\u0214\u010b\2\u173d\u1741\5"+
		"\u01ec\u00f7\2\u173e\u1741\5\u023c\u011f\2\u173f\u1741\5\u0250\u0129\2"+
		"\u1740\u173c\3\2\2\2\u1740\u173d\3\2\2\2\u1740\u173e\3\2\2\2\u1740\u173f"+
		"\3\2\2\2\u1741\u1743\3\2\2\2\u1742\u173b\3\2\2\2\u1743\u1746\3\2\2\2\u1744"+
		"\u1742\3\2\2\2\u1744\u1745\3\2\2\2\u1745\u024d\3\2\2\2\u1746\u1744\3\2"+
		"\2\2\u1747\u174c\5\u0214\u010b\2\u1748\u174c\5\u01ec\u00f7\2\u1749\u174c"+
		"\5\u023c\u011f\2\u174a\u174c\5\u0250\u0129\2\u174b\u1747\3\2\2\2\u174b"+
		"\u1748\3\2\2\2\u174b\u1749\3\2\2\2\u174b\u174a\3\2\2\2\u174c\u024f\3\2"+
		"\2\2\u174d\u174e\b\u0129\1\2\u174e\u174f\tm\2\2\u174f\u1752\5\u0250\u0129"+
		"\5\u1750\u1752\5\u0252\u012a\2\u1751\u174d\3\2\2\2\u1751\u1750\3\2\2\2"+
		"\u1752\u1759\3\2\2\2\u1753\u1754\f\4\2\2\u1754\u1755\5\u025a\u012e\2\u1755"+
		"\u1756\5\u0250\u0129\5\u1756\u1758\3\2\2\2\u1757\u1753\3\2\2\2\u1758\u175b"+
		"\3\2\2\2\u1759\u1757\3\2\2\2\u1759\u175a\3\2\2\2\u175a\u0251\3\2\2\2\u175b"+
		"\u1759\3\2\2\2\u175c\u175f\b\u012a\1\2\u175d\u175e\7\u03db\2\2\u175e\u1760"+
		"\7\u03a7\2\2\u175f\u175d\3\2\2\2\u175f\u1760\3\2\2\2\u1760\u1761\3\2\2"+
		"\2\u1761\u1762\5\u0254\u012b\2\u1762\u179c\3\2\2\2\u1763\u1764\f\t\2\2"+
		"\u1764\u1765\5\u0258\u012d\2\u1765\u1766\5\u0252\u012a\n\u1766\u179b\3"+
		"\2\2\2\u1767\u1769\f\7\2\2\u1768\u176a\7e\2\2\u1769\u1768\3\2\2\2\u1769"+
		"\u176a\3\2\2\2\u176a\u176b\3\2\2\2\u176b\u176c\7\20\2\2\u176c\u176d\5"+
		"\u0252\u012a\2\u176d\u176e\7\f\2\2\u176e\u176f\5\u0252\u012a\b\u176f\u179b"+
		"\3\2\2\2\u1770\u1771\f\6\2\2\u1771\u1772\7\u01f6\2\2\u1772\u1773\7W\2"+
		"\2\u1773\u179b\5\u0252\u012a\7\u1774\u1776\f\4\2\2\u1775\u1777\7e\2\2"+
		"\u1776\u1775\3\2\2\2\u1776\u1777\3\2\2\2\u1777\u1778\3\2\2\2\u1778\u1779"+
		"\tn\2\2\u1779\u179b\5\u0252\u012a\5\u177a\u177c\f\13\2\2\u177b\u177d\7"+
		"e\2\2\u177c\u177b\3\2\2\2\u177c\u177d\3\2\2\2\u177d\u177e\3\2\2\2\u177e"+
		"\u177f\7F\2\2\u177f\u1782\7\u03c1\2\2\u1780\u1783\5\u00b4[\2\u1781\u1783"+
		"\5\u0228\u0115\2\u1782\u1780\3\2\2\2\u1782\u1781\3\2\2\2\u1783\u1784\3"+
		"\2\2\2\u1784\u1785\7\u03c2\2\2\u1785\u179b\3\2\2\2\u1786\u1787\f\n\2\2"+
		"\u1787\u1788\7N\2\2\u1788\u179b\5\u0212\u010a\2\u1789\u178a\f\b\2\2\u178a"+
		"\u178b\5\u0258\u012d\2\u178b\u178c\to\2\2\u178c\u178d\7\u03c1\2\2\u178d"+
		"\u178e\5\u00b4[\2\u178e\u178f\7\u03c2\2\2\u178f\u179b\3\2\2\2\u1790\u1792"+
		"\f\5\2\2\u1791\u1793\7e\2\2\u1792\u1791\3\2\2\2\u1792\u1793\3\2\2\2\u1793"+
		"\u1794\3\2\2\2\u1794\u1795\7W\2\2\u1795\u1798\5\u0252\u012a\2\u1796\u1797"+
		"\7\u0144\2\2\u1797\u1799\7\u03d0\2\2\u1798\u1796\3\2\2\2\u1798\u1799\3"+
		"\2\2\2\u1799\u179b\3\2\2\2\u179a\u1763\3\2\2\2\u179a\u1767\3\2\2\2\u179a"+
		"\u1770\3\2\2\2\u179a\u1774\3\2\2\2\u179a\u177a\3\2\2\2\u179a\u1786\3\2"+
		"\2\2\u179a\u1789\3\2\2\2\u179a\u1790\3\2\2\2\u179b\u179e\3\2\2\2\u179c"+
		"\u179a\3\2\2\2\u179c\u179d\3\2\2\2\u179d\u0253\3\2\2\2\u179e\u179c\3\2"+
		"\2\2\u179f\u17a0\b\u012b\1\2\u17a0\u17cd\5\u0214\u010b\2\u17a1\u17cd\5"+
		"\u01ec\u00f7\2\u17a2\u17cd\5\u023c\u011f\2\u17a3\u17cd\5\u01f2\u00fa\2"+
		"\u17a4\u17a5\5\u0256\u012c\2\u17a5\u17a6\5\u0254\u012b\n\u17a6\u17cd\3"+
		"\2\2\2\u17a7\u17a8\7\u00c3\2\2\u17a8\u17cd\5\u0254\u012b\t\u17a9\u17aa"+
		"\7\u03c1\2\2\u17aa\u17af\5\u0250\u0129\2\u17ab\u17ac\7\u03c3\2\2\u17ac"+
		"\u17ae\5\u0250\u0129\2\u17ad\u17ab\3\2\2\2\u17ae\u17b1\3\2\2\2\u17af\u17ad"+
		"\3\2\2\2\u17af\u17b0\3\2\2\2\u17b0\u17b2\3\2\2\2\u17b1\u17af\3\2\2\2\u17b2"+
		"\u17b3\7\u03c2\2\2\u17b3\u17cd\3\2\2\2\u17b4\u17b5\7\u01e4\2\2\u17b5\u17b6"+
		"\7\u03c1\2\2\u17b6\u17b9\5\u0250\u0129\2\u17b7\u17b8\7\u03c3\2\2\u17b8"+
		"\u17ba\5\u0250\u0129\2\u17b9\u17b7\3\2\2\2\u17ba\u17bb\3\2\2\2\u17bb\u17b9"+
		"\3\2\2\2\u17bb\u17bc\3\2\2\2\u17bc\u17bd\3\2\2\2\u17bd\u17be\7\u03c2\2"+
		"\2\u17be\u17cd\3\2\2\2\u17bf\u17c0\7\65\2\2\u17c0\u17c1\7\u03c1\2\2\u17c1"+
		"\u17c2\5\u00b4[\2\u17c2\u17c3\7\u03c2\2\2\u17c3\u17cd\3\2\2\2\u17c4\u17c5"+
		"\7\u03c1\2\2\u17c5\u17c6\5\u00b4[\2\u17c6\u17c7\7\u03c2\2\2\u17c7\u17cd"+
		"\3\2\2\2\u17c8\u17c9\7L\2\2\u17c9\u17ca\5\u0250\u0129\2\u17ca\u17cb\5"+
		"<\37\2\u17cb\u17cd\3\2\2\2\u17cc\u179f\3\2\2\2\u17cc\u17a1\3\2\2\2\u17cc"+
		"\u17a2\3\2\2\2\u17cc\u17a3\3\2\2\2\u17cc\u17a4\3\2\2\2\u17cc\u17a7\3\2"+
		"\2\2\u17cc\u17a9\3\2\2\2\u17cc\u17b4\3\2\2\2\u17cc\u17bf\3\2\2\2\u17cc"+
		"\u17c4\3\2\2\2\u17cc\u17c8\3\2\2\2\u17cd\u17d7\3\2\2\2\u17ce\u17cf\f\3"+
		"\2\2\u17cf\u17d0\5\u025c\u012f\2\u17d0\u17d1\5\u0254\u012b\4\u17d1\u17d6"+
		"\3\2\2\2\u17d2\u17d3\f\f\2\2\u17d3\u17d4\7\32\2\2\u17d4\u17d6\5\u01f6"+
		"\u00fc\2\u17d5\u17ce\3\2\2\2\u17d5\u17d2\3\2\2\2\u17d6\u17d9\3\2\2\2\u17d7"+
		"\u17d5\3\2\2\2\u17d7\u17d8\3\2\2\2\u17d8\u0255\3\2\2\2\u17d9\u17d7\3\2"+
		"\2\2\u17da\u17db\tp\2\2\u17db\u0257\3\2\2\2\u17dc\u17e8\7\u03b8\2\2\u17dd"+
		"\u17e8\7\u03b9\2\2\u17de\u17e8\7\u03ba\2\2\u17df\u17e0\7\u03ba\2\2\u17e0"+
		"\u17e8\7\u03b8\2\2\u17e1\u17e2\7\u03b9\2\2\u17e2\u17e8\7\u03b8\2\2\u17e3"+
		"\u17e4\7\u03ba\2\2\u17e4\u17e8\7\u03b9\2\2\u17e5\u17e6\7\u03bb\2\2\u17e6"+
		"\u17e8\7\u03b8\2\2\u17e7\u17dc\3\2\2\2\u17e7\u17dd\3\2\2\2\u17e7\u17de"+
		"\3\2\2\2\u17e7\u17df\3\2\2\2\u17e7\u17e1\3\2\2\2\u17e7\u17e3\3\2\2\2\u17e7"+
		"\u17e5\3\2\2\2\u17e8\u0259\3\2\2\2\u17e9\u17f1\7\f\2\2\u17ea\u17eb\7\u03be"+
		"\2\2\u17eb\u17f1\7\u03be\2\2\u17ec\u17f1\7\u00ab\2\2\u17ed\u17f1\7l\2"+
		"\2\u17ee\u17ef\7\u03bd\2\2\u17ef\u17f1\7\u03bd\2\2\u17f0\u17e9\3\2\2\2"+
		"\u17f0\u17ea\3\2\2\2\u17f0\u17ec\3\2\2\2\u17f0\u17ed\3\2\2\2\u17f0\u17ee"+
		"\3\2\2\2\u17f1\u025b\3\2\2\2\u17f2\u17f3\7\u03ba\2\2\u17f3\u17fa\7\u03ba"+
		"\2\2\u17f4\u17f5\7\u03b9\2\2\u17f5\u17fa\7\u03b9\2\2\u17f6\u17fa\7\u03be"+
		"\2\2\u17f7\u17fa\7\u03bf\2\2\u17f8\u17fa\7\u03bd\2\2\u17f9\u17f2\3\2\2"+
		"\2\u17f9\u17f4\3\2\2\2\u17f9\u17f6\3\2\2\2\u17f9\u17f7\3\2\2\2\u17f9\u17f8"+
		"\3\2\2\2\u17fa\u025d\3\2\2\2\u17fb\u17fc\tq\2\2\u17fc\u025f\3\2\2\2\u17fd"+
		"\u17fe\tr\2\2\u17fe\u0261\3\2\2\2\u17ff\u1800\ts\2\2\u1800\u0263\3\2\2"+
		"\2\u1801\u1802\tt\2\2\u1802\u0265\3\2\2\2\u1803\u1804\tu\2\2\u1804\u0267"+
		"\3\2\2\2\u1805\u1806\tv\2\2\u1806\u0269\3\2\2\2\u1807\u1808\tw\2\2\u1808"+
		"\u026b\3\2\2\2\u1809\u180a\tx\2\2\u180a\u026d\3\2\2\2\u037f\u026f\u0272"+
		"\u0278\u027b\u027e\u0280\u0285\u0288\u028b\u0294\u02bb\u02bf\u02ca\u02db"+
		"\u02e0\u02ec\u0307\u030d\u0312\u0318\u031d\u0321\u032a\u032d\u0330\u0334"+
		"\u033b\u033e\u0343\u034b\u0350\u0355\u0358\u035a\u0366\u0369\u036d\u0370"+
		"\u0374\u0377\u037b\u037e\u0381\u0385\u0388\u038c\u0392\u0398\u039e\u03a5"+
		"\u03ac\u03b2\u03b8\u03c1\u03d4\u03db\u03df\u03e9\u03ed\u03f1\u03f5\u03f9"+
		"\u03fe\u0401\u0404\u0407\u040a\u0410\u0414\u041a\u041f\u0422\u0425\u0427"+
		"\u0432\u0436\u0439\u0447\u044a\u044e\u0451\u0455\u0458\u045c\u045f\u0463"+
		"\u0466\u0469\u046d\u0470\u0474\u047a\u0487\u048e\u0493\u0496\u049b\u04a3"+
		"\u04a9\u04ad\u04b0\u04b5\u04b8\u04bc\u04c0\u04c3\u04cb\u04cd\u04d4\u04da"+
		"\u04e2\u04e5\u04ec\u04ef\u04f1\u04f7\u04fd\u050e\u0515\u051c\u0525\u0528"+
		"\u0535\u0542\u0547\u0557\u055f\u0569\u056f\u0579\u057c\u0581\u058e\u0595"+
		"\u059a\u059e\u05a0\u05a5\u05a8\u05ae\u05b3\u05b5\u05b9\u05bc\u05bf\u05c5"+
		"\u05ca\u05cc\u05d1\u05d8\u05da\u05e1\u05e6\u05ea\u05ed\u05f5\u05fd\u05ff"+
		"\u0607\u060b\u060e\u0614\u0619\u061c\u0622\u0625\u0629\u062e\u0633\u0637"+
		"\u063c\u063f\u0644\u0648\u064c\u0651\u0656\u065b\u0661\u0666\u066b\u0671"+
		"\u0676\u067b\u0680\u0685\u068a\u068f\u0694\u0699\u069e\u06a3\u06a9\u06ae"+
		"\u06b4\u06be\u06c5\u06c7\u06cf\u06d4\u06d7\u06df\u06e5\u06f5\u0701\u0703"+
		"\u0706\u070e\u0714\u071a\u0727\u072e\u0736\u0739\u0744\u074c\u074f\u075b"+
		"\u0762\u076a\u076d\u0779\u0780\u0788\u078b\u0792\u079a\u079d\u079f\u07a4"+
		"\u07ac\u07b5\u07b9\u07bd\u07c2\u07c8\u07ce\u07d3\u07d8\u07dd\u07e2\u07e5"+
		"\u07ea\u07ef\u07f9\u07fd\u0804\u0809\u080c\u0811\u0814\u0818\u081c\u0824"+
		"\u0837\u083a\u083d\u0841\u084b\u0858\u085f\u0862\u086b\u086e\u0871\u087c"+
		"\u087f\u0883\u088b\u088e\u0893\u089b\u08a1\u08a5\u08a9\u08ae\u08b3\u08ba"+
		"\u08be\u08c9\u08d1\u08d4\u08da\u08e0\u08e2\u08e7\u08ed\u08f3\u08f5\u08f9"+
		"\u08fc\u08ff\u0905\u090b\u090e\u0914\u091a\u091c\u0921\u0929\u092b\u0934"+
		"\u0939\u0941\u0945\u094d\u0957\u095c\u0963\u0967\u096b\u0983\u0987\u0993"+
		"\u0996\u099f\u09b0\u09bc\u09c3\u09ca\u09d9\u09e6\u09ec\u09f2\u09f8\u09fe"+
		"\u0a04\u0a0a\u0a0f\u0a16\u0a1d\u0a24\u0a29\u0a2c\u0a2e\u0a3c\u0a43\u0a4a"+
		"\u0a50\u0a54\u0a58\u0a5f\u0a62\u0a67\u0a6e\u0a75\u0a79\u0a82\u0a8b\u0a94"+
		"\u0a97\u0a9b\u0aa4\u0aa8\u0aab\u0aae\u0ab6\u0abc\u0ac5\u0ac8\u0ad3\u0ad6"+
		"\u0adb\u0ade\u0ae3\u0aed\u0af2\u0af8\u0afa\u0b00\u0b02\u0b08\u0b10\u0b15"+
		"\u0b1d\u0b20\u0b25\u0b28\u0b2d\u0b35\u0b3d\u0b43\u0b4b\u0b50\u0b58\u0b5b"+
		"\u0b5f\u0b62\u0b6a\u0b70\u0b79\u0b7c\u0b80\u0b84\u0b8a\u0b8e\u0b92\u0b94"+
		"\u0b97\u0b9a\u0b9d\u0ba3\u0ba7\u0baa\u0bad\u0bb0\u0bb3\u0bb5\u0bb9\u0bc7"+
		"\u0bca\u0bd0\u0bd4\u0bdc\u0be0\u0be3\u0be6\u0bef\u0bf3\u0bf6\u0bfa\u0bfe"+
		"\u0c01\u0c04\u0c09\u0c0f\u0c13\u0c1d\u0c23\u0c27\u0c2d\u0c31\u0c37\u0c3a"+
		"\u0c46\u0c4a\u0c4e\u0c56\u0c5a\u0c62\u0c65\u0c69\u0c6c\u0c74\u0c79\u0c7c"+
		"\u0c7f\u0c83\u0c86\u0c8f\u0c94\u0c9d\u0ca2\u0ca9\u0cb0\u0cb8\u0cbd\u0cc5"+
		"\u0cc8\u0ccb\u0cd2\u0cd5\u0cdc\u0cdf\u0ce7\u0ced\u0cf8\u0cfb\u0d06\u0d0c"+
		"\u0d10\u0d1b\u0d20\u0d22\u0d26\u0d30\u0d3a\u0d40\u0d45\u0d49\u0d4c\u0d52"+
		"\u0d58\u0d5b\u0d5e\u0d60\u0d66\u0d6c\u0d6f\u0d73\u0d79\u0d7d\u0d87\u0d8b"+
		"\u0d91\u0d9a\u0d9d\u0da1\u0da4\u0da8\u0dac\u0daf\u0db1\u0db9\u0dc5\u0dcb"+
		"\u0dcd\u0dd3\u0dd5\u0dd7\u0ddd\u0de5\u0ded\u0df3\u0dfc\u0e01\u0e03\u0e07"+
		"\u0e0b\u0e11\u0e18\u0e1c\u0e25\u0e28\u0e2c\u0e30\u0e34\u0e37\u0e3a\u0e3d"+
		"\u0e41\u0e45\u0e48\u0e4b\u0e4e\u0e55\u0e59\u0e68\u0e75\u0e7d\u0e87\u0e8b"+
		"\u0e8e\u0e94\u0e97\u0e9a\u0ea3\u0eac\u0eb6\u0eba\u0ec4\u0ece\u0ed6\u0ed9"+
		"\u0ee2\u0ee5\u0ee9\u0eee\u0ef2\u0efb\u0efe\u0f1d\u0f20\u0f23\u0f5b\u0f60"+
		"\u0f7c\u0f8a\u0f91\u0f95\u0f9b\u0fa3\u0fa5\u0fb0\u0fba\u0fc1\u0fc7\u0fcf"+
		"\u0fd4\u0fdc\u0fe4\u0fec\u0ff4\u0ffa\u0ffd\u1001\u1006\u100b\u1011\u1013"+
		"\u101e\u1023\u102a\u102c\u103a\u1040\u1045\u104a\u1050\u1057\u105f\u1067"+
		"\u106c\u1072\u1075\u107d\u1084\u108d\u1090\u10a1\u10a9\u10b1\u10b5\u10bc"+
		"\u10c2\u10ca\u10d3\u10d9\u10e0\u10e7\u10ec\u10ef\u10f1\u10f7\u10f9\u10fd"+
		"\u10ff\u1102\u110b\u1111\u1118\u111f\u1124\u1127\u1129\u112f\u1131\u1135"+
		"\u1137\u113a\u113f\u1146\u114f\u1154\u115d\u1164\u1169\u116c\u116e\u1174"+
		"\u1176\u1179\u1185\u118b\u1194\u119d\u11a2\u11ab\u11b1\u11bc\u11bf\u11cb"+
		"\u11d2\u11d7\u11e6\u11f1\u11f4\u11fe\u1208\u1212\u121c\u1220\u1224\u122d"+
		"\u1248\u125a\u1262\u126d\u1274\u1278\u127f\u1284\u1287\u128a\u1293\u1297"+
		"\u12b5\u12bc\u12c0\u12c7\u12ca\u12d4\u12de\u12e2\u12e8\u12eb\u12f0\u12f4"+
		"\u12fb\u12fe\u1304\u131c\u1329\u132c\u1336\u133e\u1342\u1349\u134c\u1355"+
		"\u135b\u1361\u136b\u136d\u1373\u1376\u1379\u1385\u1388\u138e\u1391\u1399"+
		"\u13a1\u13a7\u13ab\u13b9\u13c5\u13cc\u13cf\u13d6\u13dd\u13e2\u13e7\u13f2"+
		"\u13fd\u1403\u1408\u1415\u1417\u141c\u1421\u1423\u142a\u1431\u1434\u1437"+
		"\u143d\u1441\u1447\u144d\u145c\u1461\u1467\u146e\u1470\u1474\u147a\u147d"+
		"\u1487\u148b\u149f\u14a6\u14a8\u14af\u14b1\u14b5\u14ba\u14c5\u14ca\u14d0"+
		"\u14d3\u14d7\u14dc\u14df\u14e3\u14e7\u14e9\u14ee\u14f3\u14ff\u1502\u1506"+
		"\u1509\u150e\u1511\u1515\u151a\u151d\u1522\u1525\u152b\u152e\u1532\u1535"+
		"\u1538\u153c\u153f\u1542\u1546\u1549\u154c\u154f\u1553\u1556\u1559\u155e"+
		"\u1563\u1568\u156b\u156e\u1576\u157d\u1581\u1586\u1589\u158e\u1592\u1594"+
		"\u15a4\u15ad\u15b5\u15be\u15c8\u15d0\u15d8\u15e0\u15e8\u15ed\u15f4\u15f6"+
		"\u15fb\u15fe\u1603\u1606\u160a\u1618\u1624\u1646\u164a\u1652\u1656\u165f"+
		"\u1667\u166c\u1674\u1679\u167e\u1680\u1689\u168e\u1696\u169b\u16a3\u16ab"+
		"\u16ae\u16b8\u16c3\u16d0\u16d8\u16dc\u16e1\u16ea\u16ed\u16f9\u1701\u170b"+
		"\u170e\u1712\u1716\u172e\u1739\u1740\u1744\u174b\u1751\u1759\u175f\u1769"+
		"\u1776\u177c\u1782\u1792\u1798\u179a\u179c\u17af\u17bb\u17cc\u17d5\u17d7"+
		"\u17e7\u17f0\u17f9";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}