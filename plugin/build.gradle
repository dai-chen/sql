/*
 *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   A copy of the License is located at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file. This file is distributed
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied. See the License for the specific language governing
 *   permissions and limitations under the License.
 */

plugins {
    id 'java-library'
    //id 'checkstyle'
    id "io.freefair.lombok" version "5.0.0-rc4"
}

apply plugin: 'elasticsearch.esplugin'
apply plugin: 'elasticsearch.testclusters'
apply plugin: 'jacoco'
if (!System.properties.containsKey('tests.rest.cluster') && !System.properties.containsKey('tests.cluster')){
    //apply from: 'build-tools/sqlplugin-coverage.gradle'
}

jacoco {
    toolVersion = "0.8.3"
}

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.TXT')
    noticeFile = rootProject.file('NOTICE')
}

// ANTLR generated parser file is too large to be checked which caused licenseHeaders stuck.
licenseHeaders {
    enabled = true
    excludes = ['com/amazon/opendistroforelasticsearch/sql/antlr/parser/**']
}

// TODO: need to fix java doc to enable JavaDoc
javadoc.enabled = false
esplugin {
    name 'opendistro_sql' // zip file name and plugin name in ${elasticsearch.plugin.name} read by ES when plugin loading
    description 'Open Distro for Elasticsearch SQL'
    classname 'com.amazon.opendistroforelasticsearch.sql.plugin.SqlPlug'
    licenseFile rootProject.file("LICENSE.txt")
    noticeFile rootProject.file("NOTICE")
}

// TODO: fix compiler warnings
compileJava.options.warnings = false
compileJava {
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
    doFirst {
        // TODO: do not fail build on warnings, need to fix all compiler warnings
        options.compilerArgs.remove('-Werror')
        // TODO: need to fix all java doc format
        options.compilerArgs.remove('-Xdoclint:all')
    }
}

// TODO: Similarly, need to fix compiling errors in test source code
compileTestJava.options.warnings = false
compileTestJava {
    options.compilerArgs.addAll(["-processor", 'lombok.launch.AnnotationProcessorHider$AnnotationProcessor'])
    doFirst {
        options.compilerArgs.remove('-Werror')
        options.compilerArgs.remove('-Xdoclint:all')
    }
}

// TODO: Need to update integration test to use ElasticSearch test framework
test {
    include '**/*Test.class'
    exclude 'com/amazon/opendistroforelasticsearch/sql/intgtest/**'
    // Gradle runs unit test using a working directory other and project root
    // set 'project.root' property to allow unit test classes to access test resources
    systemProperty('project.root', project.rootDir.absolutePath)
}

testClusters.integTest {
    testDistribution = 'oss'
}

integTest.runner {
    // add "-Dtests.security.manager=false" to VM options if you want to run integ tests in IntelliJ
    systemProperty 'tests.security.manager', 'false'
    // allows integration test classes to access test resource from project root path
    systemProperty('project.root', project.rootDir.absolutePath)

    // Tell the test JVM if the cluster JVM is running under a debugger so that tests can use longer timeouts for
    // requests. The 'doFirst' delays reading the debug setting on the cluster till execution time.
    doFirst { systemProperty 'cluster.debug', getDebug()}

    // The --debug-jvm command-line option makes the cluster debuggable; this makes the tests debuggable
    if (System.getProperty("test.debug") != null) {
        jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005'
    }

    // Run different task based on test type. "exclude" is required for each task.
    def testType = System.getProperty("testType")
    if (testType == 'doctest') { // Doctest to generate documentation
        include 'com/amazon/opendistroforelasticsearch/sql/doctest/**/*IT.class'
        exclude 'com/amazon/opendistroforelasticsearch/sql/correctness/**'
        exclude 'com/amazon/opendistroforelasticsearch/sql/esintgtest/**'

    } else if (testType == 'comparison') { // Comparision testing
        include 'com/amazon/opendistroforelasticsearch/sql/correctness/CorrectnessIT.class'
        exclude 'com/amazon/opendistroforelasticsearch/sql/doctest/**'
        exclude 'com/amazon/opendistroforelasticsearch/sql/esintgtest/**'

        // Enable logging output to console
        testLogging.showStandardStreams true

        // Pass down system properties to IT class
        systemProperty "esHost", System.getProperty("esHost")
        systemProperty "dbUrl", System.getProperty("dbUrl")
        systemProperty "otherDbUrls", System.getProperty("otherDbUrls")
        systemProperty "queries", System.getProperty("queries")

    } else { // Run all other integration tests. Skip doctest for now due to randomness in our stats API.
        include 'com/amazon/opendistroforelasticsearch/sql/esintgtest/**/*IT.class'
        exclude 'com/amazon/opendistroforelasticsearch/sql/doctest/**/*IT.class'
        exclude 'com/amazon/opendistroforelasticsearch/sql/correctness/**'
    }
}

//check.dependsOn jacocoTestReport

// TODO: fix code style in main and test source code
/*
checkstyle {
    configFile file("config/checkstyle/checkstyle.xml")
}

checkstyleMain.ignoreFailures = false
checkstyleTest.ignoreFailures = true
*/

// TODO: fix forbidden APIs
// from police-man plugin, see https://github.com/policeman-tools/forbidden-apis/wiki/GradleUsage
forbiddenApis.ignoreFailures = true
// TODO: fix forbidden code patterns
// introduced by elasticsearch plugin
// see https://github.com/elastic/elasticsearch/blob/master/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/ForbiddenPatternsTask.java
forbiddenPatterns {
    setEnabled(false)
}

// TODO: fix license. skip dependency license checks
dependencyLicenses.enabled = false

// We don't need to follow ES testing naming conventions.
// see https://github.com/elastic/elasticsearch/blob/323f312bbc829a63056a79ebe45adced5099f6e6/buildSrc/src/main/java/org/elasticsearch/gradle/precommit/TestingConventionsTasks.java
// enable testingConventions check will cause errors like:  "Classes ending with [Tests] must subclass [LuceneTestCase]"
testingConventions.enabled = false

// TODO: need to verify the thirdPartyAudi
// currently it complains missing classes like ibatis, mysql etc, should not be a problem
thirdPartyAudit.enabled = false


//****************************************************************************/
// Dependencies
//****************************************************************************/
dependencies {
    compile project(':legacy')
}


apply plugin: 'nebula.ospackage'

// This is afterEvaluate because the bundlePlugin ZIP task is updated afterEvaluate and changes the ZIP name to match the plugin name
afterEvaluate {
    ospackage {
        packageName = "${name}"
        release = isSnapshot ? "0.1" : '1'
        version = "${project.version}" - "-SNAPSHOT"

        into '/usr/share/elasticsearch/plugins'
        from(zipTree(bundlePlugin.archivePath)) {
            into esplugin.name
        }

        user 'root'
        permissionGroup 'root'
        fileMode 0644
        dirMode 0755

        requires('elasticsearch-oss', versions.elasticsearch, EQUAL)
        packager = 'Amazon'
        vendor = 'Amazon'
        os = 'LINUX'
        prefix '/usr'

        license 'ASL-2.0'
        maintainer 'OpenDistro for Elasticsearch Team <opendistro@amazon.com>'
        url 'https://opendistro.github.io/elasticsearch/downloads'
        summary '''
         SQL plugin for OpenDistro for Elasticsearch. 
         Reference documentation can be found at https://opendistro.github.io/for-elasticsearch-docs/.
    '''.stripIndent().replace('\n', ' ').trim()
    }

    buildRpm {
        arch = 'NOARCH'
        archiveName "${packageName}-${version}.rpm"
        dependsOn 'assemble'
    }

    buildDeb {
        arch = 'amd64'
        archiveName "${packageName}-${version}.deb"
        dependsOn 'assemble'
    }

    task buildPackages(type: GradleBuild) {
        tasks = ['build', 'buildRpm', 'buildDeb']
    }
}
